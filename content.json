{"android":{"reference":{"index":{"template":"page-sidebar","title":"Optimizely Android SDK Reference","body":"<h1 id=\"optimizely-android-sdk-reference\">Optimizely Android SDK Reference</h1>\n<p>This section provides information on how to customize your SDK installation and code snippets for how to implement Optimizely&#39;s APIs.</p>\n<p>Key things you can do include:</p>\n<ul>\n<li><a href=\"#programmatically-enable-edit-mode\">Programmatically connect to Optimizely&#39;s web editor</a></li>\n<li><a href=\"#disable-gesture\">Disable gesture</a> (The gesture is disabled by default in your live app)</li>\n<li><a href=\"#disable-visual-editor\">Disable the visual editor</a></li>\n<li><a href=\"#register-live-variables\">Register live variables</a></li>\n<li><a href=\"#code-blocks\">Implement code blocks</a></li>\n<li><a href=\"#goal-tracking\">Custom Event and Revenue Tracking</a></li>\n<li><a href=\"#analytics-integrations\">Implement custom and default analytics integrations</a></li>\n</ul>\n<h2 id=\"connecting-to-optimizely-s-editor\">Connecting to Optimizely&#39;s Editor</h2>\n<p>It is highly recommended to use Optimizely&#39;s &#39;O&#39; gesture to connect your app to Optimizely&#39;s editor.  However, there are other options should you choose not to implement Optimizely&#39;s URL scheme.</p>\n<h3 id=\"programmatically-enable-edit-mode\">Programmatically Enable Edit Mode</h3>\n<p>Typically Optimizely&#39;s &#39;O&#39; gesture will put your app into Edit Mode, which will then allow you to connect with Optimizely&#39;s editor.  However, if you choose not to implement the URL scheme in your app or are unable to put the app into &#39;Edit Mode&#39;, prior to <code>startOptimizelyWithAPIToken</code>, you can call <a href=\"/android/help/reference/com/optimizely/Optimizely.html#enableEditor%28%29\">enableEditor</a> in the development version of your app so that you can make changes.</p>\n<pre><code class=\"lang-java\">Optimizely.enableEditor();\nOptimizely.startOptimizelyWithAPIToken(getOptimizelyToken(), getApplication());\n</code></pre>\n<p> <strong>Note that you should always remove the enableEditor call prior to releasing your app to the App store.</strong></p>\n<h3 id=\"disable-gesture\">Disable Gesture</h3>\n<p>By default, Optimizely&#39;s Android SDK disables the gesture if the app is live in the Play store.  However, if you would like to ensure that your end users are not able to put the app into edit mode (e.g. if you have an enterprise app that you release to internal employees), you can call the <a href=\"/android/help/reference/com/optimizely/Optimizely.html#setEditGestureEnabled%28boolean%29\">setEditGestureEnabled</a> method prior to <code>startOptimizelyWithAPIToken</code>.</p>\n<p>An example of how to implement this method can be found below:</p>\n<pre><code class=\"lang-java\">Optimizely.setEditGestureEnabled(false);\nOptimizely.startOptimizelyWithAPIToken(getOptimizelyToken(), getApplication());\n</code></pre>\n<h2 id=\"visual-editor-configuration\">Visual Editor Configuration</h2>\n<p>The Optimizely Visual Editor allows you to modify existing views in your app. The first time you connect your app to Optimizely&#39;s Visual Editor, you can see which views are automatically detected by Optimizely.  Optimizely is able to detect and allows you to modify these views by:</p>\n<ul>\n<li>Dynamically tagging all views with an Optimizely ID</li>\n<li>Optimizely uses swizzling to enable view changes</li>\n</ul>\n<h3 id=\"tag-your-views\">Tag Your Views</h3>\n<p>There are some cases where Optimizely will not be able to detect your views.  For those views, you should give them a unique <code>optimizelyId</code>.  An example of how to do this is below:</p>\n<pre><code class=\"lang-java\">TextView priceTextView = (TextView) rowView.findViewById(R.id.textViewPrice);\nOptimizely.setOptimizelyId(&quot;price_text_label&quot;, priceTextView);\n</code></pre>\n<h3 id=\"disable-visual-editor\">Disable Visual Editor</h3>\n<p>If you decide you want to exclusively use Live Variables and Code Blocks, you can set <a href=\"/android/help/reference/com/optimizely/Optimizely.html#setVisualExperimentsEnabled%28boolean%29\">setVisualExperimentsEnabled</a> to false.</p>\n<p><strong>Note: Disabling the Visual Editor will also disable the ability to track tap goals. If you disable the Visual Editor, you&#39;ll need to rely only on view goals and custom event goals to track conversions.</strong></p>\n<h2 id=\"register-live-variables\">Register Live Variables</h2>\n<p>Live Variables allow you to designate variables in your app that can be assigned values in the Optimizely editor.  These values can be modified by Optimizely&#39;s editor even after you have released your app to the app store.  For example, you might want to create an experiment that tests various values for gravity. Live Variables can be accessed anywhere in your application. These values can be used as feature flags, to modify the behavior of your app, or as a convenient way to update your app with new styling.</p>\n<pre><code class=\"lang-java\">public class MyActivity extends Activity {\n  private static LiveVariable&lt;Float&gt; gravityVariable = Optimizely.floatForKey(&quot;Gravity&quot;, 9.8f /* default value */);\n  private static LiveVariable&lt;Boolean&gt; enableGravityVariable = Optimizely.booleanForKey(&quot;EnableGravity&quot;, true /* default value */);\n\n  private float updateSpeed(float currentSpeed) {\n    if (enableGravityVariable.get()) {\n        return currentSpeed + gravityVariable.get();\n    } else {\n      return currentSpeed;\n    }\n  }\n}\n</code></pre>\n<p>Once a variable is defined, each variation can specify a different value for that variable.</p>\n<p>Optimizely defines different  <code>&lt;type&gt;Variable()</code> functions for all the basic Java types. See the <a href=\"/android/help/reference/com/optimizely/Optimizely.html\">Class Documentation</a> for more information.  In order to access the variable, call <code>Optimizely.&lt;type&gt;Variable</code> and provide the corresponding variable name. Variables are scoped at an application level, thus repeated calls to <code>Optimizely.&lt;type&gt;Variable</code> will return the same value throughout your application.</p>\n<pre><code class=\"lang-java\">import com.optimizely.Optimizely;\n\npublic class GameUtils {\n  private static World makeNewWorld() {\n      double gravity = Optimizely.floatVariable(&quot;Gravity&quot;, 9.8).get();\n\n      // Use gravity here...\n  }\n}\n</code></pre>\n<p>You&#39;re now ready to edit your Live Variables using the Optimizely web editor:</p>\n<ol>\n<li>Make sure you have not called <code>Optimizely.setEditGestureEnabled(false)</code>.</li>\n<li>Load your application and draw a large circle to connect in edit mode.</li>\n<li>Navigate to the variables section of the editor.\n<img src=\"/assets/img/android/editor-variables-add-button.png\" alt=\"Drawing\" style=\"width: 50%;\"/></li>\n<li>Click the &quot;Add Variable&quot; button to open a dialog where you can select variables to add to your experiment.</li>\n<li>Once you have added a variable to the experiment, you can select a value for each variation in the variables section of the editor.</li>\n<li>While in edit mode, changes to the variable will be applied on subsequent reads, thereby allowing you to quickly test your variable logic.  However, we recommend that you verify your variable tests in <a href=\"/android/getting-started/index.html#preview-mode\">preview mode</a> prior to going live with the experiment.</li>\n<li>Once you&#39;ve connected your app to the editor, you can later edit live variables without connecting a device. However, if you make any changes to your app, make sure to connect it again to allow your changes to sync with the editor.</li>\n</ol>\n<h3 id=\"register-variable-callback\">Register Variable Callback</h3>\n<p>By default, in Edit Mode, Optimizely&#39;s editor will apply variable value changes once the screen the variable is defined on is reloaded.  However, there may be times where you want the changed value of the variable to be reflected in your app without the screen being refreshed while you&#39;re making experiment changes.  To do so, you can use the overloaded <code>Optimizely.&lt;type&gt;Variable</code> methods like <code>&quot;stringVariable(String variableKey, String defaultValue, Callback callback)&quot;</code>.</p>\n<p>An example implementation of this can be found below:</p>\n<pre><code class=\"lang-java\">Optimizely.stringVariable(&quot;variableKey&quot;, &quot;defaultValue&quot;, new LiveVariable.Callback&lt;String&gt;() {\n  @Override\n  public void execute(String variableKey, @Nullable String value) {\n    Log.i(&quot;log-tag&quot;, String.format(&quot;The value of Optimizely&#39;s Live Variable: %s is now %s&quot;,\n              variableKey, value));\n    actionButton.setText(value);\n  }\n});\n</code></pre>\n<h2 id=\"code-blocks\">Code Blocks</h2>\n<p>Code Blocks allow developers to create variations that execute different code paths. Code Blocks are declared as static variables and then can be accessed anywhere in your application. For example, one use case might be to test various checkout flows.</p>\n<p><strong>Note: The syntax for Code Blocks was changed in version 1.0+</strong></p>\n<p>First, define your CodeBlock as a static variable, then, add handlers for each of the possible branches in your code:</p>\n<pre><code class=\"lang-java\">private static OptimizelyCodeBlock checkoutFlow = Optimizely.codeBlock(&quot;CheckoutFlow&quot;)\n        .withBranchNames(&quot;shortCheckout&quot;, &quot;longCheckout&quot;);\n</code></pre>\n<p>The above Code Block will have 3 branches: the &quot;default&quot; branch, and a branch named &quot;shortCheckout&quot; and a branch named &quot;longCheckout&quot;.</p>\n<p>This is what the implementation of that Code Block looks like. Be sure to implement your Code Block branches in the same order as you declare them when initializing the Code Block.</p>\n<pre><code class=\"lang-java\">public class CommerceActivity extends Activity {\n  private static OptimizelyCodeBlock checkoutFlow = Optimizely.codeBlock(&quot;CheckoutFlow&quot;).withBranchNames(&quot;shortCheckout&quot;, &quot;longCheckout&quot;);\n\n  private void checkout() {\n    // This line defines Code Blocks &quot;shortCheckout&quot;, &quot;longCheckout&quot;, and a\n    // default block that is executed in the case that the experiment is\n    // not activated.\n    checkoutFlow.execute(new DefaultCodeBranch() {\n            @Override\n            public void execute() {\n                // This block is executed by default\n                goToDefaultCheckout();\n            }\n        }, new CodeBranch() {\n            @Override\n            public void execute() {\n                // This block is executed when myCheckoutTest -&gt; shortCheckout\n                goToShortCheckout();\n            }\n        }, new CodeBranch() {\n            @Override\n            public void execute() {\n                // This block is executed when myCheckoutTest -&gt; longCheckout\n                goToLongCheckout();\n            }\n        });\n  }\n}\n</code></pre>\n<p>You&#39;re now ready to implement your experiment using the Optimizely web editor:</p>\n<ol>\n<li>Make sure you have not called <code>Optimizely.setEditGestureEnabled(false)</code>.</li>\n<li>Load your application and draw a large circle to connect in edit mode.</li>\n<li>Navigate to the Code Blocks section of the editor.\n<img src=\"/assets/img/android/editor-codeblocks-add-button.png\" alt=\"Drawing\"></li>\n<li>Click the &quot;Add Code Block&quot; button to open a dialog where you can select Code Blocks to add to your experiment.</li>\n<li>Once you have added a Code Block to the experiment, you can select a value for each variation in the Code Blocks section of the editor.</li>\n<li>While in edit mode, changes to the active block will be applied on subsequent executions, thereby allowing you to quickly test your Code Block&#39;s logic.  However, we recommend that you verify your Code Blocks in <a href=\"/android/getting-started/index.html#preview-mode\">preview mode</a> prior to going live with the experiment.</li>\n<li>Once you&#39;ve connected your app to the editor, you can later edit code blocks without connecting a device. However, if you make any changes to your app, make sure to connect it again to allow your changes to sync with the editor.</li>\n</ol>\n<p>For more details, please see the <a href=\"/android/help/reference/com/optimizely/CodeBlocks/OptimizelyCodeBlock.html\">Code Blocks API Reference</a></p>\n<h3 id=\"register-code-block-callback\">Register Code Block Callback</h3>\n<p>By default, in Edit Mode, Optimizely&#39;s editor will apply code block branch changes once the code block is executed again.  However, there may be times where you want the new code block branch to be executed in your app without the screen being refreshed while you&#39;re making experiment changes. To do so, you can use the <code>Optimizely.CodeBlock</code> method <code>setCallback(new OptimizelyCodeBlock.Callback(){...})</code></p>\n<p>An example implementation of this can be found below:</p>\n<pre><code class=\"lang-java\">OptimizelyCodeBlock myCodeBlock = Optimizely.codeBlock(&quot;myCodeBlock&quot;).setCallback(new OptimizelyCodeBlock.Callback() {\n        @Override\n        public void onBranchChange() {\n            // Calling renderViews will allow us to execute the code that wraps our code block\n            renderViews();\n        }\n    }).withBranchNames(&quot;branch1&quot;, &quot;branch2&quot;);\n</code></pre>\n<h3 id=\"phased-rollouts\">Phased Rollouts</h3>\n<p>A common use case for Code Blocks are phased rollouts.  Phased rollouts allow you to release a feature to a subset of users, which will help you mitigate the risk of crashes and help you understand how users will react to your new feature prior to rolling out a new feature to all users.  To learn more about to implement a phased rollout using Optimizely, you can refer to the article in Optiverse <a href=\"https://help.optimizely.com/hc/en-us/articles/206101447-Phased-rollouts-for-your-iOS-or-Android-App\">here</a>.</p>\n<h2 id=\"custom-targeting\">Custom Targeting</h2>\n<h3 id=\"attributes\">Attributes</h3>\n<p>Use attributes to segment your experiment results for more insight. This allows you to drill down into experiment results and discover how certain segments of users are behaving differently. This will allow you to create future experiments targeted to them.</p>\n<p>To set the value for an Attribute use one of these four methods.</p>\n<pre><code class=\"lang-java\">boolean success = Optimizely.setValueForAttributeId(String, String);\nboolean success = Optimizely.setValueForAttributeApiName(String, String);\nboolean success = Optimizely.setValueForAttributeId(String, String, Context);\nboolean success = Optimizely.setValueForAttributeApiName(String, String Context);\n</code></pre>\n<p>Both methods will return a boolean that determines whether the value was successfully set for the Attribute. If the string you passed in for the Attribute Id or the Attribute API Name do not match an Attribute in your project, it will return false. If Optimizely was able to locate the Attribute and set the value, it will return true. If you are using these methods before starting Optimizely, you MUST pass in the current Context. When the latter 2 methods are called before starting Optimziely they will always return true even if the Attribute Id or Attribute API Name do not match an existing Attribute. If you use both <code>setValueForAttributeId(String, String, Context)</code> and <code>setValueForAttributeApiName(String, String, Context)</code> before starting Optimizely for the same attribute, <code>setValueForAttributeId(String, String, Context)</code> will override <code>setValueForAttributeApiName(String, String, Context)</code> when the Attribute is initialized.</p>\n<p>To get the current value of an Attribute use one of these two methods.</p>\n<pre><code class=\"lang-java\">String value = Optimizely.getValueForAttributeId(String);\nString value = Optimizely.getValueForAttributeApiName(String);\nString value = Optimziely.getValueForAttributeId(String, Context);\nString value = Optimizely.getValueForAttributeApiName(String, Context);\n</code></pre>\n<p>Both methods will return an <code>String</code> object whose value is the current value for the associated Attribute. If the Attribute does not exist, it will return <code>null</code>. If you use these methods before starting Optimizely, you MUST passin the current Context. When called before starting Optimizely, they will return the last value you provided through the corresponding <code>setValueForAttributeId(String, String, Context):</code> or <code>setValueForAttributeApiName(String, String, Context)</code> call. But <code>getValueForAttributeId(String, Context)</code> will not be able to return the value for an Attribute whose value you have attempted to set through <code>setValueForAttributeApiName(String, String, Context)</code>. Likewise, <code>getValueForAttributeApiName(String, Context)</code> will not be able to return the value for an Attribute whose value you have attempted to set through <code>setValueForAttributeId(String, String, Context)</code>.</p>\n<p>To get an Array of all the current Attributes, use</p>\n<pre><code class=\"lang-obj-c\">ArrayList&lt;OptimizelyAttribute&gt; *attributes = Optimizely.getAttributes();\n</code></pre>\n<p>This method returns a copy of all attributes that are defined in the data file. If this is called before Optimizely starts, it will return an empty array. If there are no attributes, it will return an empty array. Each attribute will be an index in the ArrayList represented by an instance of the <code>OptimizelyAttribute</code> class.</p>\n<h3 id=\"custom-tags\">Custom Tags</h3>\n<p>Custom Tags allow you to target users based on variables and attributes before Optimizely starts. You will be able to run your experiment and target visitors based on those custom attributes, effectively <strong>only</strong> bucketing those who meet your targeting conditions.\nTo create an experiment targeting a Custom Tag, open the Optimizely editor, click on &quot;Options&quot;, followed by &quot;Targeting&quot; and selecting &quot;Custom Tag&quot; within the Optimizely editor.</p>\n<p>For example, to create the Custom Tag <code>&quot;returning_customer&quot;</code> with a value of <code>&quot;true&quot;</code>:</p>\n<pre><code class=\"lang-java\">@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    // more create logic\n    Optimizely.setCustomTag(&quot;returning_customer&quot;, &quot;true&quot;);\n    Optimizely.startOptimizelyWithAPIToken(&quot;&lt;API Token&gt;&quot;, getApplication());\n}\n</code></pre>\n<p>Make sure to call <code>setCustomTag</code> prior to <code>startOptimizelyWithAPIToken</code> and any time custom tag values are expected to change.  To do that you can make the <code>setValue:forCustomTag:</code> call in the following ways:</p>\n<ul>\n<li>Prior to <code>startOptimizelyWithAPIToken</code> so that Optimizely knows all of the targeting conditions prior to experiment activation</li>\n<li><code>setCustomTag</code> can also be called in conjunction with <code>refreshExperiments</code> while the app is still running.  For more details on how this works, you can refer to the section below.</li>\n</ul>\n<p>Please refer to our <a href=\"/android/help/reference/com/optimizely/Optimizely.html#setCustomTag(java.lang.String, java.lang.String\">API Docs</a> for more details.</p>\n<h3 id=\"experiment-reload\">Experiment Reload</h3>\n<p><a href=\"/android/help/reference/com/optimizely/Optimizely.html#refreshExperiments%28%29\">refreshExperiments</a> should be called any time custom tag values are expected to change.  <a href=\"/android/help/reference/com/optimizely/Optimizely.html#refreshExperiments%28%29\">refreshExperiments</a> allows Optimizely to take into account a user&#39;s newly added or changed custom tag values and re-buckets users based on updated targeting.</p>\n<p>For example, here&#39;s a use case where the user logs in, the developer sets a logged in custom tag, and then calls <a href=\"/android/help/reference/com/optimizely/Optimizely.html#refreshExperiments%28%29\">refreshExperiments</a>:</p>\n<pre><code class=\"lang-java\">  private void userDidLogIn(String username) {\n    Optimizely.setCustomTag(&quot;returning_customer&quot;, &quot;true&quot;);\n    Optimizely.refreshExperiments();\n  }\n</code></pre>\n<p><em>Note: <a href=\"#manual-activation\">Manually activated</a> experiments will need to be re-activated after refreshExperments for the new audience conditions to take effect.</em></p>\n<h3 id=\"universal-user-id-beta-\">Universal User ID (Beta)</h3>\n<p>Set a unique (logged-in) identifier to be used by Optimizely for bucketing and tracking. Once set, Optimizely will bucket visitors in all new and future experiments so that visitors will see the same variation across devices (e.g. Android phone to tablet). Note that bucketing only happens upon app foregrounding or cold start. We will store this identifier in local storage and continue to use it until a new one is set.</p>\n<p>Optimizely will also track unique visitors in experiment results using this ID; we will count an anonymous ID and a Universal ID as two distinct visitors, and prefer the Universal ID when counting experiment traffic and goals. UUID will not rebucket users who have seen a certain experiment already. <em>Regardless, make sure to target your experiments to &quot;Has Universal User ID&quot; to ensure consistent counting and bucketing across devices.</em></p>\n<pre><code class=\"lang-java\">Optimizely.setUserId(&quot;userid&quot;);\n</code></pre>\n<p>Always set UUID before your experiment gets activated. For automatic experiments, this means setting UUID before you call start Optimizely. For manual experiments, this means setting UUID before you call activateManualExperiment.</p>\n<p><em>This is a beta feature, and is subject to change.</em> To learn more, visit our <a href=\"https://help.optimizely.com/hc/en-us/articles/203626830\">Help Center</a>, or consult our <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/userId\">API reference</a>. For support, please visit <a href=\"http://www.optiverse.com/\">Optiverse</a> or contact your Customer Success Manager.</p>\n<div class=\"attention attention--warning push--bottom\">Note: By using this API call, you agree not to pass personally identifiable (PII) information to Optimizely in accordance with our <a href=\"http://optimizely.com/terms\">Terms of Service</a> or your Master Service Agreement. If your login identifier is personally identifiable (such as an email address) you must hash it first before sending to Optimizely.</div>\n\n<h2 id=\"goal-tracking\">Goal Tracking</h2>\n<h3 id=\"track-event\">Track Event</h3>\n<p>Custom goals allow you to track events other than taps and view changes. There are two steps to creating a custom goal. The first step occurs in the web editor. Click &quot;Goals&quot;, then &quot;Create a New Goal&quot;, and select &quot;Custom Goal&quot; from the drop-down. You will be prompted for a string to uniquely identify your custom goal. In order to track this goal, send this same string as a parameter to</p>\n<pre><code class=\"lang-java\">Optimizely.trackEvent(&quot;GoalID&quot;);\n</code></pre>\n<p>For example, if we wanted a goal for users deleting a task with a swipe, we might create a custom goal &quot;User Deleted Task&quot; and then call <code>trackEvent</code> with this string in our event handler as follows:</p>\n<pre><code class=\"lang-java\">private void userDidSwipeTask() {\n    Optimizely.trackEvent(&quot;UserDeletedTask&quot;);\n    //The rest of your handler\n}\n</code></pre>\n<p>As of SDK version 1.1, if you aren&#39;t sure of the exact spelling of your custom goal string, you can trigger custom events in your simulator or connected device, and the strings will appear in the dialog in the order they were triggered.</p>\n<p>For more details and to learn about tap and view goals, refer to the following <a href=\"https://help.optimizely.com/Track_Conversion_Goals/Mobile_Goals%3A_Measure_the_success_of_your_experiment\">guide</a> from our Knowledge Base.</p>\n<h3 id=\"revenue-tracking\">Revenue Tracking</h3>\n<p>The Revenue goal allows you to track purchases made by your users. There are two steps to adding the revenue goal to your experiment. The first step occurs in the web editor. Click &quot;Goals&quot;, then &quot;Add a Saved Goal&quot;, hover over the &quot;Total Revenue&quot; goal, and click the &quot;Add&quot; button. In order to track this goal, use the revenue API by passing an integer number of cents:</p>\n<pre><code class=\"lang-java\">private void userCompletedPurchase() {\n    Optimizely.trackRevenue(price * 100));\n    //The rest of your handler\n}\n</code></pre>\n<h2 id=\"analytics-integrations\">Analytics Integrations</h2>\n<p>Optimizely offers a number of configurable 3rd party analytics integrations in order to easily tag your analytics data with Optimizely experiments. Each integration is available as a separate package.</p>\n<p>Currently, we support the following frameworks in our Android SDK.  Detailed integration instructions can be found if you follow the respective link:</p>\n<ul>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/204963198\">Amplitude</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/209645787\">Localytics</a></li>\n<li><a href=\"#mixpanel\">Mixpanel</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/204628347\">Universal Analytics</a></li>\n</ul>\n<p>For basic configuration instructions, you can scroll down to the 3rd party analytics tool to find code that needs to be added to the app.  For all integrations, Optimizely should be initialized <em>after</em> your third party analytics tool is initialized in your code.  Once you have followed the configuration instructions below, you can enable the integration through your Optimizely Project Dashboard.</p>\n<p><img src=\"/assets/img/android/Localytics_Integration.png\" alt=\"Drawing\" style=\"width: 50%;\"/></p>\n<h3 id=\"amplitude\">Amplitude</h3>\n<p>Gradle dependency:</p>\n<pre><code class=\"lang-groovy\">dependencies {\n    compile(&#39;com.optimizely:amplitudeintegration:+@aar&#39;)\n}\n</code></pre>\n<h3 id=\"localytics\">Localytics</h3>\n<p>Gradle dependency:</p>\n<pre><code class=\"lang-groovy\">dependencies {\n    compile(‘com.optimizely.localyticsintegration:+@aar’)\n}\n</code></pre>\n<h3 id=\"mixpanel\">Mixpanel</h3>\n<p>Gradle dependency:</p>\n<pre><code class=\"lang-groovy\">dependencies {\n    compile(&#39;com.optimizely:mixpanelintegration:+@aar&#39;)\n}\n</code></pre>\n<p>Installation:</p>\n<pre><code class=\"lang-java\">MixpanelAPI mixpanelAPI = MixpanelAPI.getInstance(this, &quot;API_TOKEN&quot;);\nOptimizely.startOptimizelyWithAPIToken(&quot;&lt;API Token&gt;&quot;, getApplication());\n</code></pre>\n<h3 id=\"universal-analytics-google-analytics-\">Universal Analytics (Google Analytics)</h3>\n<p>Gradle dependency:</p>\n<pre><code class=\"lang-groovy\">dependencies {\n    compile(&#39;com.optimizely:universalanalyticsintegration:+@aar&#39;)\n}\n</code></pre>\n<p>Installation:</p>\n<pre><code class=\"lang-java\">Tracker tracker = GoogleAnalytics.getInstance(this).newTracker(&quot;TRACKER_ID&quot;);\nOptimizelyUniversalAnalyticsIntegration.setTracker(tracker);\n</code></pre>\n<h3 id=\"custom-integration\">Custom Integration</h3>\n<p>You can also build your own analytics integrations by accessing the experiments and variations active for a given user directly using the <code>Optimizely.getVisitedExperiments()</code> and pass that data to internal or other analytics frameworks.  For more details about this property, you can refer to the <a href=\"/android/help/reference/com/optimizely/Optimizely.html#getVisitedExperiments(\">API documentation</a>).</p>\n<p>When building your own analytics integration, the recommended time to access the <code>Optimizely.getVisitedExperiments()</code> data and send that to the analytics framework is in the method <code>onOptimizelyExperimentViewed(OptimizelyExperimentData experimentState)</code> which can be found when you add the <a href=\"/android/reference/index.html#adding-an-event-listener\">OptimizelyEventListener</a> to Optimizely.</p>\n<h2 id=\"network-settings\">Network Settings</h2>\n<p>There are only two instances when the Optimizely Android SDK uses a network connection: when downloading the config file (which contains all experiment configuration information) and when returning event tracking data.  By default, the config file is automatically downloaded every 2 minutes. Event tracking data is automatically uploaded whenever the user leaves a screen of your application (on every <code>Activity.onPause</code>). The Optimizely Android SDK allows you to customize how often these network calls are made by:</p>\n<ol>\n<li>Customizing the 2 minute interval</li>\n<li>By turning off automatic sending of events and allowing you to sending events manually.</li>\n</ol>\n<p>The first option is to customize the interval for how often you want network calls to be made. To adjust the interval in seconds, you can call <code>Optimizely.setDataFileDownloadInterval(long)</code>. Setting the download interval to 0 or a negative value will completely disable downloading of the data file (Not recommended).\nFor example, to set the data file download to 5 minutes (300,000ms):\n<code>Optimizely.setDataFileDownloadInterval(5 * 60 * 1000);</code></p>\n<p>The second option is to turn off the automatic event sends and manually make network calls. Calling <code>Optimizely.setAutomaticEventSending(false);</code> will disable the automatic sending of events. You will need to send events manually using <code>Optimizely.sendEvents()</code> in order to collect experiment results.</p>\n<pre><code class=\"lang-java\">Optimizely.setAutomaticEventSending(false);\n</code></pre>\n<p>To manually send events, in the appropriate function (e.g. where you make other network calls or after a custom event goal is triggered):</p>\n<pre><code class=\"lang-java\">  private void userClickedImportantButton() {\n      Optimizely.trackEvent(&quot;ImportantButtonClicked&quot;);\n      Optimizely.sendEvents(); // Manually send the event logs back to the server\n  }\n</code></pre>\n<p>Please refer to the documentation for <a href=\"/android/help/reference/com/optimizely/Optimizely.html#trackEvent%28String%29\">trackEvent</a>, and <a href=\"/android/help/reference/com/optimizely/Optimizely.html#sendEvents%28%29\">sendEvents</a>for more details.</p>\n<h2 id=\"manual-activation\">Manual Activation</h2>\n<h3 id=\"experiment-activation-modes\">Experiment Activation Modes</h3>\n<p>There are two different types of activation modes for Optimizely Mobile experiments.</p>\n<h4 id=\"automatic-default-\">Automatic (Default)</h4>\n<p>By default, Optimizely buckets users and activates the experiment as soon as the app starts and the startOptimizely method is called (either synchronously or asynchronously). Experiments are marked as visited when the end user reaches an element that has been modified in the experiment.</p>\n<h4 id=\"manual\">Manual</h4>\n<p>In manual activation mode, developers can specify, via an in-app API call, at which point they want to activate a given experiment. Manual activation allows you to separate the experiment start (which buckets the users and activates the experiment) from startOptimizely, which loads the datafile and any remote assets, such as images. Manual activation is only available for SDK versions 1.3.0 and above.</p>\n<p><em>Please note that visitors still must meet Audience targeting conditions for a manually activated experiment to be eligible for that experiment.</em> Manual activation does not bypass Audience conditions.</p>\n<p>Toggle between manual and automatic activation mode from the Options &gt; Activation Mode menu in the Editor:</p>\n<p><img src=\"/assets/img/android/activation_mode.png\" alt=\"Drawing\" style=\"width: 50%;\"/></p>\n<h3 id=\"use-cases\">Use Cases</h3>\n<h4 id=\"use-case-1-set-additional-metadata-for-your-audiences-before-evaluating-targeting-conditions-for-an-unactivated-experiment-\">Use Case #1: Set additional metadata for your audiences before evaluating targeting conditions for an unactivated experiment.</h4>\n<p>Bucketing only occurs for your audiences when activateExperiment is called and NOT when startOptimizely is called, and thus any custom tags you set before the experiment starts will be considered for targeting.\nFor example, you can mark a user as a “VIP” at one point during a session, then use this tag for an experiment later in the same session.\nWith automatic activation mode, you can only target using tags set before the app was started (and thus set in a previous session).</p>\n<h4 id=\"use-case-2-bucket-only-a-subset-of-users-who-access-less-frequently-used-areas-of-your-app-\">Use Case #2: Bucket only a subset of users who access less frequently used areas of your app.</h4>\n<p>Bucketing users when the app loads, which is done in automatic mode, may not be the best choice for experiments involving an experience that not all users visit.\nFor example, if you want to test a feature deep in your user experience that only 10% of users visit, you wouldn’t necessarily want to bucket all users when you launch your app (as is done with automatic mode), because this could lead to skewed sampling.\nIf you manually activate your experiment only when users reach that experience, you can bucket users at the point where they visit that feature, and run tests on only those users.</p>\n<h4 id=\"use-case-3-quick-load-assets-for-consistency-\">Use Case #3: Quick-load assets for consistency.</h4>\n<p>Remote assets distributed by the Optimizely CDN, such as images you upload to our editor, start loading asynchronously when the app starts. As a result, if any assets fail to load before an experiment is viewed due to slow internet speeds, the user is not showed the variation and is instead shown the control even though that user has been bucketed.\nThe variation will be shown to the user the next time he or she opens the app, assuming the assets have loaded before he or she views the experiment, leading to an inconsistent user experience and possibly even skewed results.\nIn manual activation mode, you can activate experiments right when you want to show them, giving the user’s device more time to load assets associated with that experiment.</p>\n<h3 id=\"manual-activation-example\">Manual Activation Example</h3>\n<pre><code class=\"lang-java\">// Calling start Optimizely will not activate any manual experiments.\n// Instead you have to activate them manually for users to see your experiment\nOptimizely.startOptimizelyWithAPIToken(myOptimizelyAPIKey, getApplication());\n\n...\n\n// You specify when you want to activate each manual experiment.\n// For use case #1 above, this can be useful if you want to wait until you\n// have additional data for a user and then store that data as custom tags.\n// For example, we now know that the user is a VIP user so we set a tag for that\nOptimizely.setCustomTag(&quot;accountType&quot;, &quot;VIP&quot;);\n\n// Activate a manual experiment that takes the custom tag we just set into account\nboolean success = Optimizely.activateManualExperiment(myExperimentId);\n</code></pre>\n<h2 id=\"debugging-your-experiments\">Debugging Your Experiments</h2>\n<h3 id=\"adding-an-event-listener\">Adding an Event Listener</h3>\n<p>Clients can get notifications when various Optimizely events occur in the Optimizely SDK life cycle like start of the SDK or an experiment visited. To do that, client needs to register a callback with Optimizely and override methods which they are interested in.</p>\n<pre><code class=\"lang-java\">  Optimizely.addOptimizelyEventListener(new OptimizelyEventListener() {\n\n    public void onOptimizelyStarted() {\n      Log.i(tag, &quot;Optimizely started.&quot;);\n    }\n\n    public void onOptimizelyFailedToStart(String errorMessage) {\n      Log.i(tag, format(&quot;Optimizely failed to start with message {%s}&quot;, errorMessage));\n    }\n\n    public void onOptimizelyExperimentViewed(OptimizelyExperimentData experimentState) {\n      Log.i(tag, format(&quot;Optimizely experiment {%s} viewed.&quot;, experimentState));\n    }\n\n    public void onOptimizelyEditorEnabled() {\n      Log.i(tag, &quot;Optimizely is ready to connect to the editor.&quot;);\n    }\n\n    public void onOptimizelyDataFileLoaded() {\n      Log.i(tag, &quot;Optimizely experiment data file loaded.&quot;);\n    }\n\n    public void onGoalTriggered(String description,\n                                List&lt;OptimizelyExperimentData&gt; affectedExperiments) {\n      Log.i(tag, format(&quot;Optimizely goal {%s} part of experiments {%s} achieved.&quot;,\n                          description, affectedExperiments));\n    }\n\n    public void onMessage(String source, String messageType, Bundle payload) {\n      Log.i(tag, format(&quot;Optimizely received message %s from %s {%s; %s} .&quot;,\n                          messageType, source, payload));\n    }\n  });\n</code></pre>\n<h3 id=\"experiment-data-object\">Experiment Data Object</h3>\n<p>Optimizely&#39;s Experiment Object will provide information about what part of the experiment life cycle a user is part of.  There are two main functions: <code>getAllExperiments</code> and <code>getVisitedExperiments</code>.  <code>getAllExperiments</code> contains all running, paused, and draft experiments in your Optimizely project.  <code>getVisitedExperiments</code> contains all experiments in your Optimizely project that a user has actually visited. You can also query for the <code>OptimizelyExperimentData</code> associated to a given experimentId by using <code>getExperimentDataById</code>.</p>\n<p>Each experiment is represented as an <code>OptimizelyExperimentData</code> object. For more info on the properties contained there, see the class reference for <a href=\"/android/help/reference/com/optimizely/integration/OptimizelyExperimentData.html\">OptimizelyExperimentData</a>.</p>\n<pre><code class=\"lang-java\">// This will get all your experiments\nMap&lt;String, OptimizelyExperimentData&gt; allExperiments = Optimizely.getAllExperiments();\n\n// This will get all your visited experiments\nMap&lt;String, OptimizelyExperimentData&gt; visitedExperiments = Optimizely.getVisitedExperiments();\n\n// This will get the experiment with the corresponding experimentId\nOptimizelyExperimentData data = Optimizely.getExperimentDataById(&quot;EXPERIMENT_ID&quot;);\n</code></pre>\n<h3 id=\"audience-information\">Audience Information</h3>\n<p>There are a couple utility functions that you can use to help aid in debugging audiences. <code>getAudiences</code> will return a JSONArray of all the audiences associated with your project. Each audience is represented as an JSONObject and you&#39;ll be able extract additional metadata through the following keys: <code>audience_id</code>, <code>conditions</code>, and <code>name</code>. From there you can check whether or not the user currently satisfy a given audience by calling <code>isUserInAudience</code> with a specific audienceId. Keep in mind that both of these methods need to be called after Optimizely is started.</p>\n<p>Here&#39;s an example below:</p>\n<pre><code class=\"lang-java\">// Make sure to call the helper functions after starting Optimizely\nOptimizely.startOptimizelyWithAPIToken(myOptimizelyAPIKey, getApplication());\n\n// Gets an array that holds all your project audiences\nJSONArray audiences = Optimizely.getAudiences();\n\nfor(int i = 0; i &lt; audiences.length(); i++) {\n    JSONObject audience = audiences.getJSONObject(i);\n    // You can access the metadata associated with each audience\n    // Here we&#39;re just getting each audience&#39;s audienceId\n    String audienceId = audience.getString(&quot;audience_id&quot;);\n\n    // We can then check to see if the user currently satisfies those\n    // audience conditions\n    boolean included = Optimizely.isUserInAudience(audienceId);\n    Log.d(&quot;tag&quot;, &quot;The user &quot; + (included ? &quot;is&quot; : &quot;isn&#39;t&quot;) + &quot; included in this audience:&quot; + audienceId);\n}\n</code></pre>\n<h3 id=\"forcing-a-variation\">Forcing a Variation</h3>\n<p>Sometimes you&#39;ll want to try out your experiment before it goes live and outside of preview mode. You may spend a lot of time re-bucketing yourself in order to get into all the experiment combinations. Now you can opt to force an experiment into a given variation with <code>forceVariation</code>. <em>You must force the variation before calling start Optimizely.</em></p>\n<p>When you force a variation for a given experiment, we&#39;ll reset the app&#39;s userId and try to force that experiment/variation if they are both valid. This should be called before startOptimizely is called and keep in mind that you should only use this for testing your experiments. You should NOT ship this to your customers.</p>\n<p>Here&#39;s an example below:</p>\n<pre><code class=\"lang-java\">// Force the variation and experiment specified by those two ids\nOptimizely.forceVariation(myVariationId, myExperimentId);\n\n// Make sure to call it before start Optimizely is called\nOptimizely.startOptimizelyWithAPIToken(myOptimizelyAPIKey, getApplication());\n</code></pre>\n<p>To find a variation&#39;s ID, head to the experiment editor and click on the &quot;Variation Settings&quot; button on the black bar on the far left-hand side of the window.</p>\n<p><strong>Note your experiment must not be paused for forceVariation to take effect.</strong></p>\n<h3 id=\"programmatically-enable-preview-mode\">Programmatically Enable Preview Mode</h3>\n<p>While preview mode can be enabled from the dashboard it can also be enabled from code.  This allows you to preview variations across all of your experiments without needing to connect to the editor.  Preview mode has UI that allows you easily switch variations and view event logs.</p>\n<pre><code class=\"lang-java\">Optimizely.enablePreview();\nOptimizely.startOptimizelyWithAPIToken(getOptimizelyToken(), getApplication());\n</code></pre>\n<h3 id=\"resetting-qa-state\">Resetting QA State</h3>\n<p>Uninstalling the app everytime to QA your builds with Optimizely can be quite tedious. Now you can use <code>resetUserBucketing</code> to clear any variations that the current app user may have already been bucketed into. This will also remove the cached data file. This is useful if you want to insure that you&#39;re treated as a new user each time you start the app. Keep in mind that you must call <code>resetUserBucketing</code> before you start Optimizely.</p>\n<p>Here&#39;s an example below:</p>\n<pre><code class=\"lang-java\">// Reset user bucketing\nOptimizely.resetUserBucketing(context);\n\n// Make sure to call it before start Optimizely is called\nOptimizely.startOptimizelyWithAPIToken(myOptimizelyAPIKey, getApplication());\n</code></pre>\n<h3 id=\"verbose-logging\">Verbose Logging</h3>\n<p>Enabling verbose logging allows you to view detailed log output. This will provide more information about experiments and its goals, your Live Variables, Code Blocks, and more.</p>\n<pre><code class=\"lang-java\">// Enable verbose logging\nOptimizely.setVerboseLogging(true);\n\n// Make sure to call it before start Optimizely is called\nOptimizely.startOptimizelyWithAPIToken(myOptimizelyAPIKey, getApplication());\n</code></pre>\n<h2 id=\"upgrading-to-a-new-sdk\">Upgrading to a new SDK</h2>\n<ol>\n<li><p>If you are using Gradle, simply replace the dependency declaration in your <code>build.gradle</code> with a dependency on the new version.</p>\n<p>Here are some examples with Gradle:</p>\n<ul>\n<li><p>If you want to always stay up to date with our newest SDK version, allow Gradle to auto-update the Optimizely SDK:</p>\n<pre><code>compile(&#39;com.optimizely:optimizely:+@aar&#39;) {\n   transitive = true\n}\n</code></pre></li>\n<li><p>If you want to specify when you want to upgrade to monthly SDK feature releases (numbered v X.Y) and automatically upgrade to the newest incremental releases and hotfixes for that release (numbered v X.Y.Z), in this case all releases 1.3 and after and up to 1.5:</p>\n<pre><code>compile(&#39;com.optimizely:optimizely:1.3+@aar&#39;) {\n   transitive = true\n}\n</code></pre></li>\n<li><p>If you want to upgrade to a particular SDK version and stay at that version, in this case version 1.4.2:</p>\n<pre><code>compile(&#39;com.optimizely:optimizely:1.4.2@aar&#39;) {\n transitive = true\n}\n</code></pre></li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>Starting with SDK version 1.1, Optimizely&#39;s Android SDK uses a unique URL scheme handler to help you edit and test your experiments.</p>\n<p>If you are upgrading from an SDK version more outdated than 1.1 to version 1.1 or later, please add the following intent filter to the MainActivity entry of your AndroidManifest.xml</p>\n<pre><code class=\"lang-xml\">&lt;activity\n  android:name=&quot;.MainActivity&quot;&gt;\n  &lt;intent-filter&gt;\n    &lt;!-- Existing intent-filters --&gt;\n  &lt;/intent-filter&gt;\n  &lt;intent-filter&gt;\n    &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n    &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;\n    &lt;data android:scheme=&quot;optly[PROJECT_ID]&quot; /&gt;\n  &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre>\n<p><em>Note:\nThe scheme includes a unique identifier.  Be sure to replace [PROJECT_ID] with your project id.</em></p>\n</li>\n</ol>\n<p>If you are using manual integration, please repeat the <a href=\"/android/getting-started/index.html#manual-installation\">Manual Installation Steps</a> for your platform.</p>\n<h2 id=\"uninstalling-optimizely\">Uninstalling Optimizely</h2>\n<p>Simply remove the dependency on Optimizely from your <code>build.gradle</code>. If you installed manually, you need to delete Optimizely.jar from your app.</p>\n"}},"guide":{"index":{"template":"page-sidebar","title":"Optimizely Android SDK Tutorial","body":"<h1 id=\"optimizely-android-sdk-tutorial\">Optimizely Android SDK Tutorial</h1>\n<p>The following steps will allow you to try out Optimizely&#39;s SDK in our Tutorial App.  This guide is a walkthrough of all the key code that you can include in your app prior to releasing your app live to the Play Store.</p>\n<h2 id=\"download-the-tutorial-app\">Download the tutorial app</h2>\n<p>The tutorial app is included as a sub directory in the SDK directory.  It can be found in the <em><a href=\"https://github.com/optimizely/Optimizely-Android-SDK/tree/master/TutorialApp\" target=\"_blank\">TutorialApp</a></em> folder in the SDK.</p>\n<p><a href=\"http://github.com/optimizely/Optimizely-Android-SDK/zipball/master\">ZIP</a> | <a href=\"http://github.com/optimizely/Optimizely-Android-SDK/tarball/master\">TAR</a> | <a href=\"http://github.com/optimizely/Optimizely-Android-SDK\">GitHub</a></p>\n<h2 id=\"create-an-android-project\">1. Create an Android Project</h2>\n\n<p>To create an Android project, select &quot;Create New Project&quot; in the <a href=\"https://www.optimizely.com/dashboard\">Optimizely Dashboard</a>:</p>\n<p>   <img src=\"/assets/img/android/New_projectbutton.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p>   <img src=\"/assets/img/android/create-project.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p><a name=\"project-code\"></a>Once you&#39;ve created a project, please take a look at the <code>Settings</code> tab to find your project ID and API key which you will use during installation:</p>\n<p><img src=\"/assets/img/android/project-code.png\" alt=\"Project Code Dialog\"></p>\n<h2 id=\"add-your-api-token\">2. Add Your API token</h2>\n\n<p>Now, you&#39;re ready to add some code so your app can connect with your Optimizely account.</p>\n<p>Optimizely assigns each project a unique identifier known as an API token. Your app identifies itself to the Optimizely Android SDK by initializing the SDK with this token.</p>\n<p>Modify the Optimizely call in MainActivity.java in the <code>onCreate()</code> function. The code can be copied from your <code>Implementation Settings</code>, which you can find by selecting on the appropriate Android Project in your <a href=\"https://app.optimizely.com/projects\">Optimizely Home</a>.  For more details, you can refer back to <a href=\"#accountcreation\">Step 2: Create an Android project</a>.</p>\n<pre><code class=\"lang-java\">@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    ...\n\n    // [OPTIMIZELY] (REQUIRED) Replace this line with your API token, and don&#39;t forget to go to\n    // your AndroidManifest.xml (e.g. it should look like optly123456, replace 123456 with your project id)\n    // Replace &lt;YOUR_API_TOKEN&gt; with your API Token from your Optimizely Dashboard\n    // optimizely.com/dashboard.  It should look like: &quot;AAMseu0A6cJKXYL7RiH_TgxkvTRMOCvS~123456&quot;\n    Optimizely.startOptimizelyWithAPIToken(&lt;YOUR_API_TOKEN&gt;, getApplication(), mOptimizelyEventListener);\n}\n</code></pre>\n<p>In this example, you can see that the Optimizely event listener is included in this call.  By registering this callback with Optimizely and overriding methods you&#39;re interested in, you can get notifications when various Optimizely events occur.  To learn more, you can go <a href=\"../reference/index.html#optimizely-debug\">here</a>.</p>\n<p>This call will block until Optimizely is started. For a non-blocking call, use the following version which takes a callback listener as the third argument. If you are not interested in the callback, you can pass in <code>null</code>:</p>\n<pre><code class=\"lang-java\">\nprivate static void mOptimizelyEventListener = new DefaultOptimizelyEventListener() {\n    @Override onOptimizelyStarted() {}\n    @Override onOptimizelyFailedToStart(String message) {}\n};\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    // More startup code here\n    Optimizely.startOptimizelyAsync(&quot;&lt;API Token&gt;&quot;, getApplication(), mOptimizelyEventListener);\n}\n</code></pre>\n<p> Starting with version 1.1, Optimizely&#39;s Android SDK uses a unique URL scheme handler to help you edit and test your experiments.</p>\n<p>   Update the existing intent filter to the MainActivity entry of AndroidManifest.xml with your project id.</p>\n<p>   <em>Note:\n   The scheme includes a unique identifier.  Be sure to replace [PROJECT_ID] with your project id (e.g. optly123456).</em></p>\n<pre><code class=\"lang-xml\">   &lt;activity\n     android:name=&quot;com.optly.tutorialapp.MainActivity&quot;\n     android:label=&quot;@string/app_name&quot; &gt;\n     &lt;intent-filter&gt;\n       &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n       &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n       &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n     &lt;/intent-filter&gt;\n     &lt;intent-filter&gt;\n       &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n       &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n       &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;\n       &lt;data android:scheme=&quot;optly[PROJECT_ID]&quot; /&gt;\n     &lt;/intent-filter&gt;\n   &lt;/activity&gt;\n</code></pre>\n<p>At this point you should run your application to register the SDK installation. The Optimizely SDK will register itself in the background once you put the app into edit mode. You will see your project overview display light up, allowing you to create an experiment:</p>\n<p>   <img src=\"/assets/img/android/sdk-detected.png\", style=\"width: 70%\"/></p>\n<h2 id=\"create-an-experiment\">3. Create an Experiment</h2>\n\n<p>After creating an Android project and installing the SDK, click the <code>Create Experiment</code> button in the upper right hand side of your project overview.</p>\n<h4 id=\"custom-view-tagging\">Custom View Tagging</h4>\n<p>The Optimizely Android SDK identifies Views within your application using the view hierarchy of the view-- in some cases you may need to specify your own ID or mark a specific view in a collection view as unique.  You can see an example of how to do this in <em>VisualEditorActivity.java</em>.</p>\n<pre><code>Optimizely.setOptimizelyId(&quot;Widgets&quot;, takeToWidgets);\n</code></pre><p>See this section on <a href=\"#configure_visual_editor\">configuring the visual editor</a>.</p>\n<h2 id=\"modify-live-variables\">4. Modify Live Variables</h2>\n\n<p>Live variables have already been added to the sample app. You can refer to the <em>LiveVariablesAdapter.java</em> file.  There are 2 examples of live variables used in that file, which are shown below.  Save your experiment after you have made the change.</p>\n<p><img src=\"/assets/img/android/live_variable_number.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n<p>For more details about live variables, you can refer <a href=\"../reference/index.html#register-live-variables\">here</a>.</p>\n<h2 id=\"modify-code-blocks\">5. Modify Code Blocks</h2>\n\n<p>Code Blocks have already been added to the sample app. You can refer to the <em>CodeBlocksActivity.java</em> file.  There is 1 example of a code block.  Save your experiment after you have made the change.</p>\n<ol>\n<li><p>If you tap on &quot;Code Blocks&quot; &gt; &quot;Sign in&quot; without modifying the code block, the View Controller that will appear is shown below:</p>\n<p><img src=\"/assets/img/android/code_block_2.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n</li>\n<li><p>Return to the &quot;Sign in&quot; View Controller:</p>\n<p><img src=\"/assets/img/android/code_block_3.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n</li>\n<li><p>Now, select &quot;addOnboarding&quot;, and if you navigate through the app, you will see a new screen appear, which is shown below:</p>\n<p><img src=\"/assets/img/android/code_block_4.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n</li>\n</ol>\n<p>For more details about code blocks, you can refer <a href=\"../reference/index.html#code-blocks\">here</a>.</p>\n<h2 id=\"add-custom-tags\">6. Add Custom Tags</h2>\n\n<p>Custom tags sample code can be found in the <em>MainActivity.java</em> and <em>CodeBlocksActivity.java</em> files.  In order to create a test that only runs for returning users as defined in the app, in your Optimizely experiment you can go to Audiences to set up the custom tag condition.</p>\n<p><img src=\"/assets/img/android/custom_tags_guide.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n<p>For more details about custom tags, you can refer <a href=\"../reference/index.html#custom-tags\">here</a></p>\n<h2 id=\"track-event\">7. Track Event</h2>\n\n<p>trackEvent sample code can be found in the <em>CodeBlocksActivity.java</em> file.  In order to track the custom event for a specific experiment, you can click on the flag image on the top right of the screen next to the &quot;Start Experiment&quot; button.</p>\n<p><img src=\"/assets/img/android/goals_flag.png\" alt=\"Drawing\" style=\"width: 30%;\"/></p>\n<p>From there, you can add a new goal of goal type custom event as shown below:</p>\n<p><img src=\"/assets/img/android/goal_modal.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n<p>For more details, you can refer <a href=\"../reference/index.html#track-event\">here</a>.</p>\n<h2 id=\"revenue-tracking\">8. Revenue Tracking</h2>\n\n<p>Code for tracking revenue can be found in the <em>CodeBlocksActivity.java</em> file.  In order to track revenue for a specific experiment, you can click on the flag image on the top right of the screen next to the &quot;Start Experiment&quot; button.</p>\n<p><img src=\"/assets/img/android/goals_flag.png\" alt=\"Drawing\" style=\"width: 30%;\"/></p>\n<p>From there, you can click on Add a Saved Goal &gt; Select Revenue:</p>\n<p><img src=\"/assets/img/android/revenue.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n<p>For more details, you can refer <a href=\"../reference/index.html#revenue-tracking\">here</a>.</p>\n<h2 id=\"analytics-integrations\">9. Analytics Integration</h2>\n\n<p>For guidance on how to implement Google Analytics and Mixpanel integrations, you can refer to the <em>MainActivity.java</em> file in the comments.</p>\n<p>For more details, you can refer <a href=\"../reference/index.html#analytics-integrations\">here</a></p>\n<h2 id=\"qa\">10. QA</h2>\n\n\n<h3 id=\"preview-mode\">Preview Mode</h3>\n<p>Preview mode allows you to force your app into a certain variation for a given experiment in order to check that your app and the experiment are both running smoothly. To enter preview mode, connect your device to the editor, select your desired variation, open the variation settings drawer, and click <code>Preview</code></p>\n<p><img src=\"/assets/img/android/launch-preview.png\" alt=\"Enter Preview Mode\" /></p>\n"}},"faqs":{"index":{"template":"page-sidebar","title":"Optimizely Android SDK FAQs","body":"<h1 id=\"optimizely-android-sdk-faqs\">Optimizely Android SDK FAQs</h1>\n<p>Below are some frequently asked questions about the Android SDK. You may also want to check out <a href=\"https://help.optimizely.com/hc/en-us/articles/201893400\">general product FAQs</a>.</p>\n<p>Can&#39;t find an answer to your question? We&#39;re happy to answer your question on <a href=\"mobile-support@optimizely.com\">mobile-support@optimizely.com</a>.</p>\n<p><a href=\"#androidversion\"><em>Q:</em> What version of Android is supported by the Android SDK?</a><br>\n<a href=\"#androidlibs\"><em>Q:</em> What third party libraries are used in the Android SDK?</a><br>\n<a href=\"#androidsize\"><em>Q:</em> What is the size of the Android SDK?</a><br>\n<a href=\"#howandroidworks\"><em>Q:</em> How does the SDK work?</a><br>\n<a href=\"#negativesize\"><em>Q:</em> Why are there negative values (-1, -2) for width and height in the Visual Editor?</a><br>\n<a href=\"#matchwrap\"><em>Q:</em> How do I use <code>MATCH_PARENT</code> or <code>WRAP_CONTENT</code> for width and height in the Visual Editor?</a><br>\n<a href=\"#blocking\"><em>Q:</em> Is <code>Optimizely#startOptimizelyWithAPIToken()</code> a blocking method?</a><br>\n<a href=\"#startoptimizely\"><em>Q:</em> Where and when can I call <code>Optimizely#startOptimizelyWithAPIToken()</code>?</a><br>\n<a href=\"#codeblockmemory\"><em>Q:</em> Should we unregister or nullify OptimizelyCodeBlock with anonymous handlers that have a reference to an Activity after finishing the <code>OptimizelyCodeBlock#execute()</code> method call?</a><br>\n<a href=\"#threadsafety\"><em>Q:</em> Are LiveVariable evaluations thread-safe?</a><br>\n<a href=\"#proguard\"><em>Q:</em> Do I need to include any ProGuard configuration rules to use the Optimizely SDK?</a><br>\n<a href=\"#cantseeappineditor\"><em>Q:</em> My device is running the app but I can&#39;t see it in the editor.</a><br>\n<a href=\"#3rdparty\"><em>Q:</em> Does Optimizely work with my other 3rd party SDKs?</a><br>\n<a href=\"#resultspage\"><em>Q:</em> I am not seeing conversions or visitors on the results page.</a><br>\n<a href=\"#22andbelow\"><em>Q:</em> I haven&#39;t gotten a chance yet to upgrade my app to API Level 23 and am using API Level 22 or below.  My app is not compiling after including Optimizely.</a><br></p>\n<p><a name=\"androidversion\"></a></p>\n<h5 id=\"-q-what-version-of-android-is-supported-by-the-android-sdk-\"><em>Q: What version of Android is supported by the Android SDK?</em></h5>\n<p><em>A:</em> Optimizely currently supports apps that are built for Android AP 14 (Ice Cream Sandwich) and above.  For versions of Android AP 8-13, the app will still run but the SDK will be disabled.</p>\n<p><a name=\"androidlibs\"></a></p>\n<h5 id=\"-q-what-third-party-libraries-are-used-in-the-android-sdk-\"><em>Q: What third party libraries are used in the Android SDK?</em></h5>\n<p><em>A: Libraries:</em></p>\n<ul>\n<li>Google GSON v2.3.1</li>\n<li>Square OkHTTP v2.3.0</li>\n<li>Square OkIO v1.4.0</li>\n<li>Android Support Libraries v22.1.1</li>\n<li>Android Platform v22</li>\n<li>Murmur Hash v1</li>\n<li>Autobahn v0.5.3</li>\n</ul>\n<p><a name=\"androidsize\"></a></p>\n<h5 id=\"-q-what-is-the-size-of-the-android-sdk-\"><em>Q: What is the size of the Android SDK?</em></h5>\n<p><em>A:</em> Approximate SDK size below:\n<img src=\"/assets/img/android/Android_SDK_Size.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p><a name=\"howandroidworks\"></a></p>\n<h5 id=\"-q-how-does-the-sdk-work-\"><em>Q: How does the SDK work?</em></h5>\n<p><em>A:</em> Optimizely is implemented through an SDK and the Optimizely datafile.  To get started with Optimizely and run your first experiments, you simply need to install the SDK and add one line of code to your app.  The SDK will download the datafile which is comprised of JSON and contains all of the experiment and goal information necessary to deploy and control experiments and return data to our reporting.  The data file is hosted on our CDN and follows the attached schemas for iOS and Android.  You may view your datafile at cdn.optimizely.com/json/android/1.0/&lt;project_id&gt;.json. Replace &quot;1.0&quot; in the example with the version of the SDK that you are using. For more details, you can refer to the following <a href=\"https://help.optimizely.com/hc/en-us/articles/205014107-How-Optimizely-s-SDKs-Work-SDK-Order-of-execution-experiment-activation-and-goals\">article</a>.  The platform works as shown below:</p>\n<p><em>SDK Contents:</em></p>\n<ul>\n<li>Data File Contents</li>\n<li>Compiled into the app</li>\n<li>Downloads Config from CDN</li>\n<li>Executes experiments and tracks goals locally</li>\n<li>Offline caching/network logic</li>\n<li>Reports events back</li>\n<li>Integrated with dependency management systems for easy updates</li>\n</ul>\n<p><em>Datafile contents:</em></p>\n<ul>\n<li>Active Experiments</li>\n<li>Draft Experiments</li>\n<li>Project goals</li>\n</ul>\n<p>The datafile follows this <a href=\"/android/schema\">schema</a>.</p>\n<p><a name=\"negativesize\"></a></p>\n<h5 id=\"-q-why-are-there-negative-values-1-2-for-width-and-height-in-the-visual-editor-\"><em>Q: Why are there negative values (-1, -2) for width and height in the Visual Editor?</em></h5>\n<p><em>A:</em> Android uses <code>-1</code> for the constant <code>MATCH_PARENT</code> and <code>-2</code> for <code>WRAP_CONTENT</code>. To set the size of the view to an explicit pixel value, enter a positive number of pixels\nin the width or height fields in the visual editor. We are working on an update to the editor that will better understand these special values.</p>\n<p><a name=\"matchwrap\"></a></p>\n<h5 id=\"-q-how-do-i-use-match_parent-or-wrap_content-for-width-and-height-in-the-visual-editor-\"><em>Q: How do I use <code>MATCH_PARENT</code> or <code>WRAP_CONTENT</code> for width and height in the Visual Editor?</em></h5>\n<p><em>A:</em> Android uses <code>-1</code> for the constant <code>MATCH_PARENT</code> and <code>-2</code> for <code>WRAP_CONTENT</code>. To set the width or height of the view to <code>WRAP_CONTENT</code>, enter <code>-2</code> in the corresponding field. Similarly, to set the width or height to <code>MATCH_PARENT</code>, ENTER <code>-1</code> in the corresponding field in the visual editor. We are working on an update to the editor that will better understand these special values.</p>\n<p><a name=\"blocking\"></a></p>\n<h5 id=\"-q-is-optimizely-startoptimizelywithapitoken-a-blocking-method-\"><em>Q: Is <code>Optimizely#startOptimizelyWithAPIToken()</code> a blocking method?</em></h5>\n<p><em>A:</em> Yes, <code>Optimizely#startOptimizelyWithAPIToken()</code> is blocking. It will exit and return <code>true</code> if the configuration file was downloaded and parsed, or <code>false</code> if it hits the network timeout (or another error occurred). The default timeout is 2.5 seconds and is configurable through the <code>setNetworkTimeout()</code> API. Calls to <code>startOptimizely()</code> are not synchronized, and are not thread safe.</p>\n<p><a name=\"startoptimizely\"></a></p>\n<h5 id=\"-q-where-and-when-can-i-call-optimizely-startoptimizelywithapitoken-\"><em>Q: Where and when can I call <code>Optimizely#startOptimizelyWithAPIToken()</code>?</em></h5>\n<p><em>A:</em> <code>Optimizely#startOptimizely()</code> must be called from the UI thread, but may be called as many times as you like. Multiple calls after the first activation call are no-ops. We recommend using <code>Optimizely#startOptimizelyWithAPIToken()</code> in the main launcher activity <code>onCreate()</code>. We do not currently support initializing in <code>Application#onCreate()</code>.</p>\n<p><a name=\"codeblockmemory\"></a></p>\n<h5 id=\"-q-should-we-unregister-or-nullify-optimizelycodeblock-with-anonymous-handlers-that-have-a-reference-to-an-activity-after-finishing-the-optimizelycodeblock-execute-method-call-\"><em>Q: Should we unregister or nullify OptimizelyCodeBlock with anonymous handlers that have a reference to an Activity after finishing the <code>OptimizelyCodeBlock#execute()</code> method call?</em></h5>\n<p><em>A:</em> OptimizelyCodeBlocks are long-lived, so any references to Activities/Views/Applications should be weak references. This is a known issue that is being addressed.</p>\n<p><a name=\"threadsafety\"></a></p>\n<h5 id=\"-q-are-livevariable-evaluations-thread-safe-\"><em>Q: Are LiveVariable evaluations thread-safe?</em></h5>\n<p><em>A:</em> In production mode, all Live Variable values are set when Optimizely starts up. Any further access to the LiveVariable is a read-only action and is thus thread safe.</p>\n<p><a name=\"proguard\"></a></p>\n<h5 id=\"-q-do-i-need-to-include-any-proguard-configuration-rules-to-use-the-optimizely-sdk-\"><em>Q: Do I need to include any ProGuard configuration rules to use the Optimizely SDK?</em></h5>\n<p><em>A:</em> No. Proguard rules are bundled with our SDK as of version 1.2.2.</p>\n<p><a name=\"permissions\"></a></p>\n<h5 id=\"-q-does-the-optimizely-sdk-require-any-permissions-\"><em>Q: Does the Optimizely SDK require any permissions?</em></h5>\n<p><em>A:</em> The Optimizely SDK only requires the <a href=\"http://developer.android.com/reference/android/Manifest.permission.html#INTERNET\">INTERNET</a> permission.</p>\n<p><a name=\"cantseeappineditor\"></a></p>\n<h5 id=\"-q-my-device-is-running-the-app-but-i-can-t-see-it-in-the-editor-\"><em>Q: My device is running the app but I can&#39;t see it in the editor.</em></h5>\n<p><em>A:</em> First, confirm your device is connected to the internet and make sure that the API token in your call to <code>startOptimizely</code> matches what you see in the Project Code box within Optimizely. For more information, you can set <code>Optimizely.setVerboseLogging(true);</code> and look for error messages in Logcat.</p>\n<p><a name=\"3rdparty\"></a></p>\n<h5 id=\"-q-does-optimizely-work-with-my-other-3rd-party-sdks-\"><em>Q: Does Optimizely work with my other 3rd party SDKs?</em></h5>\n<p><em>A:</em> Optimizely works with many 3rd party SDKs. If we encounter specific 3rd party SDKs that cause conflicts with Optimizely we will list them here.</p>\n<p><a name=\"resultspage\"></a></p>\n<h5 id=\"-q-i-am-not-seeing-conversions-or-visitors-on-the-results-page-\"><em>Q: I am not seeing conversions or visitors on the results page.</em></h5>\n<p><em>A:</em> There are two things to check if you not being counted as a visitor or seeing conversions on the results page as you&#39;re doing QA: that you meet targeting conditions and goals are being triggered properly.</p>\n<p>To be counted as a visitor and show up on the results page, you actually have to see the change that you made to the app (i.e. the Live Variable code has to actually execute or you have to see the change you made via the visual editor).  Goals are only sent to the server every 2 minutes (the app must be open for at least 2 minutes), or you need to background the app in order for events store locally to be sent to the server.</p>\n<p>To check that goals are triggering properly, you can use our developer APIs including: <a href=\"/android/help/reference/com/optimizely/integration/OptimizelyEventListener.html\">OptimizelyEventListener</a> and <a href=\"/android/help/reference/com/optimizely/Optimizely.html#getVisitedExperiments(%29\">getVisitedExperiments</a> to check that:</p>\n<ul>\n<li>Your experiment is running</li>\n<li>Your goals are triggered properly</li>\n</ul>\n<p><a name=\"22andbelow\"></a></p>\n<h5 id=\"-i-haven-t-gotten-a-chance-yet-to-upgrade-my-app-to-api-level-23-and-am-using-api-level-22-or-below-my-app-is-not-compiling-after-including-optimizely-\"><em>I haven&#39;t gotten a chance yet to upgrade my app to API Level 23 and am using API Level 22 or below.  My app is not compiling after including Optimizely.</em></h5>\n<p>We have created a separate build that supports API level 8 - 22.  To use this version of Optimizely, you can add the following to your gradle file:</p>\n<pre><code class=\"lang-groovy\">compile (&#39;com.optimizely:optimizely-legacy:+@aar&#39;) {\n        transitive = true\n}\n</code></pre>\n"}},"changelog":{"index":{"template":"page-sidebar","title":"Optimizely Android SDK Changelog","body":"<h1 id=\"optimizely-android-sdk-changelog\">Optimizely Android SDK Changelog</h1>\n<h3 id=\"1-5-0\">1.5.0</h3>\n<p>May 24, 2016</p>\n<p><em>Improved Preview:</em></p>\n<p>We have added an exciting feature to allow developers/testers to set different variations from the app itself.\nYou can also see the events that will be sent to the Optimizely backend. Changing variations while in preview mode is now instantaneous.</p>\n<p><em>Optimizely Attributes:</em></p>\n<p>You can now create Optimizely Attributes for Android in the project dashboard. These attributes can be used to\nsegment results on the results page and for audience targeting. There are new APIs to get and set the value for attributes.</p>\n<ul>\n<li>You can set an attribute’s value by using either <code>Optimizely.setValueForAttributeId(String, String, Context)</code> or <code>Optimizely.setValueForAttributeApiName(String, String, Context)</code> before starting Optimizely. Use <code>Optimizely.setValueForAttributeId(String, String)</code> or <code>Optimizely.setValueForAttributeApiName(String, String)</code> after starting Optimizely.</li>\n<li>You can get an attribute’s current value by using either <code>Optimizely.getAttributeValueForAttributeId(String, Context)</code> or <code>Optimizely.getAttrtibuteValueForAttributeApiName(String, Context)</code> before starting Optimizely. Use <code>Optimizely.getAttributeValueForAttributeId(String)</code> or <code>Optimizely.getAttrtibuteValueForAttributeApiName(String, String)</code> after starting Optimizely.</li>\n<li><p>You can get a copy of all attributes by calling <code>Optimizely.getAttributes()</code>. This replaces the previous <code>Optimizely.getDimensions()</code> call.</p>\n</li>\n<li><p><em>New Classes:</em></p>\n</li>\n<li><p><code>OptimizelyAttribute.java</code> - Represents an Optimizely Attribute.</p>\n</li>\n<li><p><em>registerPlugin</em> is not deprecated anymore. Due to a compiler change in Android Studio 2.0 we cannot find arbitrary classes that implement OptimizelyPlugin in an app’s Dex file at runtime.  Plugins in development will need to use Optimizely#registerPlugin(OptimizelyPlugin) to add the plugin to the Optimizely Plugin Manager.</p>\n</li>\n</ul>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Session per visitor per week are not calculated correctly.</li>\n<li>Integrations such as Localytics and Mixpanel will continue to work with Android Studio 2.0 and the new Jack compiler.</li>\n</ul>\n<p><em>Breaking Changes</em></p>\n<ul>\n<li>We are enabling registerPlugin Api so that you can register plugins directly</li>\n<li>In Android 2.0, in edit mode, Live Variables and Code Blocks are only registered when you navigate to the view that uses them. In the previous versions, Live Variables and Code Blocks were registered on app start<ul>\n<li>If this is inconvenient, Optimizely.registerClassWithOptlyFields(Class…) can be used to register classes with Live Variables and Code Blocks at any point during the app’s execution.</li>\n</ul>\n</li>\n</ul>\n<p><em>Deprecated Methods</em></p>\n<ul>\n<li><code>Optimizely.getDimensions()</code> is now deprecated.  Please use <code>Optimizely.getAttributes()</code> instead.</li>\n<li><code>OptimizelyDimension.java</code> is now deprecated.  Please use the <code>OptimizelyAttribute.java</code> class instead.</li>\n</ul>\n<p><em>Developer documentation</em></p>\n<p>In order to enable preview, you can add <code>Optimizely.enablePreview()</code> in your code similar to <code>Optimizely.enableEditor()</code>. You can only use one of these API calls at a time.</p>\n<h3 id=\"1-4-2\">1.4.2</h3>\n<p>March 8, 2016</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Adjusts bundled Proguard rules so that they only keep the minimum required by Optimizely and work with our new modules.</li>\n<li>Fixes issue where SDK would not start up while starting asynchronously due to thread pool starvation.</li>\n</ul>\n<h3 id=\"1-4-1\">1.4.1</h3>\n<p>February 29, 2016</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Gives visibility back to public API method <code>Optimizely.trackViewGoal(String)</code> which is used to track view goals when using Fragments.</li>\n</ul>\n<h3 id=\"1-4-0\">1.4.0</h3>\n<p>February 25, 2016</p>\n<p><em>New Features:</em></p>\n<ul>\n<li><em>Developer Improvements:</em> We want to enable customers to use the <a href=\"https://help.optimizely.com/hc/en-us/articles/200040195-Tracking-offline-conversion-events-with-Optimizely\">offline conversions</a> API to its full potential, so we&#39;ve exposed essential parameters needed to send offline conversion events.<ul>\n<li><code>Optimizely.getDimensions()</code> - get an ArrayList of all OptimizelyDimensions in the SDK.</li>\n<li><code>Optimizely.getUniversalUserId(Context)</code> &amp; <code>Optimizely.setUniversalUserId(Context, String)</code> - your custom Universal User Id for the end user. Set the universalUserId to identify the end user across devices. More info can be found <a href=\"https://help.optimizely.com/hc/en-us/articles/203626830-Universal-User-ID-Beta\">here</a></li>\n<li><code>Optimizely.optimizelyEndUserId(Context)</code> - read only property to get the Optimizely End User Id created by the Optimizely SDK.</li>\n</ul>\n</li>\n<li><em>New Classes:</em><ul>\n<li>OptimizelyDimension.Java - A representation of the data in an individual Optimizely Dimension. Read more about Dimensions <a href=\"https://help.optimizely.com/hc/en-us/articles/200040865-Dimensions-Capture-visitor-data-through-the-API\">here</a>.</li>\n</ul>\n</li>\n<li><em>Performance Improvements:</em><ul>\n<li>Added a way to selectively include Optimizely SDK code to reduce method counts against DEX issues.</li>\n<li>Improved performance for SDK startup</li>\n<li>Upgraded to OKHTTP version 3</li>\n</ul>\n</li>\n</ul>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixed an issue with tracking revenue goals with an empty string description.</li>\n</ul>\n<p><em>Deprecated Methods:</em></p>\n<ul>\n<li><code>Optimizely.getUserId(Context)</code> &amp; <code>Optimizely.setUserId(Context, String)</code> are now deprecated. Please use either <code>universalUserId</code> or <code>optimizelyEndUserId</code> instead.</li>\n</ul>\n<h3 id=\"1-3-7\">1.3.7</h3>\n<p>January 5, 2016</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fix Audience evaluator bug.</li>\n</ul>\n<h3 id=\"1-3-6\">1.3.6</h3>\n<p>December 21, 2015</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixes internal task queueing error</li>\n</ul>\n<h3 id=\"1-3-5\">1.3.5</h3>\n<p>December 14, 2015</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixes crash when handling GSON failure during SDK disabling.  This only selects a few specific devices</li>\n</ul>\n<h3 id=\"1-3-4\">1.3.4</h3>\n<p>December 7, 2015</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Handles GSON crash when it creating GSON adapter.  GSON crashes will cause the SDK to disable itself and not crash the host app</li>\n</ul>\n<h3 id=\"1-3-3\">1.3.3</h3>\n<p>November 30, 2015</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixes incompatibility with edit or preview mode on older Android devices (API 17 and below)</li>\n</ul>\n<h3 id=\"1-3-2\">1.3.2</h3>\n<p>November 25, 2015</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Optimizely will no longer completely disable itself if there are no running esperiments, which prevented users from starting the editor</li>\n</ul>\n<h3 id=\"1-3-1\">1.3.1</h3>\n<p>November 12, 2015</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Optimizely will not disable itself if it crashes on the main thread for debug builds, only for release builds</li>\n<li>Adjusted OkHttp dependency for increased stability</li>\n</ul>\n<h3 id=\"1-3-0\">1.3.0</h3>\n<p>November 6, 2015</p>\n<p><em>Announcements:</em>\n<em>Twitter Fabric Integration.</em> We&#39;re excited to announce our partnership with Fabric, Twitter&#39;s modular mobile platform that makes it easy for developers to install and maintain SDKs within their apps. Find out more <a href=\"https://blog.optimizely.com/2015/10/21/optimizely-twitter-fabric/\">here</a></p>\n<p><em>New Features:</em></p>\n<ul>\n<li><em>Developer Improvements.</em> We&#39;ve added a litany of testing methods to our SDK to help you debug your experiments much more quickly and easily<ul>\n<li>isUserInAudience - Check if the user is in a particular audience</li>\n<li>getExperimentDataById - Get an experiment&#39;s metadata with that experiment&#39;s ID</li>\n<li>resetUserBucketing - Remove a user&#39;s bucketing information for all experiments</li>\n<li>forceVariationOfExperiment - Force a user into a certain experiment variation\nRead more in-depth descriptions <a href=\"/android/reference/index.html#debugging-your-experiments\">here</a></li>\n</ul>\n</li>\n<li><em>Manual activation.</em> You can now manually specify, in code, when you want your experiments to activate (by default, all active experiments are activated when start Optimizely is called). Some important use cases include setting additional targeting metadata before activating an experiment and only bucketing users who visit a certain activity in your app\nRead more in-depth descriptions <a href=\"/android/reference/index.html#experiment-activation-modes\">here</a></li>\n<li><em>Code Block Callbacks in Edit Mode.</em> Please note that code block callbacks will only work in edit mode</li>\n<li><em>Automatic Crash Disabling.</em> Our Android SDK is now more stable than ever!<ul>\n<li>Optimizely-related crashes in the main thread will cause Optimizely SDK disable itself on that device until an Optimizely SDK version change or an app version change</li>\n<li>Optimizely-related crashes in background threads will cause the thread to quietly shut down</li>\n<li>Optimizely SDK automatically disables itself for that session if no running experiments are detected on app start</li>\n</ul>\n</li>\n</ul>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Improved preview mode access from URL scheme consistency</li>\n<li>Improved visual editor button resizing consistency</li>\n<li>Fixed counting bug affecting custom events when used with UUID</li>\n</ul>\n<h3 id=\"1-2-4\">1.2.4</h3>\n<p>October 16, 2015</p>\n<p><em>Code Deprecation</em></p>\n<pre><code>Optimizely.startOptimizely(String, Application)\n</code></pre><p>is deprecated in favor of:</p>\n<pre><code>Optimizely.startOptimizelyWithAPIToken(String, Application)\n</code></pre><p><em>Bug Fixes</em></p>\n<ul>\n<li>Added Fabric properties to core as well as bundle</li>\n</ul>\n<h3 id=\"1-2-3\">1.2.3</h3>\n<p>October 15, 2015</p>\n<p><em>Bug Fixes</em></p>\n<ul>\n<li>Added Fabric properties</li>\n</ul>\n<h3 id=\"1-2-2\">1.2.2</h3>\n<p>October 14, 2015</p>\n<p><em>New Features</em></p>\n<ul>\n<li>Proguard configuration for SDK is now bundled with the SDK</li>\n</ul>\n<p><em>Bug Fixes</em></p>\n<ul>\n<li>Fixes conflict between Proguard and Gson</li>\n<li>Removes unecessary elements from the library&#39;s Manifest</li>\n</ul>\n<h3 id=\"1-2-1\">1.2.1</h3>\n<p>October 6, 2015</p>\n<p><em>Bug Fixes</em></p>\n<ul>\n<li>Remove backup settings from AndroidManifest.xml</li>\n</ul>\n<h3 id=\"1-2-0\">1.2.0</h3>\n<p>October 5, 2015</p>\n<p><em>New Features</em></p>\n<ul>\n<li><em>Audience targeting.</em> Improve your app’s retention by creating audiences of similar users and targeting them with relevant content.</li>\n<li><em>Connection-free changes.</em> Make changes to Live Variables and Code Blocks without connecting your device to Optimizely.</li>\n<li><em>Streamlined goal setting.</em> Save time during instrumentation with a faster and more accurate goal selection experience.</li>\n<li><em>Multi-target goals.</em> Accurately test entirely different variations by connecting multiple view or tap events to a single goal.</li>\n<li><em>Advanced preview and QA modes.</em> Release new features confidently with a rebuilt preview mode that allows you to simulate a live user experience in real time.</li>\n<li><em>Analytics integrations.</em> See your Android experiment results in your Google Analytics, Mixpanel, Localytics, or Amplitude dashboard.</li>\n</ul>\n"}},"articles":{"2-article-testing":{"template":"page-sidebar","partial":"_article-summary.html","includeSiblingData":true,"title":"QA Optimizely Android Experiments","summary":"Learn how to use Optimizely developer tools to QA your Optimizely experiments.\nYou can find examples of how to use each of the QA methods in Optimizely's TutorialApp, which can be [downloaded with the SDK](/android/getting-started/index.html).  The corresponding guide can be found [here](\"/android/guide/index.html\").","body":"<h1 id=\"qa-optimizely-android-experiments\">QA Optimizely Android Experiments</h1>\n<p><em>THIS ARTICLE WILL HELP YOU:</em></p>\n<ul>\n<li>Learn how to use Optimizely developer tools to QA your Optimizely experiments</li>\n<li>Implement code samples of how to use Optimizely’s Experiment Data Object and <a href=\"/android/reference/index.html#adding-an-event-listener\">OptimizelyEventListener</a> to ensure your experiment is set up as expected</li>\n<li>You can find examples of how to use each of these methods in Optimizely&#39;s TutorialApp, which can be downloaded with the SDK.  The corresponding guide can be found <a href=\"/android/guide/index.html\">here</a>.</li>\n</ul>\n<h3 id=\"overview\">OVERVIEW</h3>\n<p>So you’ve created your experiment, finished your setup, and you’d like to QA your experiment to make sure it’s working correctly. There are two main ways to QA your experiment, which include: <a href=\"https://help.optimizely.com/hc/en-us/articles/202296994#preview\">Preview Mode</a> and Developer Debugging tools. This article will focus on how to QA your experiment with developer tools.</p>\n<p><em>Preview mode</em></p>\n<p>This lets you see your variation changes as your user would. You can easily enter this from the editor from each variation tab’s settings icon. You can learn more about Preview Mode here.</p>\n<p><em>Developer debugging tools</em></p>\n<p>You can take advantage of Optimizely’s <a href=\"/android/reference/index.html#adding-an-event-listener\">event listeners</a> and the <a href=\"/android/reference/index.html#experiment-data-object\">data object</a> in order to gain a better understanding of when your experiment is running. These tools will allow you to check that you are creating the experience, targeting the audience, and tracking the goals that you expect.</p>\n<p>TIP:</p>\n<blockquote>\n<p>Enable logging for QA (be sure to disable this feature when your app is live in the Play store) <code>Optimizely.verboseLogging(true)</code>. The logs include a number of useful messages such as: the SDK version, a log for each event that’s triggered, etc.</p>\n</blockquote>\n<p>In the following sections, we&#39;ll provide steps to follow to QA your experiment.</p>\n<p>NOTE:</p>\n<blockquote>\n<p>For information about the APIs that are being described in this article, including <a href=\"/android/reference/index.html#adding-an-event-listener\">listeners</a> and experiment <a href=\"/android/reference/index.html#experiment-data-object\">data object</a>, you can always refer back to our API documentation for definitions on how these methods work!</p>\n</blockquote>\n<h3 id=\"debugging-your-experiments\">DEBUGGING YOUR EXPERIMENTS</h3>\n<p>In addition to the methods laid out in this article, our Developer Docs provide additional methods for debugging your experiments:</p>\n<ul>\n<li><a href=\"/android/reference/index.html#adding-an-event-listener\">Adding an Event Listener</a></li>\n<li><a href=\"/android/reference/index.html#experiment-data-object\">Experiment Data Object</a></li>\n<li><a href=\"/android/reference/index.html#audience-information\">Audience Information</a></li>\n<li><a href=\"/android/reference/index.html#forcing-a-variation\">Forcing a Variation</a></li>\n<li><a href=\"/android/reference/index.html#resetting-qa-state\">Resetting QA State</a></li>\n</ul>\n<h3 id=\"run-your-app-in-normal-mode\">RUN YOUR APP IN NORMAL MODE</h3>\n<p>There are two modes that you can run in your app with Optimizely:</p>\n<p><em>Edit mode:</em> This mode enables your device to connect to the Optimizely Editor. Your end users will not be able to put the app into this mode.</p>\n<p><em>Normal mode:</em> In this mode, experiments are running as they would to your end users.</p>\n<p>To QA your experiment as a developer, make sure that your app is in Normal mode so that you can see what your users will experience (you will not see the Edit mode status bar in your app).</p>\n<p>TIP:</p>\n<blockquote>\n<p>If your app is in Edit mode (you should see the Edit Mode dark blue icon in your app), disconnect from the Editor.  Do this by running the app in Android Studio again or clicking on the <em>Connected</em> to button next to Options, and disconnecting.</p>\n<p>If you are running your app for the first time with the SDK installed, you will see that the app should already be in Normal mode. You can also verify that your app is in normal mode by looking at your console logs (if you have verboseLogging enabled). The Optimizely experiment also has to have been started. You can see whether it&#39;s started by looking at the Start/Pause button in the Editor, or by looking at the experiment on the Home page.</p>\n</blockquote>\n<p>NOTE:</p>\n<blockquote>\n<p>Before pressing Start, you will want to make sure that you either have <a href=\"/android/reference/index.html#custom-tags\">custom tags</a> set up or a separate project in a staging environment so that your live users do not see your experiment.</p>\n</blockquote>\n<p><img src=\"/assets/img/start_experiment.png\" alt=\"Drawing\" style=\"width: 50%;\"/></p>\n<p><em>CHECK TARGETING CONDITIONS, TRAFFIC ALLOCATION, AND STATUS</em></p>\n<p>An experiment is running when the datafile is successfully downloaded, the user meets the targeting conditions, traffic allocation is met, and the experiment is not locked. An experiment is locked when you modify the same view, variable or code block in multiple active experiments. An experiment can be in one of three states:</p>\n<ul>\n<li><code>OptimizelyExperimentDataStateDisabled</code></li>\n<li><code>OptimizelyExperimentDataStateRunning</code></li>\n<li><code>OptimizelyExperimentDataStateDeactivated</code></li>\n</ul>\n<p>For more details about how an experiment can be in each of these states, refer to our documentation of <a href=\"/android/articles/1-article-testing.html\">how the SDK works</a>.</p>\n<p>For Android, you can drill down into Optimizely&#39;s <code>allExperiments</code> data object by setting a breakpoint and see the same information about targeting and experiment state.</p>\n<p><img src=\"/assets/img/android/android_qa_targeting_2.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p>TIP:\nIf you don’t see the <em>_targetingConditions</em> and <em>_targetingMet</em> values that you expect, the app may need to be foregrounded or a call to refreshExperiments may need to be made.</p>\n<p>When the application is next brought to the foreground (after being backgrounded), the SDK re-checks targeting conditions, and if they have changed this will be reflected in the <em>_targetingConditions</em> property. You can also force re-checking of targeting conditions by calling <code>Optimizely.refreshExperiments()</code>.</p>\n<p><em>CHECK WHETHER THE VARIATION HAS BEEN VISITED</em></p>\n<p>A visitor is considered part of an experiment when they visit a variation. To check whether a visitor has seen visited an experiment by using the <code>onOptimizelyExperimentViewed</code> listener. To verify that your experiment is running as expected, you can use this method to add a log statement to verify that the method was called and verify that the log statement appears in the console.</p>\n<p>On Android, you can register the OptimizelyEventListener prior to <code>startOptimizelyWithAPIToken</code>.  The code you can use is shown below.  For more details, you can refer to the article here.</p>\n<p><img src=\"/assets/img/android/android_qa_visited_code_3.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p>You can set breakpoints to view useful experiment data properties such as visitedEver or visitedThisSession.</p>\n<p><img src=\"/assets/img/android/android_qa_visited_3_2.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p><em>CHECK DIFFERENT VARIATIONS</em></p>\n<p>Typically, if you want to check that different variations are working as expected, you can use Optimizely’s <a href=\"https://help.optimizely.com/hc/en-us/articles/202296994-Get-Started-on-Mobile-Optimization#preview\">Preview functionality</a>. If you want to test out different variations in normal mode, you&#39;ll have to delete the app from the device and re-install it. Optimizely stores which variation a users sees and makes sure they will always see this variation. Deleting the app treats the fresh installation as a new user.</p>\n<p>TIP:</p>\n<blockquote>\n<p>Optimizely’s Traffic Allocation will randomly bucket users into a variation based on the percentages that are set in the Optimizely Editor. When you change a variation’s traffic allocation mid-experiment, all new users will be allocated accordingly from then on.</p>\n<p>However, all users that have entered your experiment prior to the change will be bucketed into the same variation they entered previously, thus altering the results and making it difficult to interpret conversion rate. This is one reason we recommend that people do not alter individual traffic allocation to a single variation.</p>\n</blockquote>\n<p><em>CHECK WHETHER THE GOAL IS FIRING</em></p>\n<p>A goal is tracked for a given experiment only if the experiment has been <em>_visitedEver</em>. To check whether your goals are being triggered as expected when you want them to, you can use the <code>onGoalTriggered</code> listener.</p>\n<p>Once you have tapped, viewed, or sent off your custom event goal, the app should stop for the new goal triggered callback method. Backgrounding and foregrounding the app will also send the goal.</p>\n<p>For Android, you can use the onGoalTriggered listener to see when a goal is triggered as shown in the code below.</p>\n<pre><code class=\"lang-java\">public void onGoalTriggered(String description,\n                                List&lt;OptimizelyExperimentData&gt; affectedExperiments) {\n      Log.i(tag, format(&quot;Optimizely goal {%s} part of experiments {%s} achieved.&quot;,\n                          description, affectedExperiments));\n    }\n</code></pre>\n<p><em>RUN DIFFERENT VARIATIONS ON MULTIPLE DEVICES</em></p>\n<p>Now that you have your experiment set up as expected, try running your experiment on different devices. To get bucketed into different variations, you can delete the app and run the app again.</p>\n<p>Once you’re done going through these steps, you’re ready to run your experiment live on your app.</p>\n"},"1-article-testing":{"template":"page-sidebar","partial":"_article-summary.html","includeSiblingData":true,"title":"How Optimizely's Android SDK Works","summary":"Learn about how Optimizely's Android SDK Order of execution, experiment activation, and goals.\nSpecifically, the article discusses how Optimizely's SDK executes in an app, the order of operations for how an experiment runs,\nand how conversions are counted in Optimizely.","body":"<h1 id=\"how-optimizely-s-android-sdk-works\">How Optimizely&#39;s Android SDK Works</h1>\n<p><em>THIS ARTICLE WILL HELP YOU:</em></p>\n<ul>\n<li>Understand <em>how Optimizely&#39;s SDK executes</em> in an app</li>\n<li>Understand the <em>order of operations</em> for how an experiment runs</li>\n<li><em>Use Optimizely&#39;s Android APIs</em> to provide visibility into what experiments are running</li>\n<li><em>Activate experiments manually</em> based on a user action (SDK versions 1.3 and above)</li>\n<li>Understand <em>how conversions are counted</em> in Optimizely</li>\n</ul>\n<h3 id=\"optimizely-s-sdks-order-of-execution\">OPTIMIZELY&#39;S SDKS ORDER OF EXECUTION</h3>\n<p>The following diagram illustrates how experiments are activated by the Optimizely SDK.</p>\n<p><img src=\"/assets/img/ios/optimizely_sdk_execution.png\" alt=\"Drawing\" style=\"width: 100%;\"/></p>\n<p>When your application starts up and the Optimizely SDK is initialized, Optimizely downloads a JSON data file containing all experiment data. This datafile is downloaded with a (configurable) 2 second timeout. If the datafile can’t be downloaded, a cached data file is used. If no data file is found, no experiments are run. While the app is running, a new datafile is fetched by Optimizely every 2 minutes (configurable).</p>\n<p>After downloading the data file, each experiment is evaluated to see if it can be run. First, the SDK checks to see if the experiment passes targeting conditions. If it passes targeting conditions, it is then run through traffic allocation and a variation is chosen. Once this variation is chosen, this is saved and the user will always see this variation. As a last check, the Optimizely SDK checks to see if this experiment conflicts with another experiment. If it does, the experiment becomes locked and will not run. If the experiment passes all those checks, it is now set to running in the application.</p>\n<p>TIP:</p>\n<blockquote>\n<p>An experiment conflicts with another when you modify the same view, variable, or code block in multiple experiments. In this case, one of the experiments will not run. You can identify whether or not a conflict exists by looking at verboseLogging.</p>\n</blockquote>\n<p>When the application resumes or is brought the foreground after being backgrounded, the Optimizely SDK runs through the same process as above, but does not attempt to download a new datafile. This means that some experiments that were running before may now stop, and some experiments that were not running before may start.</p>\n<p>TIP:</p>\n<blockquote>\n<p>refreshExperiments allows targeting conditions to be reevaluated while the app is running (and does not require an app to be foregrounded).</p>\n</blockquote>\n<h3 id=\"mobile-experiment-states\">MOBILE EXPERIMENT STATES</h3>\n<p>The above diagram shows how experiments are activated and eventually put into the “running” state. But what does this mean?</p>\n<p>An Optimizely mobile experiment has 3 possible states:</p>\n<ul>\n<li>Disabled</li>\n<li>Running</li>\n<li>Deactivated</li>\n</ul>\n<p><em>Disabled:</em> This means the experiment has been paused from the Optimizely dashboard.</p>\n<p><em>Running:</em> This means the experiment is running and ready to be viewed. This doesn’t necessarily mean it has been viewed.</p>\n<p><em>Deactivated:</em> This means the experiment failed a condition required to run, either targeting, traffic allocation, or it is locked or conflicts with another experiment.</p>\n<p>Once an experiment is running, it is ready to be viewed. But running doesn’t necessarily mean it has been viewed.</p>\n<p>You can use the following APIs on both iOS and Android to see the state of experiments.</p>\n<p>On Android, you can call:</p>\n<p><code>Optimizely.getAllExperiments()</code>\nThis returns a Map of OptimizelyExperimentData objects that represent every experiment the SDK knows about\n<code>Optimizely.getVisitedExperiments()</code>\nThis returns a Map of OptimizelyExpermentData objects that represent every experiment that has been seen and visited by the user across all sessions</p>\n<p><em>When is an experiment marked as viewed?</em></p>\n<p>Once an experiment is running, it is marked as viewed the first time it is seen by an end user. For visual experiments, the first time a visual treatment is shown, the experiment is marked as viewed.</p>\n<p>For programmatic experiments, the first time a live variable or code block from that experiment is accessed, it is marked as viewed.</p>\n<p>The Optimizely SDKs keep track of which experiments have been visited across all sessions, as well as which experiments have been visited in a given session. Simply use the visitedExperiments API to get a list.</p>\n<p>TIP:</p>\n<blockquote>\n<p>You can register a <a href=\"/android/reference/index.html#adding-an-event-listener\">callback</a> for Android to be notified when various Optimizely events occur in the SDK life cycle.</p>\n</blockquote>\n<h3 id=\"manual-activation\">MANUAL ACTIVATION</h3>\n<p>You can manually activate Optimizely for your mobile app. In essence, this will force Optimizely to re-evaluate based on an in-app API call. The two activation modes for mobile experiments are automatic (default) and manual. Manual activation is only available for SDK versions 1.3 and above.</p>\n<p><em>Automatic (Default):</em> By default, Optimizely buckets users and activates the experiment as soon as the app starts and the <code>startOptimizelyWithAPIToken</code> method is called (either synchronously or asynchronously). Experiments are marked as visited when the end user reaches an element that has been modified in the experiment.</p>\n<p><em>Manual:</em> In manual activation mode, developers can specify, via an in-app API call, at which point they want to activate a given experiment. Manual activation allows you to separate the experiment start (which buckets the users and activates the experiment) from <code>startOptimizelyWithAPIToken</code>, which loads the datafile and any remote assets, such as images. Check out the developer documentation on manual activation for iOS and Android.</p>\n<p><em>Please note that visitors still must meet Audience targeting conditions for a manually activated experiment to be eligible for that experiment.</em> Manual activation does not bypass Audience conditions.</p>\n<p>Toggle between manual and automatic activation mode from the Options &gt; Activation Mode menu in the Editor:</p>\n<p><img src=\"/assets/img/ios/activation_mode.png\" alt=\"Drawing\" style=\"width: 50%;\"/></p>\n<p>NOTE:</p>\n<blockquote>\n<p>What happens if you try to use manual activation when your experiment is on automatic activation mode, or if you try to manually activate an experiment that doesn’t exist?</p>\n<p>The call will simply not execute and your app will continue running as before, with the control variation as the default experience.</p>\n</blockquote>\n<p><em>Why would you want to use manual activation?</em> We’ve outlined some use cases below.</p>\n<p><em>Use Case #1: Set additional metadata for your audiences before evaluating targeting conditions for an unactivated experiment.</em></p>\n<p>Bucketing only occurs for your audiences when activateExperiment is called and NOT when <code>startOptimizelyWithAPIToken</code> is called, and thus any custom tags you set before the experiment starts will be considered for targeting.\nFor example, you can mark a user as a “VIP” at one point during a session, then use this tag for an experiment later in the same session.\nWith automatic activation mode, you can only target using tags set before the app was started (and thus set in a previous session).</p>\n<p><em>Use Case #2: Bucket only a subset of users who access less frequently used areas of your app.</em></p>\n<p>Bucketing users when the app loads, which is done in automatic mode, may not be the best choice for experiments involving an experience that not all users visit.</p>\n<p>For example, if you want to test a feature deep in your user experience that only 10% of users visit, you wouldn’t necessarily want to bucket all users when you launch your app (as is done with automatic mode), because this could lead to skewed sampling.\nIf you manually activate your experiment only when users reach that experience, you can bucket users at the point where they visit that feature, and run tests on only those users.</p>\n<p><em>Use Case #3: Quick-load assets for consistency.</em></p>\n<p>Remote assets distributed by the Optimizely CDN, such as images you upload to our editor, start loading asynchronously when the app starts. As a result, if any assets fail to load before an experiment is viewed due to slow internet speeds, the user is not showed the variation and is instead shown the control even though that user has been bucketed.</p>\n<p>The variation will be shown to the user the next time he or she opens the app, assuming the assets have loaded before he or she views the experiment, leading to an inconsistent user experience and possibly even skewed results.\nIn manual activation mode, you can activate experiments right when you want to show them, giving the user’s device more time to load assets associated with that experiment.</p>\n<h3 id=\"how-conversions-are-counted\">HOW CONVERSIONS ARE COUNTED</h3>\n<p>There are several types of conversion events and goals that Optimizely captures:</p>\n<ul>\n<li>Tap Goal</li>\n<li>View Goal</li>\n<li>Custom Event Goal</li>\n<li>Revenue Goal</li>\n</ul>\n<p>Optimizely counts conversions for these goals only when an experiment has been previously visited by the user in any session, and the experiment is not paused from the Optimizely dashboard.</p>\n<p>For example, if you make a call to a custom event, but the user hasn’t actually visited that experiment, the conversion will not count.</p>\n<p>Similarly, if a user visited an experiment in their first session (e.g. a sign up flow), but converts in the second session without visiting the experiment again, that conversion will still count towards the experiment.</p>\n<h3 id=\"how-visual-experiments-execute\">HOW VISUAL EXPERIMENTS EXECUTE</h3>\n<p>The Optimizely SDKs let you create visual experiments that you can run in your application without having to re-deploy to the app store! But how does it actually apply those visual treatments?</p>\n<p>On Android, Optimizely uses reflection to attach the SDK as a listener for interaction and lifecycle events to apply visual changes to the application based on whatever experiments are active in the data file. In particular, the Optimizely SDK intercepts the following listeners:</p>\n<p><em><code>ViewGroup</code></em></p>\n<ul>\n<li><code>OnHierarchyChangeListener:</code><ul>\n<li>We register the view when the view moves into the window</li>\n<li>We unregister the view when the view moves out of the window</li>\n<li>We check to see if there are any visual changes that need to be applied to the view from any active experiments</li>\n</ul>\n</li>\n</ul>\n<p><em><code>AbsListView</code></em></p>\n<ul>\n<li><code>OnScrollListener:</code><ul>\n<li>Only used when app is connected to Optimizely’s web app, logic used to send screenshots</li>\n<li>When scrolling is complete, screenshot is sent to Optimizely Visual Editor</li>\n</ul>\n</li>\n</ul>\n<p><em><code>DrawerLayout</code></em></p>\n<ul>\n<li><code>DrawerListener:</code><ul>\n<li>Only used when app is connected to Optimizely’s web app</li>\n<li>Logic used to send screenshots</li>\n<li>When drawer is open or closed, screenshot is sent to Optimizely Visual Editor</li>\n</ul>\n</li>\n</ul>\n<p><em><code>Animation</code></em></p>\n<ul>\n<li><code>AnimationListener:</code><ul>\n<li>Only used when app is connected to Optimizely’s web app</li>\n<li>Logic used to send screenshots</li>\n<li>When animation is complete, screenshot is sent to Optimizely Visual Editor</li>\n</ul>\n</li>\n</ul>\n<p><em><code>View.OnTouchListener</code></em></p>\n<ul>\n<li><code>OnTouchListener:</code><ul>\n<li>We check to see if there’s a goal attached to the view that got tapped, if so we end up storing a tap event</li>\n<li>In edit mode we send a screenshot whenever the user interacts with the device through a touch</li>\n<li>Used to detect edit mode gesture only in development builds</li>\n</ul>\n</li>\n</ul>\n<p><em><code>Application.ActivityLifecycleCallbacks</code></em></p>\n<ul>\n<li><code>ActivityResumed:</code><ul>\n<li>We check to see if there is a view goal associated with the view that is coming into frame. If there is then we’ll store the view</li>\n</ul>\n</li>\n<li><code>onActivityCreated:</code><ul>\n<li>Puts the app into edit mode if necessary</li>\n</ul>\n</li>\n</ul>\n"},"index":{"template":"page-sidebar--articles","title":"iOS Articles","includeSiblingData":true,"articles":["1-article-testing","2-article-testing"],"body":""}},"code-samples":{"index":{"template":"page-sidebar","title":"Code Samples","body":"<h1 id=\"code-samples\">Code Samples</h1>\n<h2 id=\"developer-qa\">Developer QA</h2>\n<p>To learn how to use Optimizely&#39;s debug APIs, you can refer to the following <a href=\"https://help.optimizely.com/hc/en-us/articles/205156117-QA-Your-Optimizely-iOS-and-Android-Experiments\">article</a>.</p>\n<p><em>More code examples coming soon!</em></p>\n<p>We are working on a number of code samples that you can use soon.</p>\n"}},"getting-started":{"index":{"template":"page-sidebar","title":"Optimizely Android SDK Guide","body":"<h1 id=\"getting-started-with-optimizely-s-android-sdk\">Getting started with Optimizely&#39;s Android SDK</h1>\n<h2 id=\"sdk-download\">SDK Download</h2>\n<p>You can download the Android SDK through gradle or install it through Fabric.</p>\n<p><a href=\"https://fabric.io/kits/android/optimizely\"><img src=\"/assets/img/mobile/fabric_button.png\" style=\"width: 150px; height: 58px;\"/></a></p>\n<p><a href=\"https://github.com/optimizely/Optimizely-Android-SDK/raw/master/Optimizely-1.3.2-SNAPSHOT.jar\">JAR</a> | <a href=\"https://github.com/optimizely/Optimizely-Android-SDK\">GitHub</a></p>\n<p><a href=\"https://github.com/optimizely/Optimizely-Android-SDK/\">Releases</a> | <a href=\"https://github.com/optimizely/Optimizely-Android-SDK/raw/master/Changelog.md\">Change History</a></p>\n<h5 id=\"-android-sdk-install-video-\"><em>Android SDK Install Video</em></h5>\n<p><iframe src=\"//fast.wistia.net/embed/iframe/poqkf6ok6s\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"720\" height=\"450\"></iframe></p>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\n<h2 id=\"sdk-installation\">1. SDK Installation</h2>\n\n<p>To use Optimizely for Android you must first integrate the SDK into your app using <a href=\"#using-gradle\">Gradle</a>.</p>\n<p><strong>We strongly recommend using a version control system (such as <a href=\"http://git-scm.com/\">Git</a>) and checking in your app before installing Optimizely.</strong></p>\n<h3 id=\"using-gradle\">Using Gradle</h3>\n<p>Your project must be set up to build with Gradle. Refer to <a href=\"http://developer.android.com/sdk/installing/studio-build.html\">Gradle Getting Started</a> if you haven&#39;t yet configured your project to work with Gradle.</p>\n<p>Our SDK only supports Android API 14 (Ice Cream Sandwich) and above, so please make sure your <code>build.gradle</code> specifies a <a href=\"https://developer.android.com/tools/building/configuring-gradle.html#buildFileBasics\">minimum sdk</a> of 14 (or above). Then, add the Optimizely-Android-SDK repository as a maven repository to your project&#39;s top-level <code>build.gradle</code> file:</p>\n<pre><code class=\"lang-groovy\">allprojects {\n  repositories {\n    jcenter()\n    maven {\n      url &#39;http://dl.bintray.com/optimizely/optimizely&#39;\n    }\n  }\n}\n</code></pre>\n<p>Make sure you add the repository to the <code>allprojects</code> configuration, <em>not</em> the <code>buildscript</code> configuration.</p>\n<p>Then, add Optimizely as a dependency in your app&#39;s <code>build.gradle</code>:</p>\n<pre><code class=\"lang-groovy\">dependencies {\n    compile(&#39;com.optimizely:optimizely:+@aar&#39;) {\n        transitive = true\n    }\n}\n</code></pre>\n<h2 id=\"create-an-android-project\">2. Create an Android Project</h2>\n\n<p>To create an Android project, select &quot;New Project&quot; from the left drawer in your <a href=\"https://app.optimizely.com/projects/\">Optimizely Home</a>:</p>\n<p>   <img src=\"/assets/img/android/create-project.png\" alt=\"Create Project Dialog\" style=\"width: 80%;\"/></p>\n<p><a name=\"project-code\"></a>Once you&#39;ve created a project, please take a look at the <code>Implementation</code> section under the <code>Settings</code> tab to find your project ID and API key which you will use during integration:</p>\n<p><img src=\"/assets/img/android/project-code.png\" alt=\"Project Code Dialog\"></p>\n<h2 id=\"activate-optimizely\">3. Activate Optimizely</h2>\n\n<p>Now, you&#39;re ready to add some code so your app can connect with your Optimizely account.</p>\n<p>Optimizely assigns each project a unique identifier known as an API token. Your app identifies itself to the Optimizely Android SDK by initializing the SDK with this token.</p>\n<p>Open the Java source file corresponding to your app&#39;s main activity (the one declared as a launcher activity in your <code>AndroidManifest.xml</code>), and add the following import:</p>\n<pre><code class=\"lang-java\">  import com.optimizely.Optimizely;\n</code></pre>\n<p>Add the following to the end of your main activity&#39;s <code>onCreate()</code> function. The code can be copied from your <code>Implementation Settings</code>, which you can find by selecting on the appropriate Android Project in your <a href=\"https://app.optimizely.com/projects\">Optimizely Home</a>.  For more details, you can refer back to <a href=\"#accountcreation\">Step 2: Create an Android project</a>.</p>\n<div class=\"attention attention--warning push--bottom\">Optimizely must be started from your main launcher activity&#39;s <code>onCreate()</code> method. Starting anywhere else, such as <code>Application#onCreate()</code> will not be supported and may lead to unpredictable behavior.</div>\n\n\n<pre><code class=\"lang-java\">@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    // more create logic\n\n    // Crash reporting tool initialization\n\n    // You can find the following code snippet in your project code.\n    Optimizely.startOptimizelyWithAPIToken(&quot;&lt;API Token&gt;&quot;, getApplication());\n}\n</code></pre>\n<p>This call will block until Optimizely is started. For a non-blocking call, use the following version which takes a callback listener as the third argument. If you are not interested in the callback, you can pass in <code>null</code>:</p>\n<pre><code class=\"lang-java\">\nprivate static void mOptimizelyEventListener = new DefaultOptimizelyEventListener() {\n    @Override onOptimizelyStarted() {}\n    @Override onOptimizelyFailedToStart(String message) {}\n};\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    // More startup code here\n    Optimizely.startOptimizelyAsync(&quot;&lt;API Token&gt;&quot;, getApplication(), mOptimizelyEventListener);\n}\n</code></pre>\n<p><em>Note:\n   startOptimizelyAsync must be initialized on the UI (main) thread to coordinate with the activity lifecycle.</em></p>\n<p>Optimizely needs to connect to the internet to allow you to use our online editor and to download new experiments once you&#39;ve published them. If you don&#39;t already have the <code>INTERNET</code> permission declared in your <code>AndroidManifest.xml</code>, you will need to add the following permission line:</p>\n<pre><code class=\"lang-xml\"> &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n</code></pre>\n<p> For more information on Android permissions, see the <a href=\"http://developer.android.com/guide/topics/manifest/manifest-intro.html#perms\">Android Manifest Intro</a>.</p>\n<p> Starting with version 1.1, Optimizely&#39;s Android SDK uses a unique URL scheme handler to help you edit and test your experiments.</p>\n<p>   Add the following intent filter to the MainActivity entry of your AndroidManifest.xml</p>\n<pre><code class=\"lang-xml\">   &lt;activity\n     android:name=&quot;.MainActivity&quot;&gt;\n     &lt;intent-filter&gt;\n       &lt;!-- Existing intent-filters --&gt;\n     &lt;/intent-filter&gt;\n     &lt;intent-filter&gt;\n       &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n       &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n       &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;\n       &lt;data android:scheme=&quot;optly[PROJECT_ID]&quot; /&gt;\n     &lt;/intent-filter&gt;\n   &lt;/activity&gt;\n</code></pre>\n<p>   <em>Note:\n   The scheme includes a unique identifier.  Be sure to replace [PROJECT_ID] with your project id (e.g. optly123456).</em></p>\n<p>At this point you should run your application to register the SDK installation. The Optimizely SDK will register itself in the background. You will see your project overview display light up, allowing you to create an experiment:</p>\n<p>   <img src=\"/assets/img/android/sdk-detected.png\", style=\"width: 70%\"/></p>\n<h2 id=\"create-an-experiment\">4. Create an Experiment</h2>\n\n<p>After creating an Android project and installing the SDK, click the <code>Create Experiment</code> button in the upper right hand side of your project overview.</p>\n<h4 id=\"custom-view-tagging\">Custom View Tagging</h4>\n<p>The Optimizely Android SDK identifies Views within your application using the view hierarchy of the view-- in some cases you may need to specify your own ID or mark a specific view in a collection view as unique.</p>\n<p>See this section on <a href=\"/android/reference/index.html#visual-editor-configuration\">configuring the visual editor</a>.</p>\n<h2 id=\"qa\">5. QA</h2>\n\n<h3 id=\"preview-mode\">Preview Mode</h3>\n<p>Preview mode allows you to force your app into a certain variation for a given experiment in order to check that your app and the experiment are both running smoothly. To enter preview mode, connect your device to the editor, select your desired variation, open the variation settings drawer, and click <code>Preview</code></p>\n<p><img src=\"/assets/img/mobile/launch-preview.png\" alt=\"Enter Preview Mode\" /></p>\n<h3 id=\"programmatically-enable-preview-mode\">Programmatically Enable Preview Mode</h3>\n<p>While preview mode can be enabled from the dashboard it can also be enabled from code.  This allows you to preview variations across all of your experiments without needing to connect to the editor.  Preview mode has UI that allows you easily switch variations and view event logs.</p>\n<pre><code class=\"lang-java\">Optimizely.enablePreview();\nOptimizely.startOptimizelyWithAPIToken(getOptimizelyToken(), getApplication());\n</code></pre>\n<h3 id=\"pre-launch-checklist\">Pre-launch Checklist</h3>\n<p>Now that you&#39;ve created an experiment and successfully installed the Optimizely Android SDK, below is a checklist to go through prior to releasing your app to the app store with the SDK:</p>\n<ol>\n<li><p>In order to set up your app such that you can QA experiments (beyond using Preview), we recommend either having a separate <a href=\"#accountcreation\">Project</a> for development and production or inserting <a href=\"#customtags\">Custom Tags</a>, which are only set for certain QA devices.  If you decide to go with setting up 2 separate projects, we recommend setting up an <code>if (DEBUG)</code> to ensure that only one project code snippet is defined at any given time.</p>\n</li>\n<li><p>Were you able to connect to Optimizely&#39;s Visual Editor?  Before your release to the app store, you will want to make sure that <code>Optimizely.setEditGestureEnabled(false)</code> is called before <code>Optimizely.startOptimizelyWithAPIToken</code>.</p>\n</li>\n<li><p>(Optional) If you have a separate project for development and production, you can run your experiments in your development environment to check that results are updating and that you are seeing the different variations are being seen.</p>\n<ul>\n<li>A useful debugging tool is to enable logging (be sure to disable this feature when your app is live in the Play Store) <code>Optimizely.setVerboseLogging(true);</code> For each event that is triggered, you will see a log statement. Be sure to check that verboseLogging is not enabled in production.</li>\n<li>You will want to make sure that each experiment does not make changes to the same element (otherwise only one of the experiments will run).</li>\n<li>Optimizely tracks unique visitors, so that we make sure that the same user sees the same experience.  If you would like to check that you are getting a random experience, you will need to delete the app to be counted as a new visitor.</li>\n<li>By default, Optimizely sends network calls every 2 minutes or upon backgrounding. (You can find more details about modifying the SDK network settings <a href=\"#networksettings\">here</a>). In order to check that your event data is being updated in the Optimizely Results Page as expected, you can either:<ol>\n<li>Trigger events in the app and keep the app foregrounded for 2 minutes</li>\n<li>Background the app so that events are sent to our servers.</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>Once you&#39;ve checked all these steps, you&#39;re ready to release to the Play Store!</p>\n</li>\n</ol>\n<h2 id=\"advanced-setup\">Advanced Setup</h2>\n<p>Once you have run your first few visual editor experiments or tried out Optimizely&#39;s SDK, you may find you would like to include programmatic experiments, additional tracking calls, or analytics integrations.  For advanced setup, below are a subset of advanced features we recommend utilizing prior to releasing to the Play Store:</p>\n<ol>\n<li><a href=\"../reference/index.html#register-live-variables\">Live Variables</a></li>\n<li><a href=\"../reference/index.html#code-blocks\">Code Blocks</a></li>\n<li><a href=\"../reference/index.html#custom-tags\">Custom Tags</a></li>\n<li><a href=\"../reference/index.html#track-event\">Track Event</a> (for key metrics you would like to track in your app)</li>\n<li><a href=\"../reference/index.html#revenue-tracking\">Revenue Tracking</a></li>\n<li><a href=\"../reference/index.html#analytics-integrations\">Analytics Integration</a></li>\n<li><a href=\"../reference/index.html#optimizely-debug\">Optimizely Event Listeners</a></li>\n</ol>\n<p>For a comprehensive list of all additional methods available in the SDK you can refer to the <a href=\"../reference/index.html\">Reference</a> section or the <a href=\"/android/help/reference/packages.html\">Java Docs</a>.</p>\n"}},"introduction":{"index":{"template":"page-sidebar","title":"Optimizely Android SDK","body":"<h1 id=\"optimizely-android-sdk\">Optimizely Android SDK</h1>\n<p><em>The Android SDK allows you to create and run experiments in your Android app.</em></p>\n<p>Once the app with the Optimizely SDK is submitted to the App Store, you can run experiments and collect data (and even create new experiments) without re-submitting to the App Store.  After you install the SDK in your app, you will be able to log into <a href=\"https://app.optimizely.com\">Optimizely&#39;s web application</a>.</p>\n<p>As a developer, you can use Optimizely&#39;s Android SDK for:</p>\n<ul>\n<li>A/B testing</li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/206101447\">Phased rollouts</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/202296994-Creating-an-iOS-experiment#goals\">Event tracking</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/202296994-Creating-an-iOS-experiment#targeting\">Extensive targeting</a></li>\n</ul>\n<p>There are three types of changes you can make in Optimizely, one of which (Visual Editor) requires no coding once the SDK is installed. You can make visual changes in our Visual Editor, modify Live Variable values, and control Code Blocks.</p>\n<p><em>Visual Editor</em></p>\n<ul>\n<li>Does not require code to configure and start experiments</li>\n<li>Allows you to modify properties of existing elements in between app releases (e.g. text, color, etc.)</li>\n<li>Start experiments and immediately push changes to your live app without requiring App Store review</li>\n</ul>\n<p><em>Live Variables</em></p>\n<ul>\n<li>Requires Live Variables to already have been identified prior to App Store submission</li>\n<li>Optimizely allows you to change variable values in between releases</li>\n</ul>\n<p><em>Code Blocks</em></p>\n<ul>\n<li>Requires new code/features to be tested have already been submitted to App Store and approved</li>\n<li>Can perform phased roll-outs of new features for targeted group or percentage of your users directly from Optimizely</li>\n<li>Optimizely acts as the switch enabling you to intelligently activate your features/code and analyze the impact the new changes have made</li>\n</ul>\n<p>For more details, check out the following articles:</p>\n<ul>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/205014107-How-Optimizely-s-SDKs-Work-SDK-Order-of-execution-experiment-activation-and-goals\">How Optimizely&#39;s SDKs Work</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/205156117-QA-Your-Optimizely-iOS-and-Android-Experiments\">QA Your Optimizely Experiments</a></li>\n</ul>\n<p><em>Here are some resources to help you get started!</em></p>\n<p>Plan Your Testing Strategy</p>\n<ul>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/201940160?utm_medium=product&amp;utm_source=mobile&amp;utm_campaign=dashboard_empty_002\">Optimization Essentials</a>: Learn how to move the metrics that matter</li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/202248294?utm_medium=product&amp;utm_source=mobile&amp;utm_campaign=dashboard_empty_003\">Mobile Testing Ideas</a>: Try these low-effort, high-impact experiment ideas</li>\n</ul>\n<p>Get Ready, Get Set, Test!</p>\n<ul>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/202296994?utm_medium=product&amp;utm_source=mobile&amp;utm_campaign=dashboard_empty_001#steps\">Getting Started</a>: Five simple steps to creating your first experiment</li>\n</ul>\n<p>Any questions or feedback?  E-mail us at <a href=\"mailto:mobile-support@optimizely.com\">mobile-support@optimizely.com</a>.</p>\n<p><a class=\"button button--highlight anchor--middle display--block width--200 text--center\" href=\"../getting-started/index.html\">\nGet Started\n</a></p>\n"}}},"apps":{"index":{"template":"page-sidebar","title":"Apps","body":"<h1 id=\"apps-developers-guide\">Apps Developer Guide</h1>\n\n<p><strong>Welcome! This page walks you through everything you need to know so you can build apps using Optimizely.</strong></p>\n<div class=\"attention attention--warning push-double--bottom\">\n<strong>Optimizely Canvas is a beta feature, and we&#39;re eager to hear your feedback!</strong> If you&#39;re developing an app or\nwould like to provide feedback, then please chat with us at\n<a href=\"https://gitter.im/optimizely/apps\" target=\"_blank\">https://gitter.im/optimizely/apps</a>.\n<br><br>\n<strong>If you don&#39;t see Apps in your dashboard</strong>, or if you have trouble accessing Apps the product, please email <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>.\n</div>\n\n\n<p>At Optimizely, we’re working hard to expand our developer platform to empower customers and developers to extend and integrate with Optimizely in new ways.</p>\n<p>In addition to our APIs, we’ve also built the Optimizely Canvas framework, which allows developers to embed custom experiences inside the native Optimizely interface.</p>\n<p>We’re excited for customers and developers to leverage these powerful tools to build apps that extend the Optimizely experience.</p>\n<h2 id=\"what-are-apps\">What are Optimizely Apps?</h2>\n\n<p>You may already be familiar with Optimizely Integrations. Integrations are connectors between Optimizely and other technologies. You can read more about developing your own integrations <a href=\"/integrations/\">here</a>.</p>\n<p>Optimizely Apps are extensions to Optimizely that don’t depend on other technologies. They can be third-party applications that integrate with Optimizely using Optimizely Canvas.</p>\n<h2 id=\"what-is-canvas\">What is Optimizely Canvas?</h2>\n\n<p>Optimizely Canvas allows developers to embed Optimizely Apps directly in the Optimizely interface using an iframe.</p>\n<p><img src=\"/assets/img/apps/full-width.png\" /></p>\n<p class=\"muted line--tight proceed\"><i>Your App will be shown directly under a unique tab of your naming. This location will provide a canvas space for the full width of the page.</i></p>\n\n<p>Such applications are context-aware, meaning Optimizely informs the app about a user’s attributes like their account ID and current project ID.</p>\n<p>Optimizely also provides apps embedded in Canvas with <strong>OAuth credentials</strong> for the current user, allowing the app to interact with Optimizely’s REST APIs on behalf of the user and build truly rich and seamless experiences.</p>\n<h2 id=\"example-apps\">Example Apps</h2>\n\n<h4 id=\"headline-testing\">Headline Testing</h4>\n<p>Headline Testing allows users to create article headline experiments in just a few clicks without using the Optimizely visual editor. The entire interface below the Headline Testing tab—which looks and feels like part of the native Optimizely product—is in fact an iframe to an application hosted entirely outside of Optimizely and integrated via Canvas.</p>\n<p><img src=\"/assets/img/apps/headline-testing-screenshot.png\" /></p>\n<h4 id=\"sheets-embed\">Sheets Embed</h4>\n<p>Sheets Embed allows users to access Google spreadsheets related to their Optimizely projects directly within Optimizely.</p>\n<p><img src=\"/assets/img/apps/sheets-embed-screenshot.png\" /></p>\n<h2 id=\"getting-started\">Getting Started</h2>\n<p>Optimizely Canvas empowers developers to build rich experiences on the Optimizely platform in an incredibly low-friction way. In fact, you can use whatever tech stack you’d like. We&#39;re excited to see what you build!</p>\n<h3 id=\"ideate\">1. Come up with an idea for your app</h3>\n\n<p>Need an app idea? <a href=\"https://optimize.ly/app-ideas\" target=\"_blank\">Check out the Optiverse</a> for app ideas that have been suggested by the community!</p>\n<p>You can also get inspiration from our existing apps by going to your Optimizely Dashboard and clicking on the “Apps” tab.</p>\n<h3 id=\"register-your-app\">2. Register your app</h3>\n\n<p>If you&#39;d like to develop an app using Optimizely Canvas, register your app through the form\n<a href=\"http://link.optimizely.com/app-registration-form\" target=\"_blank\">here</a>. After initial setup, you can\niterate on your app indefinitely without depending on the Optimizely team.</p>\n<p>While we cannot guarantee it, we aim to complete initial setup within one business day of your request.</p>\n<h3 id=\"turn-on-your-app\">3. Turn on your app</h3>\n\n<p>Once you&#39;ve received confirmation that your app is available, you&#39;ll find it listed in the <em>Apps</em> tab of any project under the account(s) you requested we whitelist:</p>\n<p><img src=\"/assets/img/canvas/turning_on_an_app.png\" /></p>\n<p>After you switch the app to &quot;On&quot;, you&#39;ll see a new tab appear in your project navigation:</p>\n<p><img src=\"/assets/img/canvas/templates_tab_closeup.png\" style=\"width: 60%;\" /></p>\n<p>If you click this tab, your app&#39;s URL will be loaded via an iframe below the tab, with a signed payload as described below in <a href=\"#canvas-payload\">Section 4. Use the Canvas payload</a>.</p>\n<h3 id=\"canvas-payload\">4. Use the Canvas payload</h3>\n\n<h4 id=\"the-canvas-payload\">The Canvas Payload</h4>\n<p>When loading your app in the Canvas iframe, Optimizely provides a <code>signed_request</code> URL parameter, which includes\ncontextual information for the user who opened your app.</p>\n<h4 id=\"parsing-the-context\">Parsing the Context</h4>\n<p>This <code>signed_request</code> parameter has a value of the format:</p>\n<pre><code>{{hashed_base64_context}}.{{unhashed_base64_context}}\n</code></pre><p>Note the period (<code>.</code>) delimiter. The <code>hashed_base64_context</code> component is used to authenticate the request as coming\nfrom Optimizely, which is covered in more detail in the <a href=\"#verifying-the-context\">Verifying the Context</a> section below.</p>\n<p>The <code>unhashed_base64_context</code> component is base64-encoded JSON with this format:</p>\n<pre><code>{&quot;context&quot;:\n    {&quot;user&quot;:\n        {&quot;email&quot;: &quot;jon@optimizely.com&quot;},\n     &quot;environment&quot;:\n         {&quot;current_account&quot;: 123456,\n          &quot;current_project&quot;: 78910},\n     &quot;client&quot;:\n         {&quot;access_token&quot;: &quot;abcdefg1234543&quot;,\n          &quot;token_type&quot;: &quot;bearer&quot;,\n          &quot;expires_in&quot;: 7200}\n    }\n}\n</code></pre><p>You can use this information to identify the user, discern their current account and project, and issue any REST API requests on their behalf using their OAuth access token, as described in our <a href=\"/oauth/index.html#authentication-oauth\">REST API Authentication</a> docs.</p>\n<p>With this information, the possibilities for building rich experiences directly in the Optimizely product are endless.</p>\n<h4 id=\"verifying-the-context\">Verifying the Context</h4>\n<p>As mentioned, you should use the <code>hashed_base64_context</code> portion of the <code>signed_request</code> parameter value to verify that\nthe unhashed context is authentically from Optimizely, and not a malicious third party trying to impersonate the user.</p>\n<p>You do this by:</p>\n<ol>\n<li>HMAC SHA-256 hashing the unhashed context <strong>to lowercase hexits</strong>, using your OAuth client secret as the\nHMAC key,</li>\n<li>base64-encoding the hash, and</li>\n<li>verifying that the result matches the provided <code>hashed_base64_context</code>.</li>\n</ol>\n<p>If the result does not match, <strong>you should immediately return an HTTP 401 to the user and assume the request was\nmalicious</strong>. Do not do any processing for the user or expose any data to the user.</p>\n<div class=\"attention attention--warning push--bottom\">\n<em>NOTE:</em> This verification should never be done client-side or in any other environment accessible to the user, as your\nclient secret must be used to perform the verification and is a <strong>highly sensitive</strong> secret.\n</div>\n\n<h4 id=\"canvas-sdks\">Canvas SDKs</h4>\n<p>We&#39;ve developed SDKs to help with decoding the <code>signed_request</code> parameter. Check out <a href=\"#starter-kits-sdks\">our section on Canvas SDKs below</a>.</p>\n<h4 id=\"access-token-expiration\">Access Token Expiration</h4>\n<p>Per the <code>&quot;expires_in&quot;: 7200</code> section in the example context above, the access token provided by Optimizely to your app\nlasts for 2 hours (7,200 seconds). See the <a href=\"#faqs\">FAQs</a> for information on what to do when this access token expires, or\nis revoked by the user.</p>\n<h3 id=\"build-your-app\">5. Build your app using our App Guidelines </h3>\n\n<p>In order for us to accept your app, and for the app review process to go smoothly, please use our app guidelines to build your app. See the <a href=\"#app-guidelines\">App Guidelines</a> sections for more.</p>\n<h3 id=\"submit-your-app\">6. Submit your app</h3>\n\n<p>Once you&#39;ve built your app, send us an email at <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>. We will start the app review process and work with you to get it listed on the Optimizely platform.</p>\n<h3 id=\"change-app-config\">7. Change your app&#39;s configuration (optional)</h3>\n\n<p>If at any time you need to change your app&#39;s configuration (such as the display name, the app URL, or the app logo),\njust re-submit the <a href=\"http://link.optimizely.com/app-registration-form\" target=\"_blank\">registration form</a>\nwith the updated information.</p>\n<h2 id=\"starter-kits-sdks\">Starter Kits &amp; Canvas SDKs</h2>\n\n<p>We&#39;ve built starter kits and SDKs for developers interested in building on the Optimizely platform. If you’re interested in contributing, let us know at <a href=\"https://gitter.im/optimizely/apps\" target=\"_blank\">https://gitter.im/optimizely/apps</a>.</p>\n<h4 id=\"starter-kits\">Starter Kits</h4>\n\n<p>We&#39;ve put together starter kits to help kickstart your app development. Check this section in the future for more. We welcome contributions of libraries in other languages.</p>\n<ul>\n<li><a href=\"https://github.com/optimizely/canvas-getting-started-python\">Python Canvas Starter Kit</a></li>\n<li><a href=\"https://github.com/optimizely/canvas-node-quickstart\">Node Canvas Starter Kit</a></li>\n</ul>\n<h4 id=\"canvas-sdks\">Canvas SDKs</h4>\n\n<p>These SDKs help with decoding the <code>signed_request</code> parameter to get the Canvas context. We welcome contributions of libraries in other languages.</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/optimizely-canvas-sdk\">Node SDK</a></li>\n<li><a href=\"https://github.com/optimizely/canvas_python_SDK\">Python SDK</a></li>\n<li><a href=\"https://github.com/conversion-com/optimizely-canvas-php-starter-kit\">PHP SDK</a> by <a href=\"http://conversion.com/\">Conversion.com</a></li>\n</ul>\n<h2 id=\"app-guidelines\">App Guidelines</h2>\n<h3 id=\"content-requirements\">Content Requirements</h3>\n\n<p>All apps must include a <strong>Terms of Service</strong> in the UI.</p>\n<h3 id=\"design-requirements\">Design Requirements</h3>\n\n<p>In order to provide a great user experience that feels like a core part of Optimizely, we recommend using our open source CSS framework, <a href=\"http://design.optimizely.com/oui/index.html\">OUI (Optimizely User Interface)</a>. This framework defines standard components — grids, buttons, form elements, breadcrumbs — that are cross-browser compatible and easily combined into larger interfaces. It&#39;s also the same CSS framework that Optimizely&#39;s engineers use to build Optimizely.</p>\n<p>You can get started with OUI in two ways:</p>\n<ol>\n<li>Use the pre-compiled version, as described below (recommended).</li>\n<li>Or, use the <code>optimizely-oui</code> npm module. Read <a href=\"https://github.com/optimizely/oui/blob/devel/README.md\" target=\"_blank\">https://github.com/optimizely/oui/blob/devel/README.md</a> for more.</li>\n</ol>\n<h4 id=\"pre-compiled-css\">Pre-compiled CSS</h4>\n<p>Install the pre-compiled version of OUI in your application:</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://oui.cdn.optimizely.com/9.0.1/oui.css&quot;&gt;\n</code></pre><p>For the latest version, replace the <code>9.0.1</code> with the <a href=\"https://github.com/optimizely/oui/releases\" target=\"_blank\">latest release</a>.</p>\n<p>Here is a basic HTML template to get started using OUI:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;title&gt;Base OUI Template&lt;/title&gt;\n\n    &lt;!-- OUI CSS --&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://oui.cdn.optimizely.com/9.0.1/oui.css&quot;&gt;\n\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, world!&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h4 id=\"oui-core-components\">OUI Core Components</h4>\n<p>As you add each component style to your app, reference the <a href=\"http://design.optimizely.com/oui/core/api/\" target=\"_blank\">OUI Core Components</a> to learn the semantic markup for each component.</p>\n<h4 id=\"designing-your-app\">Designing your app</h4>\n<p>In addition to aligning to the OUI style, please be aware of the context within which you’re designing your app. Since Optimizely’s header is at the top of the page, <strong>you should avoid adding in a secondary header to the top of your app</strong>. A secondary header will confuse users and will create an awkward information architecture.</p>\n<p>Secondly, all the contents inside Optimizely’s UI is left aligned. <strong>You should avoid center aligning the contents of your app</strong> as this will be inconsistent with Optimizely’s UI.</p>\n<p><img src=\"/assets/img//apps/anti-pattern.png\" /></p>\n<h4 id=\"codepens\">Codepens</h4>\n<p>To get started quickly with OUI, check out these codepens:</p>\n<ul>\n<li><a href=\"http://codepen.io/kwalker3690/pen/vGNYRv?editors=1010\" target=\"_blank\">Tab Navigation</a></li>\n<li><a href=\"http://codepen.io/kwalker3690/pen/pyjoLb?editors=1000\" target=\"_blank\">Right Sidebar</a></li>\n</ul>\n<h4 id=\"further-reading\">Further Reading</h4>\n<ul>\n<li><a href=\"https://github.com/optimizely/oui\">Optimizely OUI on Github</a> (includes instructions for using <a href=\"https://github.com/optimizely/oui#svg-icons\">SVG icons</a>, too)</li>\n<li><a href=\"http://design.optimizely.com/oui/index.html\">OUI Documentation</a></li>\n<li><a href=\"http://design.optimizely.com/design-patterns/index.html\">Optimizely’s Design Guide</a>, which includes <a href=\"http://design.optimizely.com/brand/colors.html\">brand colors</a> and <a href=\"http://design.optimizely.com/design-patterns/product/index.html\">design patterns</a>.</li>\n</ul>\n<h3 id=\"security-guidance\">Security Guidance</h3>\n\n<p>Optimizely takes security very seriously, and as a developer using Optimizely Canvas, so should you. During the\napplication review process, Optimizely will strive to identify any security issues in your app, but security is\nultimately your responsibility as the developer.</p>\n<p>Below are a number of security recommendations. This is a not intended to be an exhaustive list, and many\napps will have unique attack vectors and security requirements that developers should think through in detail.</p>\n<ul>\n<li>Use <code>X-Frame-Options</code> headers to restrict iframing of your app to exclusively <code>app.optimizely.com</code>.</li>\n<li>Always use HTTPS/SSL for your app URL. Note that insecure HTTP to localhost is acceptable for development purposes,\nbut use of insecure HTTP with any non-localhost URL will result in an error when attempting to use an app.</li>\n<li>Monitor the <a href=\"https://en.wikipedia.org/wiki/HTTP_referer\" target=\"_blank\"><code>Referer</code> header</a> for the\ninitial page load, which should come from <code>app.optimizely.com</code>, to detect possible attacks.</li>\n<li>Always verify the authenticity of the Canvas payload as described above, and, if verification fails, immediately\nreturn an HTTP 401 to the user and assume the request was malicious. Do not do any processing for the user or\nexpose any data to the user.</li>\n<li>Store credentials and tokens securely, ensuring your OAuth client secret is never accessible to users, and ensuring\none user can never access another user’s data or secrets, such as OAuth tokens.</li>\n<li><p>Follow security best practices for web applications. Some resources we find useful to this end are:</p>\n<ul>\n<li><a href=\"https://www.owasp.org/index.php/Cheat_Sheets\">OWASP Cheat Sheet Series</a></li>\n<li><a href=\"http://webdevchecklist.com\">Web Developer Checklist</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Check and frequently re-check 3rd party software (OS, server, frameworks, libraries) for known vulnerabilities.</li>\n<li>Do not redirect the initial Canvas request to another URL.</li>\n<li>Provide an emergency contact in your app&#39;s UI and documentation (preferably a team).</li>\n<li>Contact Optimizely as soon as possible, and at latest within 24 hours, in the event of a compromise.</li>\n<li>All apps must include emergency contact information in your app&#39;s UI and documentation (preferably for a team).</li>\n</ul>\n<h3 id=\"technical-requirements\">Other Technical Requirements</h3>\n\n<p>All links must open externally in a new tab or window, i.e: <code>target=&quot;_blank&quot;</code></p>\n<h2 id=\"resources\">Resources</h2>\n\n<p>Here is the definitive list of documents related to developing an App in Optimizely Canvas:</p>\n<h5 id=\"design-\">Design:</h5>\n<ul>\n<li><a href=\"https://github.com/optimizely/oui\">Optimizely OUI on Github</a></li>\n<li><a href=\"http://design.optimizely.com/oui/index.html\">Optimizely Design Guide: OUI</a></li>\n<li><a href=\"http://design.optimizely.com/design-patterns/product/index.html\">Optimizely Design Guide: Product Design Patterns</a></li>\n</ul>\n<h5 id=\"development-\">Development:</h5>\n<ul>\n<li><a href=\"https://optimize.ly/app-ideas\">Canvas App ideas @ Optiverse</a> (community driven)</li>\n<li><a href=\"http://developers.optimizely.com/apps\">Apps Developer Guide</a> (these docs)</li>\n</ul>\n<h2 id=\"faqs\">FAQs</h2>\n\n<h4 id=\"what-do-i-do-if-the-access-token-from-the-signed-request-expires-or-is-revoked-\">What do I do if the access token from the signed request expires or is revoked?</h4>\n<p>In the event the access token provided to your app in the signed request expires (after 2 hours) or is revoked by the\nuser, the Optimizely REST API will begin returning HTTP 401 responses to your requests. In that case, you should prompt\nthe user to reload the page, which will result in your app receiving a fresh signed request with a fresh OAuth access\ntoken.</p>\n<h4 id=\"what-happens-if-a-user-clicks-a-different-tab-then-clicks-my-app-s-tab-again-\">What happens if a user clicks a different tab, then clicks my app&#39;s tab again?</h4>\n<p>Every time a user clicks the tab for your app from a different tab, or reloads app.optimizely.com, your app will\nreceive a fresh signed request with a new OAuth access token.</p>\n<h4 id=\"how-can-i-contact-you-\">How can I contact you?</h4>\n<p>If you&#39;re developing an app or would like to provide feedback or get help, please chat with us at <a href=\"https://gitter.im/optimizely/apps\">https://gitter.im/optimizely/apps</a> or email us at <a href=\"developers@optimizely.com\">developers@optimizely.com</a>.</p>\n<p>If you&#39;ve built your app and are ready to submit, please email us at <a href=\"developers@optimizely.com\">developers@optimizely.com</a> and we&#39;ll start the app review process.</p>\n"}},"behavior":{"use-cases":{"2-apis":{"template":"page-sidebar--full","title":"JavaScript API","anchor":"apis","body":"<p>When running Optimizely Personalization, your web page can also evaluate a behavioral query on demand using the\n<a href=\"/javascript/personalization/#query\">query</a> API.</p>\n<p>Notes:</p>\n<ul>\n<li>This type of behavioral query can evaluate to a complex value like a list or an <a href=\"#event-objects\">event object</a>, in addition to a simple value like a number, boolean, or string.</li>\n<li>You analyze even more complex behavior by making multiple calls to the JavaScript API.</li>\n<li>You can also use the JavaScript API to debug behavioral queries that you&#39;re planning to use in your Custom Behavioral Attributes.</li>\n</ul>\n"},"0-intro":{"template":"page-sidebar--full","title":"Use Cases","anchor":"use-cases","body":""},"1-attribute":{"template":"page-sidebar--full","title":"Custom Behavioral Attributes","anchor":"attribute","body":"<p>Every Custom Behavioral Attribute is backed by a behavioral query.</p>\n<p>Your customers&#39; events, stored in their individual browsers, are used to compute values for each Custom Behavioral Attribute that you have defined.  The resulting value is recorded (along with other types of attributes) in the appropriate <a href=\"/customer-profiles/\">customer profile</a>.</p>\n<p>Notes:</p>\n<ul>\n<li>This type of behavioral query must evaluate to a number, boolean, or string.  If it evaluates to any other type of value, like a list or an <a href=\"#event-objects\">event object</a> or <code>undefined</code> (as may be the case for visitors with incomplete browsing history), then that invalid value will be ignored and left out of the customer profile.</li>\n<li>Optimizely can automatically define a behavioral query when you use the user interface for creating Custom Behavioral Attributes.  But you can switch to &quot;code mode&quot; and specify the query object yourself, if you need to evaluate a more advanced behavior.</li>\n</ul>\n"}},"query-objects":{"5-frequency-sort":{"template":"sidebyside","title":"5. sort by frequency","anchor":"frequency-sort","js":"// Query for unique tag values sorted from most frequent to least frequent\n{\n  \"version\": \"0.2\",\n  \"pick\": {\n    \"field\": [\"tags\", \"product_name\"]\n  },\n  \"sort\": [\n    {\n      \"field\": [\"frequency\"],\n      \"direction\": \"descending\"\n    }\n  ]\n}\n// Result:\n[\n  \"Scout Backpack\",\n  \"Derby Tier Backpack\"\n]","body":"<p>If field values are being <a href=\"#pick\">picked</a> out of events, you can <code>sort</code> those values by <code>[&quot;frequency&quot;]</code>, either <code>&quot;ascending&quot;</code> or <code>&quot;descending&quot;</code>.</p>\n<p>This <em>deduplicates</em> the picked values and sorts them based on how frequently each one was found in the filtered events.  This will also override any <a href=\"#sort\">sort</a> that may have been performed on the underlying events.</p>\n<p>Unlike conventional <a href=\"#field-identifiers\">field identifiers</a>, <code>[&quot;frequency&quot;]</code> does <em>not</em> correspond to a real event field.</p>\n"},"3-sort":{"template":"sidebyside","title":"3. sort by time","anchor":"sort","js":"// Query for events, sorted from newest to oldest.\n{\n  \"version\": \"0.2\",\n  \"sort\": [\n    {\n      \"field\": [\"time\"],\n      \"direction\": \"descending\"\n    }\n  ]\n}\n// Result:\n[\n  {\n    \"type\": \"pageview\",\n    \"name\": \"AB_product_page\",\n    \"category\": \"product_detail\",\n    \"tags\": {\n      \"price\": 14700,\n      \"product_name\": \"Derby Tier Backpack\"\n    },\n    \"time\": 2222222222000\n  },\n  ...,\n  {\n    \"type\": \"pageview\",\n    \"name\": \"AB_landing_page\",\n    \"category\": \"landing_page\",\n    \"tags\": {\n      \"theme\": \"urban_explorer\"\n    },\n    \"time\": 1111111111000\n  },\n]","body":"<p>You can <code>sort</code> events by <a href=\"#field-identifiers\"><code>[&quot;time&quot;]</code></a>, either <code>&quot;ascending&quot;</code> or <code>&quot;descending&quot;</code>.</p>\n"},"1-version":{"template":"sidebyside","title":"1. version","anchor":"version","js":"// Query object\n{\n  \"version\": \"0.2\"\n}","body":"<p>You must include a version number in each of your query objects.  This ensures that your query will always be evaluated the same, even if Optimizely introduces a backwards-incompatibile query format in the future.</p>\n"},"0-intro":{"template":"sidebyside","title":"Query Objects","anchor":"query-objects","js":"// Query object\n{\n  \"version\": \"0.2\"\n}\n// Result:\n[\n  {\n    \"type\": \"pageview\",\n    \"name\": \"AB_landing_page\",\n    \"category\": \"landing_page\",\n    \"tags\": {\n      \"theme\": \"urban_explorer\"\n    },\n    \"time\": 1111111111000\n  },\n  {\n    \"type\": \"pageview\",\n    \"name\": \"AB_product_page\",\n    \"category\": \"product_detail\",\n    \"tags\": {\n      \"price\": 12800,\n      \"product_name\": \"Scout Backpack\"\n    },\n    \"time\": 1111111115000\n  },\n  {\n    \"type\": \"click\",\n    \"name\": \"AB_add_to_cart\",\n    \"category\": \"add_to_cart\",\n    \"tags\": {\n      \"price\": 12800,\n      \"product_name\": \"Scout Backpack\",\n      \"quantity\": 1\n    },\n    \"time\": 1111111119000\n  },\n  {\n    \"type\": \"pageview\",\n    \"name\": \"AB_product_page\",\n    \"category\": \"product_detail\",\n    \"tags\": {\n      \"price\": 14700,\n      \"product_name\": \"Derby Tier Backpack\"\n    },\n    \"time\": 2222222222000\n  }\n]","body":"<p>Behavioral queries are specified using JSON objects.</p>\n<p>An empty query object evaluates to the list of all events that have been generated by the current visitor.</p>\n"},"2-filter":{"template":"sidebyside","title":"2. filter","anchor":"filter","js":"// Query for events that demonstrate interest in the \"Scout Backpack\".\n{\n  \"version\": \"0.2\",\n  \"filter\": [\n    {\n      \"field\": [\"tags\", \"product_name\"],\n      \"value\": \"Scout Backpack\"\n    }\n  ]\n}\n// Result:\n[\n  {\n    \"type\": \"pageview\",\n    \"name\": \"AB_product_page\",\n    \"category\": \"product_detail\",\n    \"tags\": {\n      \"price\": 12800,\n      \"product_name\": \"Scout Backpack\"\n    },\n    \"time\": 1111111115000\n  },\n  {\n    \"type\": \"click\",\n    \"name\": \"AB_add_to_cart\",\n    \"category\": \"add_to_cart\",\n    \"tags\": {\n      \"price\": 12800,\n      \"product_name\": \"Scout Backpack\",\n      \"quantity\": 1\n    },\n    \"time\": 1111111119000\n  }\n]\n\n// Query for add-to-cart events where the price was at least $50.00.\n{\n  \"version\": \"0.2\",\n  \"filter\": [\n    {\n      \"field\": [\"type\"],\n      \"value\": \"click\"\n    },\n    {\n      \"field\": [\"category\"],\n      \"value\": \"add_to_cart\"\n    },\n    {\n      \"field\": [\"tags\", \"price\"],\n      \"comparator\": \"gte\",\n      \"value\": 5000\n    }\n  ]\n}\n// Result:\n[\n  {\n    \"type\": \"click\",\n    \"name\": \"AB_add_to_cart\",\n    \"category\": \"add_to_cart\",\n    \"tags\": {\n      \"price\": 12800,\n      \"product_name\": \"Scout Backpack\",\n      \"quantity\": 1\n    },\n    \"time\": 1111111119000\n  }\n]\n\n// Query for pageview events that happened between 7 and 14 days ago.\n{\n  \"version\": \"0.2\",\n  \"filter\": [\n    {\n      \"field\": [\"type\"],\n      \"value\": \"pageview\"\n    },\n    {\n      \"field\": [\"age\"],\n      \"comparator\": \"between\",\n      \"value\": [7*24*60*60*1000, 14*24*60*60*1000]\n    }\n  ]\n}\n// Result:\n[\n  {\n    \"type\": \"pageview\",\n    \"name\": \"AB_product_page\",\n    \"category\": \"product_detail\",\n    \"tags\": {\n      \"price\": 14700,\n      \"product_name\": \"Derby Tier Backpack\"\n    },\n    \"time\": 2222222222000\n  }\n]","body":"<p>You can <code>filter</code> the results by passing in an array of filters, each comprising a <a href=\"#field-identifiers\"><code>field</code></a>, <code>comparator</code>, and <code>value</code>.  This narrows down the query to those events that match (all) filters.</p>\n<p>Note that you can filter by <a href=\"http://localhost:4000/behavior/#field-identifiers\"><code>[&quot;age&quot;]</code></a> even though <code>age</code> is not an actual event field.  This is particularly useful if you want to select events that were generated in the last N days.</p>\n<p>These <span id=\"comparators\"><em>comparators</em></span> are usable on all fields:</p>\n<ul>\n<li><code>&quot;eq&quot;</code>: Requires the field value to roughly equal the filter&#39;s <code>value</code>.  For strings, this is case-insensitive, as well as leading- and trailing-whitespace-insensitive.</li>\n<li><code>&quot;is&quot;</code>: Requires the field value to exactly equal the filter&#39;s <code>value</code>.</li>\n<li><code>&quot;in&quot;</code>: Requires the field value to be contained in the filter&#39;s <code>value</code>, which must be an <code>[&quot;array&quot;, &quot;of&quot;, &quot;acceptable&quot;, &quot;values&quot;, &quot;such as&quot;, 2, &quot;and&quot;, true]</code>.  For strings, this is case-insensitive, as well as leading- and trailing-whitespace-insensitive.</li>\n<li><code>&quot;contains&quot;</code>: Requires the field value, which must be an array, to contain the filter&#39;s <code>value</code> according to <code>indexOf</code>.  For strings, this is case-insensitive.</li>\n<li><code>&quot;exists&quot;</code>: Requires the field value to be defined; the filter need not specify a <code>value</code>.  This is only useful for tags, since top-level fields are defined for every event.</li>\n</ul>\n<p>The following <span id=\"string-comparators\"><em>string comparators</em></span> can be used on string fields like <code>type</code>, <code>name</code>, <code>category</code> and also on string tags:</p>\n<ul>\n<li><code>&quot;regex&quot;</code>: Requires the field value to match the filter&#39;s <code>value</code>, which must be either a case-insensitive RegExp <code>&quot;pattern&quot;</code>, or a <code>[&quot;pattern&quot;, &quot;flags&quot;]</code> array</li>\n</ul>\n<p>The following <span id=\"number-comparators\"><em>number comparators</em></span> can be used on numeric fields like <code>time</code>, <code>age</code> and also on numeric tags like <code>revenue</code>.  These comparators automatically reject non-numeric field values.</p>\n<ul>\n<li><code>&quot;gt&quot;</code>: Requires the field value to be greater than the filter&#39;s <code>value</code>, which must be a number.</li>\n<li><code>&quot;gte&quot;</code>: Requires the field value to be greater than or equal to the filter&#39;s <code>value</code>, which must be a number.</li>\n<li><code>&quot;lt&quot;</code>: Requires the field value to be less than the filter&#39;s <code>value</code>, which must be a number.</li>\n<li><code>&quot;lte&quot;</code>: Requires the field value to be less than or equal to the filter&#39;s <code>value</code>, which must be a number.</li>\n<li><code>&quot;between&quot;</code>: Requires the field value to be in the inclusive interval specified by the filter&#39;s <code>value</code>, which must be an array of two numbers.</li>\n</ul>\n<p>If <code>comparator</code> is omitted, it defaults to <code>&quot;eq&quot;</code>.</p>\n<p><code>value</code> can only be omitted when you have specified the <code>&quot;exists&quot;</code> comparator.</p>\n"},"4-pick":{"template":"sidebyside","title":"4. pick","anchor":"pick","js":"// Query for tag values, sorted from most recent to least recent.\n{\n  \"version\": \"0.2\",\n  \"sort\": [\n    {\n      \"field\": [\"time\"],\n      \"direction\": \"descending\"\n    }\n  ],\n  \"pick\": {\n    \"field\": [\"tags\", \"product_name\"]\n  }\n}\n// Result:\n[\n  \"Derby Tier Backpack\",\n  \"Scout Backpack\",\n  \"Scout Backpack\"\n]","body":"<p>You can <code>pick</code> the values for a single field out of an array of (potentially <a href=\"#filter\">filtered</a> and\n<a href=\"#sort\">sorted</a>) events.</p>\n"},"6-reduce":{"template":"sidebyside","title":"6. reduce","anchor":"reduce","js":"// Query for the single most recent event\n{\n  \"version\": \"0.2\",\n  \"sort\": [\n    {\n      \"field\": [\"time\"],\n      \"direction\": \"descending\"\n    }\n  ],\n  // Reduce a list of sorted events into a single event.\n  \"reduce\": {\n    \"aggregator\": \"nth\",\n    \"n\": 0\n  }\n}\n// Result:\n{\n  \"type\": \"pageview\",\n  \"name\": \"AB_product_page\",\n  \"category\": \"product_detail\",\n  \"tags\": {\n    \"price\": 14700,\n    \"product_name\": \"Derby Tier Backpack\"\n  },\n  \"time\": 2222222222000\n}\n\n// Query for the average price across all product page views\n{\n  \"version\": \"0.2\",\n  \"filter\": [\n    {\n      \"field\": [\"type\"],\n      \"value\": \"pageview\"\n    }\n  ],\n  \"pick\": {\n    \"field\": [\"tags\", \"price\"],\n  },\n  // Reduce a list of picked field values into a single value.\n  \"reduce\": {\n    \"aggregator\": \"avg\"\n  }\n}\n// Result:\n13750","body":"<p>You can <code>reduce</code> a list of values into a single value using an <code>aggregator</code>.</p>\n<p>These <span id=\"aggregators\"><em>aggregators</em></span> are usable on all types of values:</p>\n<ul>\n<li><code>&quot;nth&quot;</code>: Reduce the list by choosing the nth value and ignoring the rest.  <code>&quot;n&quot;</code> is specified separately, and is 0-indexed, so you should specify <code>0</code> if you want the first value.  This aggregator is only meaningful when values have been <a href=\"#sort\">sorted</a>.</li>\n<li><code>&quot;count&quot;</code>: Reduce the list by resolving to the number of values in the list.  There is no need to <a href=\"#sort\">sort</a> or <a href=\"#pick\">pick</a> when using this aggregator.</li>\n</ul>\n<p>The following <span id=\"mathematical-aggregators\"><em>mathematical aggregators</em></id> are usable on numeric fields like <code>time</code>, <code>age</code> and also on numeric tags like <code>revenue</code>:</p>\n<ul>\n<li><code>&quot;sum&quot;</code>: Reduce the list by computing the sum of the numeric values.</li>\n<li><code>&quot;avg&quot;</code>: Reduce the list by computing the average of the numeric values.</li>\n<li><code>&quot;max&quot;</code>: Reduce the list by choosing the largest of the numeric values.</li>\n<li><code>&quot;min&quot;</code>: Reduce the list by choosing the smallest of the numeric values.</li>\n</ul>\n<p>Non-numeric values are ignored when evaluating a mathematical aggregator, as if those values didn&#39;t exist at all.  This ensures, for example, that an <code>&quot;avg&quot;</code> computation is not diluted through zero-filling of <code>undefined</code> values.  Note that JavaScript numbers like <code>NaN</code>, <code>+Infinity</code>, and <code>-Infinity</code> are still recognized and can severely affect the result of the aggregation.</p>\n"}},"overview":{"0-intro":{"template":"page-sidebar--full","title":"Overview","anchor":"overview","body":"<p><a href=\"https://www.optimizely.com/personalization/\">Optimizely Personalization</a> allows you to discover and take action on your customers&#39; browsing behavior.</p>\n<p>In this context, browsing behavior is encoded by <a href=\"#event-objects\">event objects</a>, documented below.  You will need to become familiar with structure of these event objects in order to write effective behavioral queries.</p>\n<p>A behavioral query describes how a single customer&#39;s events can be converted into a meaningful value.  Each query is specified using a JSON object.  The format of these <a href=\"#query-objects\">query objects</a> is documented below.</p>\n"}},"event-objects":{"1-fields":{"template":"sidebyside","title":"Fields","anchor":"fields","js":"// A single event\n{\n  \"type\": \"pageview\",\n  \"name\": \"full_product_page\",\n  \"category\": \"product_detail\",\n  \"tags\": {\n    \"product_sku\": \"428977\",\n    \"product_desc\": \"Clamshell Button 12mm\",\n    \"product_cat\": \"button\"\n  },\n  \"time\": 1447046231000\n}","body":"<p>Each event object has the following <em>fields</em>:</p>\n<ul>\n<li><code>type</code>: <code>&#39;pageview&#39;</code>, <code>&#39;click&#39;</code>, or <code>&#39;custom&#39;</code></li>\n<li><code>name</code>: A page name, click event name, or custom event name.  If you filter by <code>name</code>, you probably want to filter by <code>type</code> as well</li>\n<li><code>category</code>: A category name.  All events with a given <code>name</code> and <code>type</code> will necessarily have the same <code>category</code>.</li>\n<li>Various <code>tags</code>: All events from a given page will have those pages&#39; tag values, although additional or overridden tag values may be present on <a href=\"/javascript/personalization/#events\">custom events</a>.</li>\n<li><code>time</code>: The time at which the event occurred (number of milliseconds after January 1, 1970).</li>\n</ul>\n<p>Each field can be a number, boolean, of strings.</p>\n<p>Tag fields may also be <code>undefined</code> or some arbitrary JSON value, so be prepared for anything if you&#39;re retrieving tag values using the <a href=\"/javascript/personalization/#query\">query</a> API.</p>\n"},"0-intro":{"template":"page-sidebar--full","title":"Event Objects","anchor":"event-objects","body":"<p><a href=\"https://help.optimizely.com/Get_Started/Six_core_concepts_of_Optimizely_Personalization#events\">Events</a> are one of the core concepts of Optimizely Personalization.  In the context of customer behavior, these events are exposed as JavaScript objects.</p>\n"},"2-field-identifiers":{"template":"page-sidebar--full","title":"Field Identifers","anchor":"field-identifiers","body":"<p>When defining a behavioral query, you may need to refer to a particular event field.  You can do this using <em>field identifiers</em>.</p>\n<p>For top-level fields like <code>time</code>, the identifier is an array containing the name of the field.</p>\n<ul>\n<li><code>[&quot;type&quot;]</code>: Identifies the <code>type</code> field.</li>\n<li><code>[&quot;name&quot;]</code>: Identifies the <code>name</code> field.</li>\n<li><code>[&quot;category&quot;]</code>: Identifies the <code>category</code> field.</li>\n<li><code>[&quot;time&quot;]</code>: Identifies the <code>time</code> field.</li>\n</ul>\n<p>For tag fields, the identifier is an array containing the string <code>&quot;tags&quot;</code> and then the name of the tag.</p>\n<ul>\n<li><code>[&quot;tags&quot;, &quot;material&quot;]</code>: Identifies the <code>material</code> tag.</li>\n<li><code>[&quot;tags&quot;, &quot;color&quot;]</code>: Identifies the <code>color</code> tag.</li>\n<li><code>[&quot;tags&quot;, &quot;revenue&quot;]</code>: Identifies the special <code>revenue</code> tag.  Its value is extracted in Optimizely&#39;s analytics backend and used to compute advanced statistics.</li>\n</ul>\n<p>When <a href=\"#filter\">filtering</a>, you can also refer to an event&#39;s <code>age</code>.  <code>age</code> is not a real event field so it is never actually included in event objects.  Compare with <a href=\"#fields\"><code>time</code></a>.</p>\n<ul>\n<li><code>[&quot;age&quot;]</code>: Identifies the amount of time since an event occurred (number of millseconds before the time at which the query is executed).</li>\n</ul>\n"}},"index":{"template":"page-sidebar--full","title":"Customer Behavior","includeSiblingData":true,"sections":["overview","query-objects","event-objects","use-cases"],"body":""}},"customer-profiles":{"overview":{"1-changelog":{"template":"sidebyside","title":"Change Log","anchor":"changes","body":"<h4 id=\"ga-changelog\">GA Changelog</h4>\n<p>January 12th, 2016: Updated documentation on Customer Profiles for GA.</p>\n<h4 id=\"beta-changelog\">Beta Changelog</h4>\n<p>September 3rd, 2015: Added documentation on Customer Profiles (Beta).</p>\n"},"0-intro":{"template":"sidebyside","title":"Overview","anchor":"overview","body":"<p>Dynamic Customer Profiles (DCP) are a collection of your customers&#39; attributes, including demographic data, behavioral\ncharacteristics, or any other information particular to your industry and customers. DCP provides a consolidated,\ndynamic view of your customers, enabling you to refine this view as you obtain more information, and to take action\nbased on this view.</p>\n<p>A single customer profile contains attributes collected by Optimizely and attributes collected by you, or by services\nthat you use, and provided to Optimizely to create a single view of the customer. These attributes are organized and\nstored by <a href=\"/rest/reference#dcp_datasources\">datasource</a> and linked across datasources using identity\n<a href=\"#alias\">aliases</a>.</p>\n<p><img src=\"/assets/img/dcp/overview.png\"></p>\n<p>Customer profiles can be used to create audiences for targeting, and exported for use in other integrations, or\nanalysis.</p>\n<p>Use the customary <a href=\"/rest/getting-started\">REST API</a> to configure DCP <a href=\"/rest/reference/#dcp_services\">Services</a>,\n<a href=\"/rest/reference/#dcp_datasources\">datasources</a>, and\n<a href=\"/rest/reference/#dcp_attributes\">attributes</a>.  Then use the DCP REST API,\ndetailed below, to work with individual customer profiles.</p>\n<p>To enable DCP for your account, please contact <a href=\"mailto:techpartners@optimizely.com\">techpartners@optimizely.com</a></p>\n<div class=\"attention attention--warning push--bottom\">\n<p>\nRemember, your terms of service prohibit you from collecting or sending any <em>personally identifiable information</em>\n(such as names, social security numbers, email addresses, or any similar data)\nto Optimizely&#39;s services or systems through Dynamic Customer Profiles or any other feature.\n</p>\n\n<p>\nPlease read the article on <a href=\"https://help.optimizely.com/hc/en-us/articles/215757948\">PII</a>\nto learn more about sending data to Optimizely and handling personally identifiable information.\n</p>\n</div>\n"}},"customer_profiles":{"4-bulk_upload":{"template":"sidebyside","endpoint_prefix":"customer_profile/","title":"Bulk Upload","anchor":"bulk","body":"<p>You can also upload a CSV (comma-separated values) to the <code>optimizely-import</code> S3 bucket using the provided datasource S3\npath.  We will parse the given CSV, validate each row of data against the registered\n<a href=\"/rest/reference/#dcp_attributes\">attributes</a>, and store the successfully processed rows.  Each row is treated as\nan <a href=\"#update-customer_profile\">update</a> request.</p>\n<p>Using the provided AWS credentials, it&#39;s possible to upload CSV files in a variety of ways.  The simplest approach is to\nuse an S3 client application, such as <a href=\"http://www.cyberduck.io/?l=en\">Cyberduck</a>.\nNote: Cyberduck requires the full S3 import path, including both the <code>optimizely-import</code> bucket and the given <code>s3_path</code>,\nfor example, when <code>s3_path=dcp/567/678</code>, use <code>/optimizely-import/dcp/567/678</code></p>\n<p><img src=\"/assets/img/dcp/cyberduck_path.png\"></p>\n<p>It&#39;s also possible to upload files programmatically, using the <a href=\"http://docs.aws.amazon.com/cli/latest/userguide/using-s3-commands.html\">AWS\nCLI</a>, an available\n<a href=\"https://aws.amazon.com/tools/\">SDK</a>, or <a href=\"http://boto3.readthedocs.org/en/latest/reference/services/s3.html\">library</a>.</p>\n<p>You can retrieve the AWS credentials and S3 path from the <a href=\"/rest/reference/#read-dcpdatasource\">datasource</a>.</p>\n<h5 id=\"the-csv-must-follow-this-format\">The CSV must follow this format</h5>\n<ul>\n<li>Each column in the header row must be a registered <a href=\"/rest/reference#dcp_attributes\">attribute</a> <code>name</code>. A CSV\nmay contain a subset of the registered <a href=\"/rest/reference#dcp_attributes\">attributes</a></li>\n<li>The header row must include a <code>customerId</code> column. All rows must also contain a valid customer ID</li>\n<li>If a column header does not correspond to a registered <a href=\"/rest/reference#dcp_attributes\">attribute</a> <code>name</code>, the\nupload will fail</li>\n<li>If an attribute value does not respect the <a href=\"/rest/reference#dcp_attributes\">attribute&#39;s</a> <code>datatype</code>/<code>format</code>,\nthe upload will fail</li>\n</ul>\n<p><img src=\"/assets/img/dcp/csv.png\"></p>\n"},"2-write":{"template":"sidebyside","endpoint":"customer_profile/567/678/oeu1234.5678","endpoint_domain":"https://vis.optimizely.com/api/","type":"POST","title":"Write customer profile","anchor":"update-customer_profile","request":{"data":{"Life-time value":10,"most_viewed_category":"jeans"}},"response":"{\n  \"data\": {\n    \"Life-time value\": 10,\n    \"most_viewed_category\": \"jeans\"\n  },\n  \"dcpServiceId\": \"567\",\n  \"datasourceId\": \"678\",\n  \"customerId\": \"oeu1234.5678\"\n}","body":"<p>Create or update a single customer profile.  The <code>dcp_service_id</code>, <code>datasource_id</code>, and <code>customer_id_in_datasource</code> are required in the URL.</p>\n<p>The request data must be a JSON object, where each key is the <code>name</code> of an\n<a href=\"/rest/reference#dcp_attributes\">attribute</a> and each <code>value</code> must conform to the attribute&#39;s datatype and format.</p>\n<h4 id=\"note-\">Note:</h4>\n<ul>\n<li>The specified attribute value overwrites any existing value specified earlier.</li>\n<li>The request may contain a subset of defined <a href=\"/rest/reference#dcp_attributes\">attributes</a>.</li>\n<li>If a key does not correspond to a registered <a href=\"/rest/reference#dcp_attributes\">attribute</a> <code>name</code>, the write\nwill fail</li>\n<li>If a value does not respect the <a href=\"/rest/reference#dcp_attributes\">attribute&#39;s</a> <code>datatype</code>/<code>format</code>, the write\nwill fail</li>\n</ul>\n"},"0-intro":{"template":"sidebyside","title":"Customer Profiles","anchor":"customer_profiles","body":"<p>Customer Profiles are a collection of your customers&#39; attributes across several data sources. The following APIs allow\nyou to create, update, and read customer attributes for a single datasource.</p>\n<p>To use these APIs, we recommend that you first read the sections on\n<a href=\"/rest/reference#dcp_services\">DCP Services</a>, <a href=\"/rest/reference#dcp_datasources\">datasources</a>,\nand <a href=\"/rest/reference#dcp_attributes\">attributes</a></p>\n<p>Using the <a href=\"#consolidated-profile\">consolidated customer profile</a> API call, you can retrieve\nthe complete Customer Profile across all data sources.</p>\n<p><img src=\"/assets/img/dcp/customer_profiles.png\"></p>\n<div class=\"attention attention--warning push--bottom\">\nThe APIs that follow use the domain: <a href=\"https://vis.optimizely.com/api/\">https://vis.optimizely.com/api/</a>\n</div>\n"},"1-read":{"template":"sidebyside","endpoint":"customer_profile/567/678/oeu1234.5678","endpoint_domain":"https://vis.optimizely.com/api/","type":"GET","title":"Read customer profile","anchor":"read-customer_profile","response":"{\n  \"data\": {\n    \"Life-time value\": 10,\n    \"most_viewed_category\": \"jeans\"\n  },\n  \"dcpServiceId\": \"567\",\n  \"datasourceId\": \"678\",\n  \"customerId\": \"oeu1234.5678\"\n}","body":"<p>Get a single customer profile.  The <code>dcp_service_id</code>, <code>datasource_id</code>, and <code>customer_id_in_datasource</code> are required in the URL.</p>\n"},"3-consolidated":{"template":"sidebyside","endpoint":"consolidatedCustomerView/567/oeu1234.5678","endpoint_prefix":"consolidatedCustomerView/","endpoint_domain":"https://vis.optimizely.com/api/","endpoint_option":567,"type":"GET","title":"Read consolidated customer profile","anchor":"consolidated-profile","response":"[\n  {\n    \"dcpServiceId\": \"567\",\n    \"datasourceId\": \"789\",\n    \"customerId\": \"oeu1234.5678\",\n    \"data\": {\n      \"Life-time value\": 10,\n      \"most_viewed_category\": \"jeans\"\n    }\n  },\n  {\n    \"dcpServiceId\": \"567\",\n    \"datasourceId\": \"790\",\n    \"customerId\": \"sfdc1223a3_ji$ddd\",\n    \"data\": {\n      \"mrr\": 10000\n    }\n  }\n]","body":"<p>Get a consolidated view of a single customer profile.  The <code>dcp_service_id</code> and <code>optimizely_user_id</code> are required in the URL.</p>\n<p>The profile is consolidated by <a href=\"#alias\">aliasing</a> across different datasources in the DCP Service.</p>\n"}},"alias":{"1-read":{"template":"sidebyside","endpoint":"alias/567/678/oeu1234.5678","endpoint_domain":"https://vis.optimizely.com/api/","type":"GET","title":"Get Aliases","anchor":"get-alias","response":"{\n \"dcpServiceId\": \"567\",\n \"datasourceId\": \"678\",\n \"customerId\": \"oeu1234.5678\",\n \"data\": {\n   \"8905\": \"sfdc1223a3_ji$ddd\",\n   \"1232\": \"mkto1245433:213ad\"\n }\n}","body":"<p>Get all customer IDs aliased to the specified Optimizely User ID.  The <code>dcp_service_id</code>, <code>optimizely_datasource_id</code>, and <code>optimizely_user_id</code> are required in the URL.</p>\n<p>The <code>data</code> section of the response is a map of datasource IDs to their corresponding Customer IDs, each aliased to the\ncanonical Optimizely User ID.</p>\n<div class=\"attention attention--warning push--bottom\">\nThe <code>datasourceId</code> for this call should be the ID of the Optimizely datasource. You can find this ID using <a href=\"/rest/reference#list-dcpservice-datasources\">list\ndatasources</a> and finding the datasource with <code>is_optimizely=true</code>.\nIn this example, it is <em>678</em>.  The <code>customerId</code> for this call should be the Optimizely User ID. In this example, it is\n<em>oeu1234.5678</em>.\n</div>\n"},"0-intro":{"template":"sidebyside","title":"Alias","anchor":"alias","body":"<p>Aliases are used to link each customer ID in your <a href=\"/rest/reference#dcp_datasources\">datasources</a> to an\nOptimizely User ID.  The Optimizely User ID is either a\n<a href=\"/javascript/reference/index.html#universal-user-id-beta-a-name-uuid-a-\">UUID</a> (stored in the <code>optimizelyPPID</code> cookie),\nor a random ID generated by Optimizely (stored in the <code>optimizelyEndUserId</code> cookie).</p>\n<p><img src=\"/assets/img/dcp/alias.png\"></p>\n<p>As shown in the figure, an alias indicates that the <em>same customer</em> is identified by <code>ANON_ID_1</code> in &quot;My Datasource&quot; and\nby <code>OEU_2</code> in the &quot;Optimizely Datasource&quot;.  This allows Optimizely to present a\n<a href=\"#consolidated-profile\">consolidated customer profile</a>\nfor that customer and allows you to target customers based on all your datasources&#39; attributes.</p>\n<div class=\"attention attention--warning push--bottom\">\nThese APIs that follow use the domain <a href=\"https://vis.optimizely.com/api/\">https://vis.optimizely.com/api/</a>\n</div>\n"},"2-create":{"template":"sidebyside","endpoint":"alias/567/678/oeu1234.5678","endpoint_domain":"https://vis.optimizely.com/api/","type":"POST","title":"Create Alias","anchor":"create-alias","request":{"data":{"1232":"mkto1245433:213ad","8905":"sfdc1223a3_ji$ddd"}},"body":"<p>Alias customer IDs to the specified Optimizely User ID.  The <code>dcp_service_id</code>, <code>optimizely_datasource_id</code>, and <code>optimizely_user_id</code> are required in the URL.</p>\n<p>In the example, the customer IDs corresponding to datasources <em>8905</em> and <em>1232</em> are now aliased to the Optimizely User\nID <em>oeu1234.5678</em>. The Optimizely datasource ID is <em>678</em> and the DCP Service ID is <em>567</em>.</p>\n<div class=\"attention attention--warning push--bottom\">\nThe <code>datasourceId</code> for this call should be the ID of the Optimizely datasource. You can find this ID using <a href=\"/rest/reference#list-dcpservice-datasources\">list\ndatasources</a> and finding the datasource with <code>is_optimizely=true</code>.\nIn this example, it is <em>678</em>.  The <code>customerId</code> for this call should be the Optimizely User ID. In this example, it is\n<em>oeu1234.5678</em>.\n</div>\n\n<p>You do not need to use this API in order for aliases to be created.  If you configure your\n<a href=\"https://help.optimizely.com/hc/en-us/articles/216307487#add\">datasources</a> with appropriate customer ID locators,\nOptimizely will automatically alias your customer IDs to Optimizely User IDs (as customers visit your website).</p>\n"}},"index":{"template":"page-sidebar--full","title":"Customer Profiles","includeSiblingData":true,"sections":["overview","customer_profiles","alias","profile_integrations"],"body":""},"profile_integrations":{"0-intro":{"template":"sidebyside","title":"Profile Integrations","anchor":"cust_integrations","body":"<p><em>Customer Profile Integrations</em> allow you to upload attributes to enrich a customer profile.</p>\n<p>This section walks through how to build an integration that uploads customer attributes to Optimizely.</p>\n<h3 id=\"pre-requisites\">Pre-requisites</h3>\n<ul>\n<li>Your application must store customer IDs (e.g. hashed email addresses or other unique IDs)</li>\n<li>Customer IDs must not be <a href=\"https://help.optimizely.com/hc/en-us/articles/215757948\">personally identifiable</a>,\nas per Optimizely&#39;s <a href=\"https://www.optimizely.com/terms/\">Terms of Service</a></li>\n<li>Customer IDs must be accessible via the customer&#39;s device (e.g. in a cookie, query parameter, or JavaScript variable)</li>\n<li>You are comfortable using REST APIs</li>\n</ul>\n<h3 id=\"1-get-access\">1. Get Access</h3>\n<p>If you are interested in building an integration with DCP and need DCP enabled for your account, please contact\n<a href=\"mailto:techpartners@optimizely.com\">techpartners@optimizely.com</a></p>\n<h3 id=\"2-register-your-application\">2. Register your application</h3>\n<p>We highly recommend that you use OAuth 2.0 to authenticate with the Optimizely REST API. This will allow you to provide\na seamless experience to users in your application and periodically send data to Optimizely. <a href=\"/rest/reference/#oauth\">Learn how to connect to\nOptimizely using OAuth 2.0</a>.</p>\n<h3 id=\"3-create-a-dcp-service\">3. Create a DCP Service</h3>\n<p>After connecting with Optimizely, you should <a href=\"/rest/reference#create-dcpservice\">create a DCP Service</a>, and\n<a href=\"/rest/reference/index.html#update-project\">associate it with your project</a>. This service will contain all your\ndatasources. If you already have a DCP service, you may proceed to the next step.</p>\n<h3 id=\"4-create-a-datasource\">4. Create a datasource</h3>\n<p><a href=\"/rest/reference#create-dcpdatasource\">Create a datasource</a> within your DCP Service.  This will be the location\nfor all of your application&#39;s customer data. A datasource allows you to send customer data to Optimizely, organized under\na common ID space, without worrying about the relationship of customers across datasources.</p>\n<h3 id=\"5-register-attributes\">5. Register Attributes</h3>\n<p>Register attributes for the datasource with <a href=\"/rest/reference#create-dcpattribute\">create attribute</a>. Attributes\nmust be registered prior to customer profile data being uploaded to that datasource.</p>\n<h3 id=\"6-upload-data\">6. Upload data</h3>\n<p><a href=\"#update-customer_profile\">Write customer profile</a> attribute values for the registered\nattributes. You can also <a href=\"#bulk\">bulk upload</a> attribute data by dropping a CSV (comma-separated values)\nfile into the datasource&#39;s S3 Import path: <code>optimizely-import/&lt;s3_path&gt;</code>; the\n<a href=\"/rest/reference#read-dcpdatasource\">s3_path</a> is included in the Datasource&#39;s metadata.</p>\n<h3 id=\"7-qa-integration\">7.  QA integration</h3>\n<p>To test the integration end-to-end, verify that:</p>\n<ul>\n<li>A datasource has been created in the the datasource dashboard.</li>\n<li>Datasource attributes appear in the audience builder under &quot;Visitor attributes&quot; and you can create an audience\nbased on these attributes.</li>\n<li>You can run a experiment targeted to this audience based on uploaded data.</li>\n</ul>\n"}}},"events":{"introduction":{"index":{"template":"page-sidebar","title":"Optimizely Data Access","body":"<h1 id=\"optimizely-data-access\">Optimizely Data Access</h1>\n<p><em>Our data services allow developers to programmatically access event data from the Optimizely platform.</em></p>\n<p>The <a href=\"/events/api\">Event API</a> ingests data points directly from applications, whether it&#39;s on the web, mobile or a custom server-side implementation. This allows developers to send custom event data to Optimizely’s logging servers. Our own web &amp; mobile clients leverage this API in sending impression and event conversion data to Optimizely. </p>\n<p><a href=\"/events/export\">Event Data Export</a> supports a full export of all Optimizely event data. This data is computed and bucketed on a daily basis and compressed in a tsv format. Developers can use this this data to further analyze experimentation on the Optimizely platform.  </p>\n<p>If you have any questions, please reach out to <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>.</p>\n<p><br /></p>\n<div class=\"flex flex-justified--between soft-quad--sides\">\n\n<a class=\"button button--highlight display--block width--200 text--center\" href=\"/events/api\">\nEvent API\n</a>\n\n<a class=\"button button--highlight display--block width--200 text--center\" href=\"/events/export\">\nEvent Data Export\n</a>\n\n</div>\n"}},"api":{"index":{"template":"page-sidebar","title":"Event API","body":"<h1 id=\"event-api\">Event API</h1>\n<h2 id=\"intro\">Intro</h2>\n<p>The Event API allows developers to send impression or conversion event data to Optimizely from anywhere. Our JavaScript API and mobile SDKs include out-of-the-box tracking for impressions and conversion events on your site or app, but you might want to send conversion data that occurs offline or server-side. In cases like this, event calls may be sent directly to Optimizely&#39;s logging servers. Let’s walk through the details!</p>\n<h2 id=\"endpoint-structure\">Endpoint Structure</h2>\n<p>All conversion events are communicated to Optimizely via GET requests to <code>log.optimizely.com/event</code> with the form:</p>\n<pre><code class=\"lang-bash\">http://{project_id}.log.optimizely.com/event\n</code></pre>\n<p>Note: HTTPS is also supported.</p>\n<h2 id=\"sending-conversion-data\">Sending Conversion Data</h2>\n<p>The Event API can be used to send conversion goals to Optimizely. See below for the expected parameters for conversion goals.</p>\n<h3 id=\"parameter-overview\">Parameter Overview</h3>\n<ul>\n<li><code>d</code>: Account ID</li>\n<li><code>a</code>: Project ID</li>\n<li><code>x</code>: Experiment/Variation mapping per visitor</li>\n<li><code>u</code>: A unique identifier to track a visitor</li>\n<li><code>n</code>: Event goal name</li>\n<li><code>g</code>: (Optional) Goal ID(s)</li>\n<li><code>v</code>: (Optional) Integer that represents a goal’s value</li>\n<li><code>time</code>: (Optional) Timestamp</li>\n</ul>\n<p>Logging conversion event data follows this format:</p>\n<pre><code class=\"lang-bash\">http://1234567.log.optimizely.com/event?a=1234567\n                               &amp;n=example_event\n                               &amp;u=1316548451038r0\n                               &amp;x87654321=1111111\n                               &amp;v=500\n                               &amp;g=1234567\n                               &amp;d=8511325\n                               &amp;s983745985=gc\n                               &amp;time=1462472175\n</code></pre>\n<h3 id=\"parameter-reference\">Parameter Reference</h3>\n<p><h4>Definitions</h4></p>\n<table class=\"table\">\n   <tbody>\n         <tr>\n         <td align=\"left\"><b><code>a</code></b></td>\n         <td class=\"desc\">\n            <p><strong>Project ID</strong>. This is your project ID. It can be found in the web dashboard or in your Optimizely snippet. <br />\n      <code>&lt;script src=&quot;//cdn.optimizely.com/js/{project_id}.js&quot;&gt;&lt;/script&gt;</code> </p>\n         </td>\n      </tr>\n\n         <tr>\n         <td align=\"left\"><b><code>x</code></b></td>\n         <td class=\"desc\">\n        <p><strong>Experiment/Variation mapping</strong>.\n      These parameters specify which experiments and corresponding variations a given visitor has seen. Every call must inform Optimizely what experiment and variation a visitor was a part of. If a user is a part of multiple experiments you can specify multiple parameters as shown below. </p>\n\n      <i>Single Experiment:</i>\n      <br />\n      <code>x{experiment_id}={varation_id1}</code>\n      <br /><br />\n      <i>Multiple Experiments:</i>\n      <br />\n      <code>x{experiment_id1}={varation_id1}&amp;x{exeriment_id2}={varation_id2}</code>\n      <br /><br />\n\n      <p>Developers must maintain their own bucket mapping by sending Optimizely the exposed experiment, as well as each variation the visitor has seen (or bucketed into). If you&#39;re tracking events for an Optimizely web project these mappings may be found in the &quot;optimizelyBuckets&quot; cookie, whose value is of the following form:\n      <code>%7B%22987654321%22%3A%221111111%22%2C%22876543210%22%3A%222222222_3333333%22%7D</code>\n      <br />\n      or, after applying <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a>.\n      <br /><br />\n      If you&#39;re ever curious what these IDs are for a given experiment, you can always find them by navigating to the Optimizely Editor, then selecting <em>Options &gt; Diagnostic Report</em>.</p>\n       </p>\n         </td>\n      </tr>\n\n        <tr>\n         <td align=\"left\"><b><code>n</code></b></td>\n         <td class=\"desc\">\n            <p><strong>Event Key</strong>. The unique string that identifies the conversion event. For web projects, this is the Custom Event To Track field.</p><img src=\"/assets/img/data/custom-event.png\" alt=\"Custom Event Field Screenshot\" style=\"max-width:56%\">\n         </td>\n      </tr>\n\n\n        <tr>\n         <td align=\"left\"><b><code>d</code></b></td>\n         <td class=\"desc\">\n            <p><strong>Account ID</strong>. Your Optimizely account ID. This can be found in <a href=\"https://app.optimizely.com/accountsettings/account/overview\">account settings</a>. </p>\n         </td>\n      </tr>\n\n              <tr>\n         <td align=\"left\"><b><code>u</code></b></td>\n         <td class=\"desc\">\n            <p><strong>User ID</strong>. A unique user identifier for tracking and bucketing.</p>\n            <p>On web, our client uses a cookie to track the user and generates a unique user_id that is also stored in the cookie. Similarly, on iOS &amp; Android the SDKs leverage a similar method for tracking users.</p>\n\n      <!--\n      <p>With other channels, the developer can choose an appropriate identifier. We recommend a universal user id -- if users are logged in a hashed email is logical, otherwise a first party cookie. </p>\n\n      <p>Lastly, it’s important to note that user_ids should not be generated haphazardly (i.e a random generator) because each unique user counts towards a monthly quota (MUVs) . If you’ve seen a user previously, it’s important to consistently use their identifier. We also don’t recommend using Personal Identifying Information (PII) as the identifier, so hashing an email address is preferred.</p>\n      -->\n\n         </td>\n      </tr>\n\n\n        <tr>\n         <td align=\"left\"><b><code>g</code></b><br /><i>(Optional)</i></td>\n         <td class=\"desc\">\n            <p><strong>Goal ID</strong>. Each goal in your project has a unique goal ID. The can be fetched through the <a href=\"/rest/reference/index.html#goals\">REST API</a>. You can send multiple goals to Optimizely in the same request. Let’s say you have the goals “landed on a page” and “cart checkout”. Both of these goals can be triggered by a single event, so you would send an array of goals IDs back to Optimizely. Ex: <code>g=12345,4324234</code>\n      </p>\n         </td>\n      </tr>\n\n           <tr>\n         <td align=\"left\"><b><code>v</code></b><br /><i>(Optional)</i></td>\n         <td class=\"desc\">\n            <p><strong>Goal Value</strong>. An integer denoting the value of your goal. Within Optimizely, every goal can have a value associated. For example, if your goal is revenue, the monetary value $5.00 is represented by <code>v=500</code>. </p>\n         </td>\n      </tr>\n\n         <tr>\n         <td align=\"left\"><b><code>time</code></b><br /> <i>(Optional)</i></td>\n         <td class=\"desc\">\n            <p><strong>Timestamp</strong>. Timestamps can be provided using the parameter <code>timestamp</code> in epoch time in seconds. This is helpful if conversions are not sent in real time and have been recorded previously. Optimizely will then correctly backdate these events. Ex: <code>time=1461708557</code> </p>\n         </td>\n      </tr>\n\n   </tbody>\n</table>\n\n\n<h2 id=\"other-considerations\">Other Considerations</h2>\n<ul>\n<li>The API will always return a 200: OK response</li>\n</ul>\n<h2 id=\"give-it-a-try\">Give it a try</h2>\n<p>Let’s build our own GET request to test this endpoint. We can confirm the data has been received by viewing the experiment results.</p>\n<ul>\n<li>In the Optimizely dashboard create a new experiment</li>\n<li>Record the project_id &amp; experiment_id, which can be found in the URL <code>https://app.optimizely.com/projects/{proejct_id}/experiments/{experiment_id}</code>.</li>\n<li>Create a new variation. In the editor click Options-&gt; Diagnostic Report. Record a variation ID from this report under Variation Summary</li>\n<li>Add a new goal with a Tracked Custom Event. Record this name as your event_key</li>\n<li>Record the goal_id by clicking the &quot;Goals&quot; tab at the project level and examining the URL <code>https://app.optimizely.com/projects/{project_id}/goals/{goal_id}</code></li>\n<li>Record your account_id from <a href=\"https://app.optimizely.com/accountsettings/account/overview\">Account Settings</a></li>\n<li>Provide a user identifier. For this purpose we can use a random string (i.e afsdfk).</li>\n<li>We now have all the information to build a request. You can also find these identifiers via the REST API.</li>\n<li>Build your request using the correct format: <code>http://{project_id}.log.optimizely.com/event?a={project_id}&amp;n={event_key}&amp;u={user_id}&amp;x{variation_id}={experiment_id}&amp;g={goal_id}&amp;d={account_id}</code>.</li>\n<li>Use your web browser to complete this request. Remember, no response will be shown. After a minute or two, you should see the conversion event in your results page!</li>\n</ul>\n<h3 id=\"appendix-advanced-\">Appendix (Advanced)</h3>\n<h4 id=\"sending-impression-data\">Sending Impression Data</h4>\n<p>Our Event API also supports sending impressions, in addition to conversion events --although this isn’t necessary unless you are building for another channel like a custom server-side solution.</p>\n<p>Within Optimizely an impression is logged when a visitor is bucketed into an experiment variation . Simply put, the visitor has met the criteria for the experiment and has been exposed to a variation. On the web, an impression would translate to a page view. This concept is a bit more complicated on other channels. For example, we decide to run an experiment on our search algorithm targeted to Japanese users. An impression is logged when a Japanese user interacts with the search algorithm and is successfully bucketed into a variation. An impression becomes a conversion event when the visitor completes a goal. In our example, the visitor uses the search algorithm to find flights and completes a booking (the conversion event).</p>\n<p>Again, our web and mobile products handle impressions out of the box, so tracking them explicitly would only be necessary when building on other channels. To do so, you must set the goal_id to the experiment_id. It’s important to note that each unique visitor will count towards your MUV limit.</p>\n<p>Example:</p>\n<pre><code> http://1234567.log.optimizely.com/event?a=1234567\n                               &amp;n=example_event\n                               &amp;u=1316548451038r0\n                               &amp;x987654321=1111111\n                               &amp;g={experiment_id}\n                               &amp;d=8511325\n</code></pre><p><br/></p>\n<p>If you have any questions, please contact <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a> for help.</p>\n"}},"export":{"index":{"template":"page-sidebar","title":"Data Export","body":"<h1 id=\"data-export-guide\">Data Export Guide</h1>\n<h2 id=\"intro\">Intro</h2>\n<p>Data Export allows developers to access all of their Optimizely event data. This data is computed daily and contain the last 24 hours of events for all A/B testing experiments in an account. The data will be written securely to an S3 bucket, which you can then programmatically access via Amazon’s APIs and a set of secure credentials provided by Optimizely.</p>\n<p>You can use Data Export to access Optimizely experiment data with your own data warehouse.</p>\n<div class=\"attention attention--warning push--bottom\">If you have any questions, please contact <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a> for help.</div>\n\n<h2 id=\"availability\">Availability</h2>\n<p>Currently, this feature is available to Enterprise customers; please reach out to your Customer Success Manager if you wish to utilize this feature. If you do not have a CSM, you may email <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a> to verify your plan and eligibility. </p>\n<h2 id=\"technical-details\">Technical Details</h2>\n<p>Data is written out for all experiments in all projects running under an Optimizely account, and one file will be written per experiment per day. Each file will contain 24 hours worth of data, thru midnight UTC of the previous night. These files are gzipped tab-delimited files with the format described below. Also, if you currently receive a data export via the Technical Support team, the data will be in the same format as the current exports, with the addition of one column indicating user_agent for web experiment data. There is also a standard header row.</p>\n<p>The S3 bucket location will follow the format: <code>/optimizely-export/{account_id}/{project_id}/yyyy/mm/dd/{file_name}</code></p>\n<p>The file name follows the format: <code>experiment_id-yyyy-mm-dd.tsv.gz</code> . Example: <code>123-2016-03-20.tsv.gz</code></p>\n<p><img alt=\"Data Export Chart\" width=\"500px\" src=\"/assets/img/data/data-export-chart.png\" /></p>\n<h3 id=\"status-file\">Status File</h3>\n<p>A status file will be provided to track the success or failure of that day&#39;s experiment event files. This file is named <code>status.yaml</code> and is included in the daily folder per project. The format contains: <code>failed_exports</code>, <code>successful_exports</code>, and a timestamp in UTC seconds since epoch. View a <b>sample YAML <a href=\"/data/sample-status.yaml\">file</a>.</b></p>\n<h3 id=\"web-dictionary\">Web Dictionary</h3>\n<h5> <a href=\"/data/web_sample.tsv\"> Sample File </a></h5>\n\n<p><h4>Definitions</h4></p>\n<table class=\"table\">\n   <tbody>\n      <tr>\n         <td align=\"left\"><b>timestamp</b></td>\n         <td class=\"desc\">\n            <p>The timestamp of when the event was received, not necessarily when it occurred in the browser. The format is YYYY-MM-DDTHH24:MI:SS.sssZ (ISO format), and the timezone is UTC.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>project_id</b></td>\n         <td class=\"desc\">\n            <p>Your Optimizely project ID on which the experiment lives.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>experiment_id</b></td>\n         <td class=\"desc\">\n            <p>The experiment ID.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>variation_id</b></td>\n         <td class=\"desc\">\n            <p>The id we use to identify the variation the user saw. This should correspond to the variation id in the Diagnostic Report in the Options menu of the Visual Editor.\n            </p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>end_user_id</b></td>\n         <td class=\"desc\">\n            <p> This is the anonymous optimizelyEndUserId cookie value.  It represents a unique visitor.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>uuid</b></td>\n         <td class=\"desc\">\n            <p> Similar in scope to end_user_id, but this is the customer&#39;s API-provided unique ID they want to track in lieu of the optimizelyEndUserId cookie value.  This was renamed from the legacy ppid on Thursday 5/19/2016.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>user_ip</b></td>\n         <td class=\"desc\">\n            <p> IP of the user associated with this tracking call.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>user_agent</b></td>\n         <td class=\"desc\">\n            <p> User-Agent header passed from the browser.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>revenue</b></td>\n         <td class=\"desc\">\n            <p> If applicable, the amount of the transaction in cents (399 corresponds to $3.99). This will only be populated with a non-zero value for revenue goals.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>event_name</b></td>\n         <td class=\"desc\">\n            <p> The event name of the tracking call, for pageviews this is the URL of the page, for engagement it is &#39;engagement&#39;, for everything else it is the custom event name.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>mobile visitors</b></td>\n         <td class=\"desc\">\n            <p> For accounts with segmentation a true or false value of whether or not the user was using a mobile device (this is an Optimizely default segment, so tablets are considered mobile here).</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>browser</b></td>\n         <td class=\"desc\">\n            <p>  For accounts with segmentation this is the browser that was being used by the user when the tracking call was made.  gc is Google Chrome, ff is Firefox, and ie is Internet Explorer.  safari, opera, and <a href=\"https://en.wikipedia.org/wiki/UC_Browser\"> ucbrowser </a> are listed as-is.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>source type</b></td>\n         <td class=\"desc\">\n            <p> For accounts with segmentation this is the value of the <a href=\"https://help.optimizely.com/hc/en-us/articles/201876450#traffic\"> traffic source </a> that the user falls into (campaign, direct, referral, search).</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>campaign</b></td>\n         <td class=\"desc\">\n            <p> The value of the campaign segment (i.e. AdWords utm_campaign parameter value) tied to this user.  Default value is &quot;none.&quot; Any fields after this are your segmented audiences or dimension names.</p>\n         </td>\n      </tr>\n   </tbody>\n</table>\n\n<p><strong>Please Note</strong>: </p>\n<ul>\n<li>Any fields after this are your segmented audiences or dimension names.</li>\n<li>Adding or removing segments or dimensions could alter the layout of the event data files. Please account for this if you build an automated import of this data. </li>\n<li>Redirect tests might have the redirect page views out of order due to the timing of the log request being sent to our system.</li>\n</ul>\n<h3 id=\"android-dictionary\">Android Dictionary</h3>\n<h5> <a href=\"/data/android_sample.tsv\"> Sample File </a></h5>\n\n<p><h4>Definitions</h4></p>\n<table class=\"table\">\n   <tbody>\n      <tr>\n         <td align=\"left\"><b>timestamp</b></td>\n         <td class=\"desc\">\n            <p>The timestamp of when the event was received, not necessarily when it occurred in the browser. The format is YYYY-MM-DDTHH24:MI:SS.sssZ (ISO format), and the timezone is UTC.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>project_id</b></td>\n         <td class=\"desc\">\n            <p>Your Optimizely project ID on which the experiment lives.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>experiment_id</b></td>\n         <td class=\"desc\">\n            <p>The experiment ID.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>variation_id</b></td>\n         <td class=\"desc\">\n            <p>The id we use to identify the variation the user saw. This should correspond to the variation id in the Diagnostic Report in the Options menu of the Visual Editor.\n            </p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>end_user_id</b></td>\n         <td class=\"desc\">\n            <p>  This is the anonymous optimizelyEndUserId value.  It represents a unique visitor.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>uuid</b></td>\n         <td class=\"desc\">\n            <p>  Similar in scope to end_user_id, but this is the customer&#39;s API-provided unique ID they want to track in lieu of the anonymous value.  This was renamed from the legacy ppid on Thursday 5/19/2016.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>user_ip</b></td>\n         <td class=\"desc\">\n            <p> IP of the user associated with this tracking call.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>revenue</b></td>\n         <td class=\"desc\">\n            <p>  If applicable, the amount of the transaction in cents (399 corresponds to $3.99). This will only be populated with a non-zero value for revenue goals.  For event_name values of &quot;mobile_session,&quot; this will also show the length of the session in seconds..</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>event_name</b></td>\n         <td class=\"desc\">\n            <p>  The event name of the tracking call.  A value of &quot;mobile_session&quot; means a new session was recorded (a session is a period of activity during which the app is foregrounded, without a break longer than 30 seconds).  A value of &quot;visitor-event&quot; shows the first time a visitor sees an experiment.  A tap or view goal will show the view name with #tap or #view appended.  For everything else it is the custom event name.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>Android App Version</b></td>\n         <td class=\"desc\">\n            <p> The numeric version of your Android app running on the user’s device.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>Android SDK Version</b></td>\n         <td class=\"desc\">\n            <p> The numeric version of Optimizely’s Android SDK running in your app on the user’s device.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>Android Device Model</b></td>\n         <td class=\"desc\">\n            <p> The device’s name as returned to Optimizely’s SDK, e.g. Google Galaxy Nexus - 4.2.2 - API 17 - 720x1280.</p>\n         </td>\n      </tr>\n   </tbody>\n</table>\n\n\n<h3 id=\"ios-dictionary\">iOS Dictionary</h3>\n<h5> <a href=\"/data/ios_sample.tsv\"> Sample File </a></h5>\n\n<p><h4>Definitions</h4></p>\n<table class=\"table\">\n   <tbody>\n      <tr>\n         <td align=\"left\"><b>timestamp</b></td>\n         <td class=\"desc\">\n            <p>The timestamp of when the event was received, not necessarily when it occurred in the browser. The format is YYYY-MM-DDTHH24:MI:SS.sssZ (ISO format), and the timezone is UTC.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>project_id</b></td>\n         <td class=\"desc\">\n            <p>Your Optimizely project ID on which the experiment lives.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>experiment_id</b></td>\n         <td class=\"desc\">\n            <p>The experiment ID.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>variation_id</b></td>\n         <td class=\"desc\">\n            <p>The id we use to identify the variation the user saw. This should correspond to the variation id in the Diagnostic Report in the Options menu of the Editor.\n            </p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>end_user_id</b></td>\n         <td class=\"desc\">\n            <p>This is the anonymous optimizelyEndUserId value set in NSUserDefaults.  It represents a unique visitor.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>uuid</b></td>\n         <td class=\"desc\">\n            <p> Similar in scope to end_user_id, but this is the customer&#39;s API-provided unique ID they want to track in lieu of the anonymous value.  This was renamed from the legacy ppid on Thursday 5/19/2016.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>user_ip</b></td>\n         <td class=\"desc\">\n            <p> IP of the user associated with this tracking call.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>revenue</b></td>\n         <td class=\"desc\">\n            <p>  If applicable, the amount of the transaction in cents (399 corresponds to $3.99). This will only be populated with a non-zero value for revenue goals.  For event_name values of &quot;mobile_session,&quot; this will also show the length of the session in seconds.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>event_name</b></td>\n         <td class=\"desc\">\n            <p> The event name of the tracking call.  A value of &quot;mobile_session&quot; means a new session was recorded (a session is a period of activity during which the app is foregrounded, without a break longer than 30 seconds).  A value of &quot;visitor-event&quot; shows the first time a visitor sees an experiment.  A tap or view goal will show the view name with #tap or #view appended.  For everything else it is the custom event name.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>iOS App Version</b></td>\n         <td class=\"desc\">\n            <p> The numeric version of your iOS app running on the user’s device.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>iOS Device Model </b></td>\n         <td class=\"desc\">\n            <p> The device’s name as returned to Optimizely’s SDK, e.g. iPhone.</p>\n         </td>\n      </tr>\n      <tr>\n         <td align=\"left\"><b>iOS SDK Version</b></td>\n         <td class=\"desc\">\n            <p> The numeric version of Optimizely’s iOS SDK running in your app on the user’s device.</p>\n         </td>\n      </tr>\n   </tbody>\n</table>\n\n<p><strong>Please Note: (web, iOS &amp; Android)</strong></p>\n<ul>\n<li>Data is de-duplicated on the results screen but not in the Data Export. Revenue goals are never de-duplicated.</li>\n</ul>\n"}}},"extensions":{"index":{"template":"page-sidebar","title":"Extensions","body":"<h2 class=\"js-toc-ignore\">Extensions</h2>\n\n<p>Widgets are reusable templates for making changes in the visual editor. A developer can build a widget with HTML, CSS, and JavaScript. Then, a non-technical user can insert the widget in the editor and tweak parameters. For example, a developer could build a carousel widget styled for a homepage and coded to rotate between images, and then a merchandiser could insert it and choose the right images for a specific campaign.</p>\n<p>You can create a widget under <strong>Implementation &gt; Widgets</strong>. Each widget has a unique <strong>ID</strong> that identifies it on the page. If the same widget is inserted in multiple places, the code will only be included once and each instance will call into it by ID. Widgets can be inserted on multiple pages, but you can choose one <strong>Editor URL</strong> that will appear in the widget builder. The <strong>Name</strong> and <strong>Description</strong> are human-readable text in the Optimizely interface.</p>\n<p><img src=\"/assets/img/js/widget-builder.png\" alt=\"\"></p>\n<h3 id=\"fields\">Fields</h3>\n<p>Once you create the widget, you&#39;ll land in the Widget Builder. In the left sidebar, you can add optional fields. Each field defines a property that can be customized on the widget. For example, on a popup, you could provide fields to customize the message, the call to action, the width and height, and the timing of when it should appear.</p>\n<p>Each field requires an API name, which you can use to reference it in HTML. For example, if you create a field with the <strong>API Name</strong> &quot;height&quot;, you can reference it in HTML as <code>{{ widget.height }}</code> or in JS as <code>widget.height</code>. The <strong>Label</strong> is a human readable name like &quot;Popup Height&quot;, and you can add an optional <strong>Default Value</strong> like <code>400</code>.</p>\n<p>You can use the widget fields and define its behavior by using the top code boxes.</p>\n<h3 id=\"html\">HTML</h3>\n<p>The body of the widget can be written in the HTML box. You can write any HTML here and then decide where it gets injected in the Apply JS section. In addition to vanilla HTML, you can use <a href=\"http://mustache.github.io/mustache.5.html\">mustache syntax</a> to add more advanced logic like loops and conditionals.</p>\n<p>You can reference field values by using the API name on the widget object like <code>{{ widget.title }}</code>. For non-escaped values like an HTML or rich text field, use triple brackets like <code>{{{ widget.contents }}}</code>.</p>\n<h5 id=\"example\">Example</h5>\n<pre><code>&lt;div class=&quot;banner&quot; style=&quot;background-color: {{widget.color}}&quot;&gt;\n  {{{ widget.text }}}.\n  &lt;a href=&quot;{{widget.link}}&quot;&gt;{{{ widget.link_text }}}&lt;/a&gt;\n&lt;/div&gt;\n</code></pre><h3 id=\"css\">CSS</h3>\n<p>Some widgets may not need any CSS because they inherit styles from the page itself. However, you can add additional styling in the CSS box. This will be injected on the page through a <code>&lt;style&gt;</code> tag.</p>\n<p>Note that CSS doesn&#39;t support field values, so if you want to use those in styling you can do it directly in the HTML via inline styles, e.g. <code>&lt;div class=&quot;banner&quot; style=&quot;background-color: {{widget.color}}&quot;&gt;</code>.</p>\n<h5 id=\"example\">Example</h5>\n<pre><code>.banner {\n  color: white;\n  padding: 10px;\n  position: fixed;\n  top: 0px;\n  z-index: 100000000;\n  width: 100%;\n  text-align: center;\n  height: 45px;\n}\n\n.banner a {\n  text-decoration: underline;\n  color: white;\n}\n\nbody {\n margin-top: 45px;\n}\n</code></pre><h3 id=\"apply-js\">Apply JS</h3>\n<p>The Apply JS code is used to inject the widget onto the page. At a minimum, it should take the HTML and insert it at a selector (which can itself be specified as a field, or hard-coded). You can use <a href=\"#waitForElement\">utilities like waitForElement</a> to <a href=\"#timing\">control the timing</a> of how your code runs. Some widgets will also have more complex logic, like calling out to an external service.</p>\n<p>The scope of the apply JS code includes:</p>\n<ul>\n<li><code>widget</code>: the configuration of the widget, including all fields as properties e.g. <code>widget.height</code></li>\n<li><code>widget.$html</code>: the compiled HTML</li>\n<li><code>widget.$render</code>: a function to compile the HTML template on the fly, useful when dealing with asynchronous data (see below)</li>\n<li><code>widget.$id</code>: the ID of the widget, e.g. <code>top_banner</code></li>\n<li><code>widget.$instance</code>: a unique identifier for a specific instance of the widget. If the widget is used more than once on a page, each one will have its own instance. Example: <code>AE8D40E3-785E-4A31-A9DF-4ED6E0681366</code></li>\n</ul>\n<p>When all the template data is available immediately, <code>widget.$html</code> will automatically render the template into final HTML. But when you want to use a widget with asynchronous data, e.g. based on an AJAX request, you can use <code>widget.$render</code> to compile the HTML template with a specific context. The render function takes an object with each value to pass through to the template.</p>\n<h5 id=\"examples\">Examples</h5>\n<pre><code class=\"lang-js\">var utils = window.optimizely.get(&#39;utils&#39;);\n\n// Insert at a hard-coded position\n$(document).ready(function() {\n  $(&#39;body&#39;).prepend(widget.$html);  \n})\n\n// Let the user choose the selector\nutils.waitForElement(widget.selector).then(function() {\n  $(widget.selector).append(widget.$html)  \n})\n\n// Render using asynchronous data\nrecommender.fetchRecommendations(productId).then(function(recos) {\n  var products = recos.slice(0, widget.max);\n  var html = widget.$render({\n    widget: widget,\n    products: products,\n  });\n  $(widget.selector).after(html);\n}\n</code></pre>\n<h3 id=\"undo-js\">Undo JS</h3>\n<p>Undo JS is used to &quot;clean up&quot; after a widget. It&#39;s used in the editor, when changing field values or removing an existing widget. Undo JS should remove the element and any other side-effects.</p>\n<p>One way to write undo JS is to use the <code>widget.$instance</code> value. For example, you could create a widget with HTML starting like this:</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;banner&quot; data-widget-instance=&quot;{{widget.$instance}}&quot;&gt;\n</code></pre>\n<p>Then remove it using Undo JS like:</p>\n<pre><code class=\"lang-js\">$(&quot;[data-widget-instance=&quot; + widget.$instance + &quot;]&quot;).remove();\n</code></pre>\n"}},"index":{"template":"page-main--home","title":"Optimizely Developers","body":""},"integrations":{"index":{"template":"page-sidebar","title":"Integrations","body":"<h1 id=\"integrations-developer-guide\">Integrations Developer Guide</h1>\n<p><em>Welcome! This page walks you through everything you need to build an integration using Optimizely APIs.</em></p>\n<p>Optimizely integrates with more than <a href=\"http://optimizely.com/partners/technology\">30 Technology Partners</a> including analytics solutions, data management platforms, content management systems, e-commerce platforms, conversion tracking solutions, and more. Many of these integrations are built entirely using public Optimizely APIs. On this page, you’ll find some common use cases for integrating with Optimizely and all the developer resources you need to build an integration.</p>\n<p>Are you a prospective Technology Partner interested in building an integration with Optimizely? Please read the <a href=\"#technology-partners\">Technology Partners</a> section to understand the required steps to get your integration built, approved, and launched by Optimizely.</p>\n<p>Are you a current Optimizely customer interested in building a custom integration for your own use case? Jump straight to <a href=\"#integration-types\">Integration Types</a> to understand the different ways of integrating with Optimizely.</p>\n<p>At any time, if you have questions about building integrations please email <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>.</p>\n<h2 id=\"technology-partners\">Technology Partners</h2>\n<p>If you would like to partner with Optimizely to help support your integration, we highly recommend you apply for the <a href=\"http://optimizely.com/partners/technology/join\">Technology Partner Program</a>. Becoming a partner includes many benefits including hands-on developer support and marketing benefits to help promote your integration to Optimizely customers. For more information about requirements and benefits of the Technology Partner Program <a href=\"http://pages.optimizely.com/rs/361-GER-922/images/Optimizely%20Technology%20Partners.pdf\" target=\"_blank\">click here</a>.</p>\n<h3 id=\"create-an-optimizely-account\">1. Create an Optimizely developer account</h3>\n\n<p>If you don&#39;t have an Optimizely developer account, just sign up for a <a href=\"https://www.optimizely.com/?modal=devsignup\">free developer account</a>. This account will give you access to <a href=\"https://help.optimizely.com/hc/en-us/articles/200040055-Optimizely-Pricing-Plan-changes-upgrading-and-downgrading#comparison\">the full set of Optimizely features</a> and API access, but with limited traffic allocation. No credit card required.</p>\n<h3 id=\"apply-to-technology-partner-program\">2. Apply to Technology Partner Program</h3>\n\n<p>Please fill out the <a href=\"https://www.optimizely.com/partners/technology/join/\" target=\"_blank\">Technology Partner Program form</a> to apply for the program. We recommend that you apply for the program before you start developing an integration so we can provide you with appropriate guidance using the Optimizely APIs and plan for launch.</p>\n<h3 id=\"track-your-integration\">3. Register your integration</h3>\n\n<p>We require all Technology Partners to formally register their integration to Optimizely so we can better track which APIs are most important to our partners. Registering your integration is easy. If your integration is using the REST API, we require you use OAuth 2.0 authentication and register your integration as an OAuth client . If your integration is using the JavaScript API, we also require you to make a one-line API call. The steps to register your integration are described in the <a href=\"#register-integration\">Register your integration section</a>.</p>\n<h3 id=\"build-your-integration\">4. Build your integration</h3>\n\n<p>There are many ways to integrate with Optimizely depending on your needs. To decide how to best integrate with our platform, please see the chart of <a href=\"#integration-types\">Integration Types</a> below which includes some common types of integrations built by customers and partners. Each integration type includes a step-by-step guide including example code that you can use to build the integration. If none of these integration types meet your needs, please refer to our <a href=\"/rest\">REST API documentation</a>.</p>\n<h3 id=\"submit-integration-for-qa\">5. Submit integration for QA</h3>\n\n<p>Our team is eager to provide feedback and make sure the integration works as expected. Please go through the Integration Checklist before submitting your integration to <a href=\"mailto:techpartners@optimizely.com\">techpartners@optimizely.com</a> to make the review process as quick and smooth as possible. You can find the checklist in the <a href=\"#integration-checklist\">Integration Checklist</a> section.</p>\n<h3 id=\"promote-your-integration\">6. Promote your integration</h3>\n\n<p>After Optimizely has tested and approved your integration, you can work with your Partner Manager to get your integration listed in the <a href=\"http://optimizely.com/partners/technology\">Technology Partner Directory</a>. As a Technology Partner you will also receive a Marketing Playbook that provides detailed guidance on the best way to promote your integration to Optimizely customers.</p>\n<p>If you have any questions about becoming an Optimizely Technology Partner, please email <a href=\"mailto:techpartners@optimizely.com\">techpartners@optimizely.com</a>.</p>\n<h2 id=\"integration-types\">Integration Types</h2>\n<p>Integrations with Optimizely typically fall into one of the following categories. For each category we&#39;ve included some examples as well as a link to an implementation guide with step-by-step instructions on how to build the integration.</p>\n<style>\n  table {\n    vertical-align: top;\n    border: 1px solid black;\n  }\n  td {\n    padding: 5px;\n    border: 1px solid black;\n  }\n  th {\n    background-color: #00415d;\n    color: white;\n    text-align: left;\n    padding: 5px;\n    border: 1px solid black;\n  }\n</style>\n\n<table>\n  <tr>\n    <th>\n      Category\n    </th>\n    <th>\n      Examples\n    </th>\n    <th>\n      Description\n    </th>\n    <th>\n    </th>\n  </tr>\n  <tr>\n    <td width=120>\n      <em>Analytics</em>\n    </td>\n    <td width=120>\n      <a href=\"http://optimizely.com/partners/technology/sitecatalyst\">Adobe Analytics</a><br>\n      <a href=\"http://optimizely.com/partners/technology/google-analytics\">Google Analytics</a><br>\n      <a href=\"http://optimizely.com/partners/technology/mixpanel\">Mixpanel</a>\n    </td>\n    <td>\n      Analytics integrations allow customers to track Optimizely experiments in an external analytics tool.  With the flip of a switch, Optimizely can append experiment data to analytics tracking code, so customers can see the impact of their experiments in their analytics tool.\n    </td>\n    <td width=150>\n      <a href=\"#analytics\">Implementation Guide</a>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <em>Audiences</em>\n    </td>\n    <td>\n      <a href=\"http://optimizely.com/partners/technology/bluekai\">BlueKai</a><br>\n      <a href=\"http://optimizely.com/partners/technology/demandbase\">Demandbase</a><br>\n      <a href=\"http://optimizely.com/partners/technology/tealium\">Tealium</a>\n    </td>\n    <td>\n      Audience integrations allow customers to target a specific audience based on data from an external source.  With a simple drag-and-drop interface, customers can personalize content and experiments based on 3rd party demographic data such as gender, location, weather, and age, or 1st party behavioral data such as buying intent, lifetime value, <a href=\"https://www.optimizely.com/optimization-glossary/shopping-cart-abandonment/\" target=\"_blank\">cart abandonment</a>, and more.\n    </td>\n    <td>\n      <a href=\"#audiences\">Implementation Guide</a>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <em>Uploaded Lists</em>\n    </td>\n    <td>\n      <a href=\"http://optimizely.com/partners/technology/salesforce\">Salesforce</a><br>\n      <a href=\"http://optimizely.com/partners/technology/marketo\">Marketo</a>\n    </td>\n    <td>\n      Uploaded List integrations allow customers to upload a list of user identifiers (e.g. cookies, query parameters, or other user identifiers) to Optimizely from a 3rd party application, which can be used to target experiments and segment results. Unlike audience integrations which operate client-side, user list integrations are implemented by a server-to-server exchange.\n    </td>\n    <td>\n      <a href=\"#uploaded-lists\">Implementation Guide</a>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <em>Content Management</em>\n    </td>\n    <td>\n      <a href=\"http://optimizely.com/partners/technology/wordpress\">WordPress</a><br>\n      <a href=\"http://optimizely.com/partners/technology/parsely\">Parse.ly</a>\n    </td>\n    <td>\n      Content Management integrations allow customers to utilize the full power of Optimizely directly from a platform that manages content.  Customers can create, configure, and run experiments directly from their content platform interface without having to login to Optimizely.\n    </td>\n    <td>\n      <a href=\"#content-management\">Implementation Guide</a>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <em>Conversion Tracking</em>\n    </td>\n    <td>\n      <a href=\"http://optimizely.com/partners/technology/dialogtech\">DialogTech</a><br>\n      <a href=\"http://optimizely.com/partners/technology/freespee\">FreeSpee</a><br>\n      <a href=\"http://optimizely.com/partners/technology/avanser\">AVANSER</a>\n    </td>\n    <td>\n      Conversion Tracking integrations allow customers to use custom events (e.g. phone calls) as a goal for their experiments, as opposed to default goals (eg. clicks or pageviews).  These integrations use Optimizely’s custom event goals functionality to track conversions.\n    </td>\n    <td>\n      <a href=\"#conversion-tracking\">Implementation Guide</a>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <em>Snippet Installation</em>\n    </td>\n    <td>\n      <a href=\"http://optimizely.com/partners/technology/demandware\">Demandware</a><br>\n      <a href=\"http://optimizely.com/partners/technology/episerver\">EPiServer</a>\n    </td>\n    <td>\n      Snippet integrations allow users to implement the Optimizely functionality on their website without the help of a developer to add the Optimizely snippet.\n    </td>\n    <td>\n      <a href=\"#snippet-installation\">Implementation Guide</a>\n    </td>\n  </tr>\n</table>\n\n<p><br></p>\n<p>Not seeing the platform you’re looking for? Check out the <a href=\"https://help.optimizely.com/hc/en-us/articles/203729580\" target=\"_blank\">full list of platforms</a> that Optimizely integrates with.</p>\n<h2 id=\"integration-checklist\">Integration Checklist</h2>\n<p>We will review Optimizely Integrations submitted to the <a href=\"mailto:techpartners@optimizely.com\">techpartners@optimizely.com</a>.</p>\n<p>Follow this guide to help your integration go through the review process quickly and smoothly. We&#39;ve highlighted the most important elements for your integration listing.</p>\n<p>This guide does not replace or supersede our <a href=\"https://www.optimizely.com/terms-development/\">Developer Policy</a>, which must be adhered to at all times. The Developer Policy is listed here: <a href=\"https://www.optimizely.com/terms-development/\">https://www.optimizely.com/terms-development/</a>.</p>\n<h3 id=\"qa-details\">QA details</h3>\n<h4 id=\"sandbox-account\">Sandbox account</h4>\n<p>Set up a working account that can be used by Optimizely employees to do functional testing.</p>\n<h4 id=\"instructions\">Instructions</h4>\n<p>Provide high level testing instructions for an Optimizely employee to QA your integration. During the QA process, our engineers check the expected behaviour. We aim to partner with great products, so we also expect to not encounter serious bugs in the product during QA.</p>\n<h3 id=\"listing\">Listing</h3>\n<h4 id=\"appropriate-name\">Appropriate name</h4>\n<p>Your integration&#39;s name should not infringe upon a trademark or copyright for any other products or services. Also, if you have any reference to Optimizely in the Integration name, we will ask you to remove it. You can find our <a href=\"http://design.optimizely.com/\">brand guidelines</a> here: <a href=\"http://design.optimizely.com/\">http://design.optimizely.com/</a>. For an integration we recommend using your product name or a combination of your company name and your product name. Examples:</p>\n<ul>\n<li>Your company name is XYZ and your product name is Product:\nXYZ Product</li>\n<li>Your company name (XYZ) is the same as your product:\nXYZ</li>\n</ul>\n<h3 id=\"logos\">Logos</h3>\n<p>Optimizely needs two versions of your logo:</p>\n<ul>\n<li>One for the partner directory:\n<a href=\"https://www.optimizely.com/partners/technology/\">https://www.optimizely.com/partners/technology/</a></li>\n<li>One for the integrations dashboard:\n<img src=\"/assets/img/integrations/checklist.png\"></li>\n</ul>\n<p>The following guidelines should be followed when creating an integration of application logo that will appear in Optimizely.</p>\n<h4 id=\"designing-the-logo-\">Designing the Logo:</h4>\n<ul>\n<li>Avoid putting an edge or border around the image</li>\n<li>Avoid drop shadows if possible. It&#39;s OK to use small shadows for contrast.</li>\n<li>Make the logo face the screen. Don&#39;t put perspective on it.</li>\n<li>Logo should be able to be shown on both white and light grey backgrounds.</li>\n<li>Logo should be square with no rounded edges.</li>\n<li>Logo should be a PNG file</li>\n</ul>\n<h4 id=\"optimizely-logos\">Optimizely Logos</h4>\n<ul>\n<li>Don&#39;t use the Optimizely logo (original or modified) in any logo.</li>\n<li>Don&#39;t use any icons or logos that can be found in the Optimizely application, as this could confuse users.</li>\n</ul>\n<h4 id=\"logo-for-integrations-dashboard\">Logo for integrations dashboard</h4>\n<ul>\n<li>Logo should be exactly 200 x 200 px.</li>\n</ul>\n<h4 id=\"logo-for-partner-directory\">Logo for partner directory</h4>\n<ul>\n<li>Minimum size for the logo: 280 x 80 px</li>\n<li>Maximum size for the logo: 500 x160 px</li>\n</ul>\n<h3 id=\"installation-link\">Installation link</h3>\n<p>This is how customers install your integration, so it&#39;s important to make it as easy as possible. It should contain:</p>\n<ul>\n<li>Information about your services</li>\n<li>Information about how the integration interacts with Optimizely</li>\n</ul>\n<h3 id=\"customer-support-link\">Customer support link</h3>\n<p>As part of your submission to the Directory, you agree to &quot;Keep your Integration updated and your support channel active&quot; so please ensure that the link you provide is to an active and responsive support channel.</p>\n<h3 id=\"customer-support-email\">Customer support email</h3>\n<p>Please make sure this is an email address that you check regularly and is clearly connected to your app.</p>\n<h3 id=\"registering-your-app\">Registering your app</h3>\n<p>Make sure your integration activity is visible to Optimizely. Go through the steps described here:</p>\n<p><a href=\"http://developers.optimizely.com/integrations/#register-integration\">http://developers.optimizely.com/integrations/#register-integration</a></p>\n<h3 id=\"submit-all-information\">Submit all information</h3>\n<p>Use all the information from above to fill in this <a href=\"https://goo.gl/YhGzmd\">form</a>.</p>\n<h2 id=\"register-integration\">Registration</h2>\n\n<p>We require all partners that have an integration to register an OAuth 2.0 client. Using OAuth 2.0 provides the following benefits:</p>\n<ul>\n<li>We can better support your integration and our mutual customers</li>\n<li>It will allow us to better understand which functionality has made the biggest impact on the customer experience</li>\n<li>It gives us the ability to determine where to invest more time for improvements</li>\n<li>For integrations that use the REST API, OAuth 2.0 provides a better, more transparent customer experience</li>\n</ul>\n<p><strong>If your integration does not use the REST API, creating an OAuth 2.0 client is still a required step.</strong></p>\n<p>If you have questions about registering your integration, please email <a href=\"mailto:integrationsupport@optimizely.com\">integrationsupport@optimizely.com</a>.</p>\n<p>The following step-by-step guide describes how register an OAuth 2.0 client.</p>\n<h3 id=\"1-create-an-oauth-2-0-client-for-your-integration\">1. Create an OAuth 2.0 client for your integration</h3>\n<p>Sign in to the account and navigate to <a target=\"_blank\" href=\"https://app.optimizely.com/accountsettings/apps/developers\">https://app.optimizely.com/accountsettings/apps/developers</a>.</p>\n<p>On this page, click on &quot;Register a new application&quot;.</p>\n<p><img src=\"/assets/img/integrations/tracking_register.png\"></p>\n<p>Fill in the fields with the following values:</p>\n<ul>\n<li><em>Application Name</em>: the name of your integration</li>\n<li><em>Redirect URI</em>: your homepage</li>\n<li><em>Client Type</em>: can be Public or Confidential, depending on your application. If you integration only uses the JavaScript API, use &quot;Public&quot;. The client type for an integration that uses the REST API depends on your setup. You can find more information about client types <a href=\"http://localhost:4009/rest/reference/index.html#grant-types\">here</a>.</li>\n</ul>\n<p>Click <em>Apply</em>.</p>\n<h3 id=\"2-implement-api-specific-requirements\">2. Implement API specific requirements</h3>\n<p><span id='rest-registering'><strong>Integrations that use the REST API</strong></span><br>\nWe require every integration that uses the REST API to authenticate with the OAuth 2.0 client that you created in the previous step. Authentication with an OAuth 2.0 client is described in the <a href=\"/rest/reference/index.html#authorization\">REST API reference</a>.</p>\n<p><span id='js-registering'><strong>Integrations that use the JavaScript API</strong></span><br>\nIf your integration is using the JavaScript API, we also require you to make a one-line API call at the top of your integration&#39;s JavaScript:</p>\n<pre><code class=\"lang-javascript\">window.optimizely = window.optimizely || [];\nwindow.optimizely.push({\n &#39;type&#39;: &#39;integration&#39;,\n &#39;OAuthClientId&#39;: 5352110138 // This is the OAuth Client ID you&#39;ve copied in the previous step.\n});\n</code></pre>\n<p>The client ID used in the on-line API call can be found here:</p>\n<p><img src=\"/assets/img/integrations/tracking_client_id.png\"></p>\n<h2 id=\"analytics\">Analytics</h2>\n<p><em>Analytics integrations</em> allow customers to track Optimizely experiments in an external analytics tool.  With the flip of a switch, Optimizely can append experiment data to analytics tracking code, so customers can see the impact of their experiments in their analytics tool. The following step-by-step guide describes how to implement an analytics integration.</p>\n<h3 id=\"analytics-prerequisites\">Prerequisites</h3>\n\n<ul>\n<li>Your analytics platform can track Optimizely experiment and variation names</li>\n<li>Basic JavaScript skills</li>\n</ul>\n<h3 id=\"add-the-snippet\">1. Add the snippet</h3>\n\n<p>To get started, install the Optimizely snippet on your test page. This is the page you’ll test your integration on. The snippet should be added as high up in the &lt;head&gt; tag as possible. To learn how to install the Optimizely snippet, check out this <a target=\"_blank\" href=\"https://help.optimizely.com/hc/en-us/articles/200040095-Implement-the-Optimizely-Snippet\">step-by-step</a> guide in our knowledge base.</p>\n<h3 id=\"create-and-start-an-experiment\">2. Create and start an experiment</h3>\n\n<p>Create an experiment within your Optimizely account that runs on the test page you have created in Step 1. Save your experiment without making any changes. Click Start Experiment.</p>\n<p>To verify that your experiment is running, do a hard refresh on the test page outside of the Editor. Open the JavaScript console and execute optimizely.activeExperiments. When your experiment is live, the console will output an array with your Experiment ID. It may take up to 2 minutes for the experiment to fully upload to your test page. If you don’t see the Experiment ID appear, wait for a few seconds, then execute the call again.</p>\n<p><img src=\"/assets/img/integrations/active_experiments.png\"></p>\n<h3 id=\"write-the-integration-code\">3. Write the integration code</h3>\n\n<p>To integrate with the analytics platform, you’ll need the Optimizely Experiment and Variation names that are running on the test page. This section describes the JavaScript methods you’ll need to retrieve this information:</p>\n<ul>\n<li><code>window[&quot;optimizely&quot;] &amp;&amp; window[&quot;optimizely&quot;][&quot;data&quot;]</code>\nThis line makes sure that Optimizely is loaded on the page.</li>\n<li><code>window[&#39;optimizely&#39;].data.state.activeExperiments</code>\nThis is an array of experiment ids for all the active experiments.</li>\n<li><code>window[&#39;optimizely&#39;].data.state.variationNamesMap</code>\nThis is a hash table whose keys are the experiment ids of experiments running for the visitor (including inactive experiments for which the user has been bucketed), and whose values are the variation names for those experiments.</li>\n<li><code>window[&#39;optimizely&#39;].data.experiments[experimentId].name</code>\nThis is the name of the experiment specified with the experimentId variable.</li>\n<li><code>window[&quot;optimizely&quot;].data.state.redirectExperiment</code>\nAn object that if defined means a redirect experiment occurred on the previous page.</li>\n</ul>\n<p>Implement these methods below the Optimizely snippet on your test page. By combining the methods, you will be able to access all the experiment names and variation names. You can read more about the above methods in the <a href=\"/javascript/reference/index.html#the-data-object\">JavaScript API reference</a>.</p>\n<pre><code class=\"lang-xml\">&lt;script&gt;\nif (window[&#39;optimizely&#39;] &amp;&amp; window[&#39;optimizely&#39;][&#39;data&#39;]) {\n  var activeExperiments = window[&#39;optimizely&#39;].data.state.activeExperiments;\n  if(window[&#39;optimizely&#39;].data.state.redirectExperiment) {\n    var redirectExperimentId = window[&#39;optimizely&#39;].data.state.redirectExperiment.experimentId;\n    var index = window[&#39;optimizely&#39;].data.state.activeExperiments.indexOf(redirectExperimentId);\n    if(index === -1){\n      activeExperiments.push(redirectExperimentId);\n    }\n    // Some analytics platforms have the ability to fix referrer values. Use optimizely.data.state.redirectExperiment.referrer to fix the referrer value here.\n\n  }\n\n  for (var i = 0; i &lt; activeExperiments.length; i++) {\n    var experimentId = activeExperiments[i];\n    var variationName = window[&#39;optimizely&#39;].data.state.variationNamesMap[experimentId];\n    var experimentName = window[&#39;optimizely&#39;].data.experiments[experimentId].name;\n    // Use the experimentName and variationName value here to send information to your analytics platform\n\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>Where indicated in the above code snippet, implement the platform specific code.</p>\n<h3 id=\"qa-integration\">4. QA integration</h3>\n\n<p>When the integration is successfully implemented, check your network traffic to see if all the data is correctly send to the analytics platform. All the active experiments on the page in addition to a redirect experiment should be visible in the network traffic.</p>\n<h2 id=\"mobile-analytics\">Mobile analytics</h2>\n<p>Mobile analytics integrations allow customers to track Optimizely experiments in an external analytics tool. Optimizely can append experiment data to analytics tracking code, so customers can see the impact of their experiments in their analytics tool. The following step-by-step guide describes how to implement an analytics integration for mobile through Optimizely provided plugins.The plugins allow you to capture information about which experiment is running and which variant is chosen for a visitor.</p>\n<h3 id=\"analytics-for-mobile-prerequisites\">Prerequisites</h3>\n\n<ul>\n<li>Your analytics platform can track Optimizely experiment and variation names by calling a SDK function or a REST API endpoint</li>\n<li>The ability to create an Android or iOS library</li>\n</ul>\n<h3 id=\"create-test-app\">1. Create a test application and install the Optimizely SDK</h3>\n\n<p>To get started, create a test application and install the Optimizely SDK. This is the app you’ll test your integration on. To learn how to install the Optimizely SDK, check out this <a href=\"https://help.optimizely.com/hc/en-us/articles/202296994-Get-Started-on-Mobile-Optimization#prereqs\">step-by-step</a> guide in our knowledge base.</p>\n<h3 id=\"declare-dependency\">2. Declare a dependency on the Optimizely SDK</h3>\n\n<p>To get started, declare a dependency on the Optimizely SDK in your test app. Declaring the dependency in Android happens by adding <code>provided (&quot;com.optimizely:optimizely-core:1.2.1+@aar&quot;) {transitive = true}</code>to your build.gradle. You can read more about using Gradle to declare the dependency in the <a href=\"/android/getting-started/index.html#using-gradle\">developer documentation for Android</a>. For iOS you need to declare the dependency by adding <code>pod &#39;Optimizely-iOS-SDK&#39;</code> to your CocoaPods Podfile. You can read more about using CocoaPods to declare the dependency in the <a href=\"/ios/getting-started/index.html#using-cocoapods\">developer documentation for iOS</a>.</p>\n<h3 id=\"implement-the-optimizely-plugin\">3. Implement the Optimizely plugin</h3>\n\n\n<h4 id=\"android\">Android</h4>\n<p>The Optimizely Android SDK includes an interface called &quot;OptimizelyPlugin&quot; that you will need to implement. This is an example implementation of the OptimizelyPlugin interface:</p>\n<pre><code class=\"lang-java\">package com.analytics;\n\nimport com.optimizely.Optimizely;\nimport com.optimizely.integration.DefaultOptimizelyEventListener;\nimport com.optimizely.integration.OptimizelyEventListener;\nimport com.optimizely.integration.OptimizelyExperimentData;\nimport com.optimizely.integration.OptimizelyPlugin;\n\nimport org.json.JSONObject;\n\nimport java.util.List;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.view.View;\n\n/**\n * Example Plugin\n */\npublic class ExamplePlugin implements OptimizelyPlugin {\n\n    @NonNull\n    @Override\n    public String getPluginId() {\n        return &quot;com.example.plugin&quot;;\n    }\n\n    /**\n     * Declare all required permissions here. Nullable lists are okay for the empty set of permissions.\n     * @param context the context of the app in case the permission is based on the package name\n     *                or otherwise declared via manifest.\n     * @return a list of permissions required or null if no permissions are necessary\n     */\n    @Nullable\n    @Override\n    public List&lt;String&gt; getRequiredPermissions(Context context) {\n        return null; // Declare required Android permissions\n    }\n\n    /**\n     * Declare all dependencies on other plugins here.\n     * @return\n     */\n    @Override\n    public List&lt;String&gt; getDependencies() {\n        return null; // Declare any dependencies on other Optimizely Plugins\n    }\n\n    /**\n     * @return a touch listener which will receive all touch events that occur on tracked views\n     */\n    @Nullable\n    @Override\n    public View.OnTouchListener getOnTouchListener() {\n        return null; // If your plugin wants to handle touch events, return an OnTouchListener here.\n    }\n\n    /**\n     * @return a lifecycle callbacks that will receive all Android lifecycle events that occur\n     */\n    @Nullable\n    @Override\n    public Application.ActivityLifecycleCallbacks getActivityLifecycleCallbacks() {\n        // If your plugin wants to be notified of Activity start/stop, return an\n        // ActivityLifecycleCallbacks instance here.\n        return null;\n    }\n\n    /**\n     * @return a listener that will receive all events emitted by Optimizely and its plugins\n     */\n    @Nullable\n    @Override\n    public OptimizelyEventListener getOptimizelyEventsListener() {\n        return mListener;\n    }\n\n    /**\n     * Initialize the plugin and start any listeners or threads.\n     * @param optimizely reference to the Optimizely singleton so that services can be accessed\n     * @return true if the plugin was started successfully, false otherwise.\n     */\n    @Override\n    public boolean start(Optimizely optimizely, JSONObject config) {\n        return true;\n    }\n\n    /**\n     * Stop the plugin and clean up any objects that are owned by the plugin.\n     */\n    @Override\n    public void stop() {\n\n    }\n\n    /**\n     * Interface for clients which want notifications when various Optimizely events occur.\n     * Listeners are weakly held, so you may need to re-register your listeners if you don&#39;t\n     * hold onto them.\n     */\n    private OptimizelyEventListener mListener = new DefaultOptimizelyEventListener() {\n        /**\n         * Notification that is fired whenever the user&#39;s experience has been affected\n         * by an experiment. This means that:\n         *   a live variable has been evaluated,\n         *   a code block has been evaluated,\n         *   or a visual change has been seen by the user.\n         * @param experimentState the current running state of the experiment.\n         */\n        @Override\n        public void onOptimizelyExperimentVisited(OptimizelyExperimentData experimentState) {\n            String propertyName = &quot;Optimizely: &quot; + experimentState.experimentName;\n            String propertyValue = experimentState.variationName;\n            // mySDK.setGlobalProperty(propertyName, propertyValue);\n        }\n\n        /**\n         * Notification that a goal has been triggered.\n         * @param description A description of the goal event\n         * @param affectedExperiments the experiments that are active and tracking this goal\n         */\n        @Override\n        public void onGoalTriggered(String description, List&lt;OptimizelyExperimentData&gt; affectedExperiments) {\n            String eventName = &quot;Optimizely: &quot; + description;\n\n            for (OptimizelyExperimentData experimentData : affectedExperiments) {\n                String propertyName = &quot;Optimizely: &quot; + experimentData.experimentName;\n                String propertyValue = experimentData.variationName;\n                // mySDK.setEventProperty(propertyName, propertyValue);\n            }\n            // mySDK.trackEvent(eventName);\n        }\n    };\n}\n</code></pre>\n<p>The plugin framework offers a lot of functionality, but for most analytics integrations the functions in the OptimizelyEventListener shown in the example are sufficient.</p>\n<h5 id=\"onoptimizelyexperimentvisited\">onOptimizelyExperimentVisited</h5>\n<p>The function <code>onOptimizelyExperimentVisited</code> is triggered every time an experiment is shown to a user of the app. Every experiment has an ID and a name.The user will be randomly assigned to a variation of the experiment which also has an ID and a name. For the analytics integration, you&#39;ll want to use the experiment name and variation name.\nIn the example, the experiment name is stored in the String <code>propertyName</code> and the variation name is stored in <code>propertyValue</code>. Both the experiment name and variation name are assigned to a user. Use your analytics SDK or REST API to append this metadata to a user. An example of how to send the data with the Google Analytics Android SDK is by using <a href=\"https://developers.google.com/analytics/devguides/collection/android/v4/customdimsmets\">custom dimensions</a>.</p>\n<h5 id=\"ongoaltriggered\">onGoalTriggered</h5>\n<p>The <code>onGoalTriggered</code> function is called everytime a goal that has been set in Optimizely is triggered by the user of the app. The <code>onGoalTriggered</code> function can be used to forward events to your SDK or REST API.</p>\n<h4 id=\"ios\">iOS</h4>\n<p>The Optimizely iOS SDK includes a interface called &quot;OptimizelyPlugin&quot; that you will need to implement. This is an example implementation of the OptimizelyPlugin interface:</p>\n<pre><code>//\n//  ExamplePlugin.m\n//\n//  Created by Josiah Gaskin on 10/8/15.\n//\n\n#import &lt;Foundation/Foundation.h&gt;\n#import &lt;Optimizely/OptimizelyPlugin.h&gt;\n\n@interface ExamplePlugin : NSObject&lt;OptimizelyPlugin&gt;\n\n@end\nOptimizelyRegisterPlugin(ExamplePlugin)\n\n@implementation ExamplePlugin\n\n/**\n * Return the plugin ID\n */\n- (NSString *)pluginId {\n    return @&quot;com.example.analytics&quot;;\n}\n\n/*\n * iOS plugins are expected to handle their own permission requests appropriately\n */\n\n/**\n * Declare all dependencies on other plugins here.\n * @return a list of plugin identifiers\n */\n- (NSSet *)getDependencies {\n    return nil;\n}\n\n/**\n * @return true if this plugin should receive and handle touch events\n */\n- (BOOL)shouldHandleTouchEvents {\n    return NO;\n}\n\n/**\n * If shouldHandleTouchEvents returns true, touch events will be passed to the plugin.\n */\n- (void)processTouchEvent:(UIEvent *)event {}\n\n/*\n * iOS plugins are expected to handle UIApplication* notifications as needed\n */\n\n/**\n * iOS plugins can subscribe to the NSNotification center notifications for the Optimizely\n * notifications listed in Optimizely.h#NSNotification Keys\n */\n\n/**\n * Initialize the plugin and start any listeners or threads.\n * @param optimizely reference to the Optimizely singleton so that services can be accessed\n * @return true if the plugin was started successfully, false otherwise.\n */\n- (BOOL)startWithOptimizely:(Optimizely *)optimizely withConfig:(NSDictionary *)config {\n    /**\n     *  Constant NSNotification key that is triggered when an experiment is viewed by the user. The userInfo in the notification\n     *  will have metadata which includes experiment Id, variation Id, experiment description and variation description. For more\n     *  information on visited experiments, see the `visitedExperiments`.\n     */\n    [NSNotificationCenter.defaultCenter addObserverForName:OptimizelyExperimentVisitedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n        NSDictionary *userInfo = note.userInfo;\n        NSString *property_name = [NSString stringWithFormat:@&quot;Optimizely: %@&quot;, userInfo[@&quot;experiment_id&quot;]];\n        NSString *property_value = userInfo[@&quot;variation_id&quot;];\n        // [mySDK setGlobalProperty: property_value forKey: propertyName];\n    }];\n\n    /**\n     *  Constant NSNotification key that is triggered when an Optimizely goal is triggered. The userInfo in the notification\n     *  will have metadata which includes an array of experiments pertaining to this goal and the goal description. This notification\n     *  is only fired in normal mode when a conversion is counted for 1 or more experiments.\n     */\n    [NSNotificationCenter.defaultCenter addObserverForName:OptimizelyGoalTriggeredNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n        NSDictionary *userInfo = note.userInfo;\n        NSString *description = userInfo[@&quot;description&quot;];\n        NSArray *experiments = userInfo[@&quot;experiments&quot;];\n\n        for (NSDictionary *experiment in experiments) {\n            NSString *property_name = [NSString stringWithFormat:@&quot;Optimizely: %@&quot;, experiment[@&quot;experiment_id&quot;]];\n            NSString *property_value = experiment[@&quot;variation_id&quot;];\n            // [mySDK setEventProperty: property_value forKey: propertyName];\n        }\n        // [mySDK trackEvent: description];\n    }];\n    return YES;\n}\n\n/**\n * Stop the extension and clean up any objects that are owned by the extension.\n */\n- (void)stop {}\n\n@end\n</code></pre><p>The plugin framework offers a lot of functionality, but for most analytics integrations the observers in the <code>startWithOptimizely:(Optimizely *)optimizely withConfig:(NSDictionary *)config</code> function are most relevant.</p>\n<h5 id=\"optimizelyexperimentvisitednotification\">OptimizelyExperimentVisitedNotification</h5>\n<p>The function <code>OptimizelyExperimentVisitedNotification</code> is triggered every time an experiment is shown to a user of the app. Every experiment has an ID and a name and the user will be randomly assigned to a variation of the experiment which also has an ID and a name. You need to use the experiment name and variation name for your analytics integration.In the example, the experiment name is stored in the NSString <code>property_name</code> and the variation name is stored in <code>property_value</code>. Both the experiment name and variation name are assigned to a user. Use your analytics SDK or REST API to append this metadata to a user. An example of how to send the data with the Google Analytics iOS SDK is by using <a href=\"https://developers.google.com/analytics/devguides/collection/ios/v3/customdimsmets#set-send\">custom dimensions</a>.</p>\n<h5 id=\"optimizelygoaltriggerednotification\">OptimizelyGoalTriggeredNotification</h5>\n<p>The <code>OptimizelyGoalTriggeredNotification</code> function is called every time a goal that has been set in Optimizely is triggered by the user of the app. The <code>OptimizelyGoalTriggeredNotification</code> function can be used to forward Optimizely goal events to your SDK or REST API.</p>\n<h3 id=\"register-plugin\">4. Enable plugin</h3>\n\n<p>The code that you wrote in step 3 needs to be enabled to become effective. If you used the plugin id <code>&quot;example_plugin&quot;</code>, you need to use <code>Optimizely.whitelistPlugin(&quot;example_plugin&quot;, null);</code> to enable the plugin in Android and <code>[Optimizely whitelistPlugin:@&quot;example_plugin&quot;];</code> on iOS. Once your integration gets approved for the Optimizely dashboard, you can skip this step. On iOS, your users will need to include the header file (e.g. <code>ExamplePlugin.h</code>) which contains your registration macro (the call to <code>OptimizelyRegisterPlugin()</code>). On Android, your plugin will be detected by the classloader.</p>\n<h3 id=\"mobile-qa-integration\">5. QA integration</h3>\n\n<p>When the integration is successfully implemented, check your network traffic to see if all the data is correctly sending to the analytics platform. You can use Charles for monitoring your Network traffic. There is a configuration guide for <a href=\"http://www.charlesproxy.com/documentation/configuration/browser-and-system-configuration/\">using Charles with iOS and Android</a>.</p>\n<h2 id=\"audiences\">Audiences</h2>\n<p><em>Audience integrations</em> allow customers to target a specific audience based on data from an external source. With a simple drag-and-drop interface, customers can personalize content and experiments based on 3rd party demographic data such as gender, location, weather, and age, or 1st party behavioral data such as buying intent, lifetime value, cart abandonment, and more. This section explains how to create audiences within Optimizely (via the REST API) and add a visitor to that audience in the browser (via the JavaScript API).</p>\n<h3 id=\"audiences-prerequisites\">Prerequisites</h3>\n\n<ul>\n<li>Audience data from your platform is available client-side (i.e. in the browser)</li>\n<li>Comfortable using REST APIs</li>\n<li>Basic JavaScript skills</li>\n</ul>\n<h3 id=\"audiences-create-a-developer-account\">1. Create a developer account</h3>\n\n<p>Depending on your <a href=\"https://help.optimizely.com/hc/en-us/articles/200040055\">Optimizely plan type</a>, the REST API may restrict the number of calls you can make per month. To avoid going over the limit with your account, <a href=\"https://www.optimizely.com/?modal=devsignup\">create a free developer account</a>. Creating a developer account does not require a credit card and will provide full access the REST API.</p>\n<h3 id=\"register-your-application\">2. Register your application</h3>\n\n<p>We require you to use OAuth 2.0 to authenticate with the Optimizely REST API. This will allow you to provide a seamless experience to users in your application and periodically send audiences to Optimizely in the background. <a href=\"/oauth/index.html\">Learn how to connect to Optimizely using OAuth 2.0</a>.</p>\n<h3 id=\"create-a-test-page\">3. Create a test page</h3>\n\n<p>Create a page to test the integration on. On the test page, the Optimizely snippet needs to be added to the top of the &lt;head&gt; section. Instructions on how to install the Optimizely snippet can be found on our <a href=\"https://help.optimizely.com/hc/en-us/articles/200040095-Implement-the-Optimizely-Snippet\">knowledge base</a>.</p>\n<h3 id=\"create-an-optimizely-audience\">4. Create an Optimizely audience</h3>\n\n<p>You can now create Audiences using the REST API. When a user indicates that they want to use an audience from your platform within Optimizely you should create an audience without conditions in Optimizely. <a href=\"/rest/reference/index.html#create-audience\">Learn more on how to create audiences in Optimizely using the REST API</a>.</p>\n<p>An example of the Optimizely REST API call and the result with CURL is displayed here:</p>\n<p><img src=\"/assets/img/integrations/audiences_rest.png\"></p>\n<p>In the above picture, the REST API call returns various fields, including an id (highlighted with an arrow). You will need to use the id in the next step.</p>\n<h3 id=\"add-visitors-to-an-audience\">5. Add visitors to an audience</h3>\n\n<p>The Optimizely JavaScript API allows you to programmatically add a visitor to an Optimizely audience. To do so, you can use the following function:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&#39;addToAudience&#39;, audienceId]);\n</code></pre>\n<p>When you created the Optimizely audience in the previous step, you received an audience ID. You can use that ID in the JavaScript call.</p>\n<h3 id=\"qa-your-integration\">6. QA your integration</h3>\n\n<p>To verify that the integration works, select an audience within your platform that you are sure you will be in. Trigger the procedure to create a corresponding Optimizely audience.</p>\n<p>Verify that the audience creation has worked by going to <code>https://app.optimizely.com/projects/{{ project_id }}/audiences</code>. The audience that has been created should show up in the list.</p>\n<p><img src=\"/assets/img/integrations/audience_saved_audience.png\"></p>\n<p>When the audience is in the list, create and start an experiment that uses the audience. Go to your <a href=\"https://app.optimizely.com/projects/\">Experiment Dashboard</a> and click on New Experiment. Open the Audience Builder (shown below) in the Optimizely Editor.</p>\n<p><img src=\"/assets/img/integrations/audience_builder.png\"></p>\n<p>In the audience builder click on &quot;Add a Saved Audience&quot;. Select the create audience and click on &quot;add&quot;.</p>\n<p><img src=\"/assets/img/integrations/audience_builder_2.png\"></p>\n<p>Go to the test page you have created. Verify that the experiment is running when the uploading of the experiment is done (approximately 2 minutes after saving an experiment). You can verify if the experiment is running by doing a hard refresh on the test page. Open the JavaScript console and execute <code>optimizely.activeExperiments</code>. The console will output an array with your experiment ID.</p>\n<p><img src=\"/assets/img/integrations/active_experiments.png\"></p>\n<p>If you are sure the experiment should be running (after a few minutes) but doesn&#39;t show up in the activeExperiments array, it could be that the visitor has not been added to the Optimizely audience. You will get more information by executing <code>optimizely.push(&quot;log&quot;)</code>.</p>\n<p>Verify with your platform that you are recognised as being in the audience. You can verify that the Optimizely integration works by opening the JavaScript console and executing <code>optimizely.data.visitor.audiences</code>. The value of the audience ID that you created should be true.</p>\n<p><img src=\"/assets/img/integrations/audience_confirm.png\"></p>\n<h2 id=\"uploaded-lists\">Uploaded Lists</h2>\n<p><em>Uploaded List integrations</em> allow customers to upload a list of user identifiers (e.g. cookies, query parameters, or other user identifiers) to Optimizely from a 3rd party application. These identifiers can be used to target experiments and segment results. Unlike audience integrations which operate client-side, user list integrations are implemented by a server-to-server exchange. For more information on uploaded lists, please refer to the Optimizely <a href=\"https://help.optimizely.com/hc/en-us/articles/206197347\">knowledge base</a>.</p>\n<p>This section walks you through how to build an integration that sends lists of users to Optimizely via the REST API. To see examples of Uploaded list integrations, check out our documentation on integrations with <a href=\"https://help.optimizely.com/hc/en-us/articles/206524537\">Salesforce</a> and <a href=\"https://help.optimizely.com/hc/en-us/articles/206440108\">Marketo</a>.</p>\n<h3 id=\"uploaded-lists-prerequisites\">Prerequisites</h3>\n\n<ul>\n<li>Your application stores user identifiers (e.g. hashed email addresses or other unique IDs)</li>\n<li>User identifiers are not personally identifiable, according to Optimizely&#39;s <a href=\"https://www.optimizely.com/terms/\">Terms of Service</a></li>\n<li>User identifiers can be accessed via the user&#39;s browser (e.g. in a cookie, query parameter, or otherwise)</li>\n<li>Comfortable using REST APIs</li>\n</ul>\n<h3 id=\"uploaded-lists-1-create-a-developer-account\">1. Create a developer account</h3>\n\n<p>Uploaded Lists are a feature restricted to select Enterprise customers and developers. If you do not have access to Uploaded Lists and would like to develop an integration, <a href=\"https://www.optimizely.com/?modal=devsignup\">create a free developer account</a>. Creating a developer account does not require a credit card and will provide full access to the Uploaded Lists feature and associated APIs.</p>\n<h3 id=\"uploaded-lists-2-register-your-application\">2. Register your application</h3>\n\n<p>We require you to use OAuth 2.0 to authenticate with the Optimizely REST API. This will allow you to provide a seamless experience to users in your application and periodically send lists to Optimizely in the background. <a href=\"/oauth/index.html\">Learn how to connect to Optimizely using OAuth 2.0</a>.</p>\n<h3 id=\"uploaded-lists-3-create-a-list\">3. Create a list in Optimizely</h3>\n\n<p>You can now send lists to Optimizely via the REST API. Note that we currently limit list sizes to 5MB. If you want to send larger lists, please contact <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a> with more information, including what size lists you hope to send via the API. <a href=\"/rest/reference/#create-list\">Learn how to create an uploaded list in Optimizely via the REST API</a>.</p>\n<p>An example of the Optimizely REST API call and the result with CURL is displayed here:</p>\n<p><img src=\"/assets/img/integrations/list_rest.png\"></p>\n<h3 id=\"uploaded-lists-4-update-list\">4. Update a list in Optimizely</h3>\n\n<p>If you&#39;d like periodically refresh your lists, please use the <a href=\"/rest/reference/#update-list\">update endpoint</a> to update an existing list.</p>\n<h3 id=\"uploaded-lists-qa-your-integration\">5. QA your integration</h3>\n\n<p>To test the integration end-to-end, you should verify that the lists you&#39;ve created via the API appear in the <a href=\"https://help.optimizely.com/hc/en-us/articles/206197347#create\">Uploaded Lists</a> tab in Optimizely. You can download the lists directly from this interface to make sure the individual user IDs are uploaded as expected. Finally <a href=\"https://help.optimizely.com/hc/en-us/articles/206197347#target\">create an audience that includes the uploaded list</a> and run an experiment that targets that audience to make sure that users are bucketed correctly.</p>\n<p><em>Note:</em> You may upload lists as frequently as you like. However, it may take up to 2 hours to propagate your lists to our servers.</p>\n<h2 id=\"content-management\">Content Management</h2>\n<p><em>Content Management integrations</em> allow customers to leverage the full power of Optimizely on a platform that manages content.  Customers can create, configure, and run experiments directly from their content platform interface without having to login to Optimizely.</p>\n<p>There are many types of content management integrations. The example below describes an integration that tests article headlines in WordPress. Other potential integrations include: testing images from within an e-Commerce platform, testing product titles from within an e-Commerce platform, and testing an entire article from an editorial platform.</p>\n<h3 id=\"content-prerequisites\">Prerequisites</h3>\n\n<ul>\n<li>Your platform manages content on a website</li>\n<li>The content that is tested has a unique identifier, e.g. <code>&lt;a id=&quot;article1234&quot;&gt;HeadlineTest&lt;/a&gt;</code></li>\n<li>Comfortable using REST APIs</li>\n<li>Basic JavaScript skills</li>\n</ul>\n<h3 id=\"content-create-a-developer-account\">1. Create a developer account</h3>\n\n<p>Depending on your <a href=\"https://help.optimizely.com/hc/en-us/articles/200040055\">Optimizely plan type</a>, the REST API may restrict the number of calls you can make per month. To avoid going over the limit with your account, <a href=\"https://www.optimizely.com/?modal=devsignup\">create a free developer account</a>. Creating a developer account does not require a credit card and will provide full access the REST API.</p>\n<h3 id=\"content-register-your-application\">2. Register your application</h3>\n\n<p>We require you to use OAuth 2.0 to authenticate with the Optimizely REST API. This will allow you to provide a seamless experience to users in your application and periodically send lists to Optimizely in the background. <a href=\"/oauth/index.html\">Learn how to connect to Optimizely using OAuth 2.0</a>.</p>\n<h3 id=\"create-a-configuration-form-authentication-and-project-selection\">3. Create a configuration form: authentication and project selection</h3>\n\n<p>Users can authenticate your application to use the REST API using OAuth 2.0. You can find a description on how to implement OAuth authentication <a href=\"/oauth/index.html\">here</a>.</p>\n<p>After connecting with Optimizely you can use the REST API to get all the projects for the account that the user has authenticated with. To get all the project names and their corresponding project IDs, use the <a href=\"/rest/reference/index.html#list-projects\">list-projects</a> REST API call.</p>\n<p>You can see an example of how the configuration form should look like in the image below. The first step is to authenticate with Optimizely (the blue button). After the authentication is done, the user will be able to select a project from the selector below &quot;Choose a project&quot;. The options within the project are populated by the information that is returned by the <a href=\"/rest/reference/index.html#list-projects\">list-projects</a> REST API call.</p>\n<p><img src=\"/assets/img/integrations/content_config_authentication.png\"></p>\n<h3 id=\"create-a-configuration-form-url-targeting\">4. Create a configuration form: URL targeting</h3>\n\n<p>Because there are many different places on a page where an article can appear, the best URL targeting condition for a content management experiment is a substring match on the entire website. You can create an option that allows customers to select different URLS to target. This targeting will be used for all experiments that are created  with the content testing tool.\n<img src=\"/assets/img/integrations/content_config_url.png\"></p>\n<h3 id=\"create-a-configuration-form-variation-code\">5. Create a configuration form: variation code</h3>\n\n<p>For Optimizely to modify the right content on the page, users must be able to specify where the target content can be found. Create an HTML textbox that allows the user to specify the variation code.</p>\n<p><img src=\"/assets/img/integrations/content_config_variationcode.png\"></p>\n<h3 id=\"content-create-an-experiment\">6. Create an experiment</h3>\n\n<p>On the content item level, create a form that allows editors to create an experiment.</p>\n<p><img src=\"/assets/img/integrations/content_createexperiment.png\"></p>\n<p>In the form that is added on a content item level, create fields that allow a user to fill in alternate titles for the article.</p>\n<p>Sample HTML code:</p>\n<pre><code class=\"lang-xml\">&lt;h1&gt;Variation#1&lt;/h1&gt;\n&lt;input type=&quot;text&quot; id=&quot;post_title1&quot; class=&quot;optimizely_variation&quot; placeholder=&quot;AlternateTitle1&quot;&gt;\n&lt;h1&gt;Variation#2&lt;/h1&gt;\n&lt;input type=&quot;text&quot; id=&quot;post_title2&quot; class=&quot;optimizely_variation&quot; placeholder=&quot;AlternateTitle2&quot;&gt;\n&lt;a id=&quot;optimizely_create&quot; class=&quot;button-primary&quot;&gt;CreateExperiment&lt;/a&gt;\n</code></pre>\n<p>With the REST API you can create the <a href=\"/rest/reference/index.html#create-experiment\">experiment</a>. In the screenshot you see that a user has the ability to fill in two alternate titles. This means that the created experiments should have 2 + 1 (for the original) variations. The variation code of the variations is defined by the setting in Step 5. and the values of the fields in the above form. If we consider the following scenario:</p>\n<ul>\n<li>The setting in Step 5. is <code>$(&quot;.optimizely-$POST_ID&quot;).text($NEW_TITLE);</code></li>\n<li>The id of the article the user is currenctly editing is 423</li>\n<li>Original headline is &quot;Hello World!&quot;</li>\n<li>Alternate headline 1 is &quot;Hello Mars!&quot;</li>\n<li>Alternate headline 2 is &quot;Hello Friends!&quot;</li>\n</ul>\n<p>The variation code that you should use to <a href=\"/rest/reference/index.html#create-variation\">create the variation</a> using the REST API is:</p>\n<p><strong>Original</strong>\n<code>// nothing to do here</code></p>\n<p><strong>Variation #1</strong>\n$(&quot;.optimizely-423&quot;).text(&quot;Hello Mars!&quot;);</p>\n<p><strong>Variation #1</strong>\n$(&quot;.optimizely-423&quot;).text(&quot;Hello Friends!&quot;);</p>\n<p>If the article has a specific URL, like www.example.com/articles/article-$POST-ID, you can use the REST API to <a href=\"/rest/reference/index.html#create-goal\">create a pageview goal</a> for the experiment. You can read more about pageview goals <a href=\"https://help.optimizely.com/hc/en-us/articles/200090069-Pageview-goals\">here</a>.</p>\n<p>The REST API calls you&#39;ll use:</p>\n<ul>\n<li><a href=\"/rest/reference/index.html#create-experiment\">Create experiment</a></li>\n<li><a href=\"/rest/reference/index.html#create-variation\">Create variations</a></li>\n<li><a href=\"/rest/reference/index.html#create-goal\">Create goals</a></li>\n</ul>\n<h3 id=\"content-start-and-pause-experiment\">7. Start and pause experiment</h3>\n\n<p>After clicking the &quot;Create experiment&quot; button, the form on the content will change to allow a user to start, pause and modify the experiment.</p>\n<p><img src=\"/assets/img/integrations/content_startexperiment.png\"></p>\n<p>You can use the REST API to <a href=\"/rest/reference/index.html#experiments\">update an experiment</a> and <a href=\"/rest/reference/index.html#update-variation\">a variation</a>.</p>\n<p>To start and pause the experiment, update the &quot;status&quot; field on an experiment to the value &quot;Running&quot;.</p>\n<h3 id=\"content-display-results\">8. Display results</h3>\n\n<p>For editors to work entirely in the content platform, you will also need to report the results of the experiments in the platform.</p>\n<p><img src=\"/assets/img/integrations/content_results.png\"></p>\n<p>Results can be fetched using the <a href=\"/rest/reference/index.html#get-stats\">get experiment results</a> function of the REST API.</p>\n<h2 id=\"conversion-tracking\">Conversion Tracking</h2>\n<p><em>Conversion Tracking integrations</em> allow customers to use custom events (e.g. phone calls) as goals for their experiments, as opposed to default goals like clicks and pageviews. These integrations use Optimizely’s custom event goals functionality to track conversions. To see examples of Conversion Tracking integrations, check out our documentation on <a href=\"https://help.optimizely.com/hc/en-us/articles/202984310\">DialogTech</a> or <a href=\"https://help.optimizely.com/hc/en-us/articles/204468298\">FreeSpee</a> integrations.</p>\n<p>This section walks you through how to create a conversion tracking integration using <a href=\"https://help.optimizely.com/hc/en-us/articles/200039925\">custom event goals</a> and the <a href=\"https://help.optimizely.com/hc/en-us/articles/200040195\">offline conversion API</a>.</p>\n<h3 id=\"create-a-custom-event-goal\">1. Create a custom event goal</h3>\n\n<p>In order to track conversion events in Optimizely, a <a href=\"https://help.optimizely.com/hc/en-us/articles/200039925\">custom event goal</a> needs to be defined. The custom event goal will be used to identify conversion events. It is possible to create multiple custom event goals for each type of conversion. Each custom event goal has a unique name that can be referenced in your application.</p>\n<p>There are two ways you can create a custom event goal:</p>\n<ul>\n<li><p><em>Option 1: Create custom event goal via the REST API (preferred).</em> For a seamless experience, you can create a custom event goal on behalf of the customer using the REST API. If you are using the REST API, we require using <a href=\"/oauth/index.html\">OAuth 2.0</a> to authenticate with Optimizely. <a href=\"/rest/reference/index.html#create-goal\">Learn how to create goals via the REST API</a>. The goal type field needs to have the value &quot;1&quot;. A commonly used value for the &quot;event&quot; field is <code>phone_call_conversion</code>.</p>\n</li>\n<li><p><em>Option 2: Ask the customer to create custom event goal manually.</em> The easiest way for you to implement this integration is to instruct the customer to do a couple of manual steps. Instruct the customer to login to their Optimizely account and create a custom event goal for an experiment manually. You may want to require the customer to use a pre-specified name for the goal, e.g. <code>phone_call_conversion</code>, so you can reference it later. <a href=\"https://help.optimizely.com/hc/en-us/articles/200039925#add\">Learn how to create custom event goals in Optimizely</a>.</p>\n</li>\n</ul>\n<h3 id=\"reference-custom-event-goal\">2. Reference custom event goal in your application</h3>\n\n<p>You&#39;ll need to reference the name of the custom event goal that was defined in Step 1. If the customer is creating the custom event goal manually prompt the user to enter the name of the custom event goal in your application (e.g. <code>phone_call_conversion</code>).</p>\n<p>If you created the custom event goal using the REST API, use the value you chose for the &quot;event&quot; field.</p>\n<h3 id=\"collect-information-about-the-visitor\">3. Collect information about the visitor</h3>\n\n<p>In addition to the providing a custom event goal name, you&#39;ll also need to specify information about the visitor so Optimizely knows how to tie the conversion event back to the experiment and variation that was shown. All of this information can be fetched from a browser using the <a href=\"/js\">JS API</a>. For convenience, we&#39;ve provided some helper functions that you can use to collect all of the necessary information:</p>\n<h4 id=\"project-id\">Project ID</h4>\n<pre><code class=\"lang-javascript\">/**\n * Gets the Optimizely Project ID installed on this page (sometimes the same as the Account ID)\n *\n * @return {Number} the project id\n */\nfunction getProjectId() {\n    return optimizely.getProjectId();\n}\n</code></pre>\n<h4 id=\"experiment-and-variation-ids\">Experiment and Variation IDs</h4>\n<pre><code class=\"lang-javascript\">/**\n * Gets the experiment/variation mappings for the current visitor\n *\n * @return {String} a string that displays all the experiments and variations in a list of query parameters\n */\nfunction getVariationsInParameters() {\n    var variations = JSON.parse(decodeURIComponent(getCookie(&quot;optimizelyBuckets&quot;)));\n    resultstring = &quot;&quot;;\n    for (var variation in variations) {\n        resultstring += &quot;&amp;x&quot; + variation + &quot;=&quot; + variations[variation];\n    }\n    return resultstring;\n}\n</code></pre>\n<h4 id=\"segment-ids\">Segment IDs</h4>\n<pre><code class=\"lang-javascript\">/**\n * Gets the segment values for the current visitor\n *\n * @return {String} a string that displays all the segments and their values in a list of query parameters\n */\nfunction getSegmentsInParameters() {\n    var segments = JSON.parse(decodeURIComponent(getCookie(&quot;optimizelySegments&quot;)));\n    var resultstring = &quot;&quot;;\n    for (var seg in segments) {\n        resultstring += &quot;&amp;s&quot; + seg + &quot;=&quot; + segments[seg];\n    }\n    return resultstring;\n}\n</code></pre>\n<h4 id=\"user-ids\">User IDs</h4>\n<pre><code class=\"lang-javascript\">/**\n * Getting the user ID is only possible using the cookie value\n *\n * @return {String} a JSON formatted string that contains all the segments and their values\n */\nfunction getUserId() {\n    return getCookie(&quot;optimizelyEndUserId&quot;);\n}\n</code></pre>\n<h3 id=\"create-an-offline-conversion\">4. Create an offline conversion</h3>\n\n<p>Once you know the required information about a visitor and the name of the custom event goal you want to track, you can create an offline conversion using a GET request in this format:</p>\n<pre><code class=\"lang-http\">http://{{ project_id }}.log.optimizely.com/event\n                               ?a={{ project_id }}\n                               &amp;n={{ goal identified }}\n                               &amp;u={{ Optimizely user id }}\n                               &amp;x{{experiment id 1}}={{variation id 1}}\n                               &amp;s{{segment id 1}}={{segment value 1}}\n</code></pre>\n<p>To learn more about the expected format of these parameters see\n<a href=\"https://help.optimizely.com/hc/en-us/articles/200040195\">Tracking offline conversion events with Optimizely</a>.</p>\n<p>The following function can be used to construct a valid offline conversion URL using the sample JavaScript functions above:</p>\n<pre><code class=\"lang-javascript\">/**\n * Generate the entire URL that you can use to create a conversion, given a goalname. The goalname\n * is required, if you also provide a value, there will be a revenue value added to the conversion\n * call. The goalname will be encoded if it isn&#39;t already.\n *\n * @param {String} goalname (the goal were you are creating a conversion for)\n * @param {Number} value (a value representing the revenue of the conversion)\n * @return {String} a JSON formatted string that contains all the segments and their values\n */\nfunction generateConversionUrl(goalname, value) {\n    var goalname = decodeURIComponent(goalname) == goalname ? encodeURIComponent(goalname) : goalname;\n    var result = &quot;http://&quot; + getProjectId() + &quot;.log.optimizely.com/event?a=&quot; + getProjectId() + &quot;&amp;n=&quot; + goalname + &quot;&amp;u=&quot; + getUserId() + getVariationsInParameters() + getSegmentsInParameters();\n    if (typeof (value) != &quot;undefined&quot;) {\n        result += &quot;&amp;v=&quot; + value;\n    }\n    return result;\n}\n</code></pre>\n<h3 id=\"conversion-5-qa-integration\">5. QA your integration</h3>\n\n<p>To verify that the integration works, create an Optimizely experiment that includes the custom event goal in question. Then send visitor test traffic through your experiment and fire the offline conversion goals. Check your results page for the experiment. It should now include data on how many visitors and offline conversions have occurred for this experiment.</p>\n<h2 id=\"snippet-installation\">Snippet Installation</h2>\n<p><em>Snippet integrations</em> allow users to implement the Optimizely functionality on their website without the help of a developer to add the Optimizely snippet.</p>\n<h3 id=\"snippet-prerequisites\">Prerequisites</h3>\n\n<ul>\n<li>Your platform is able to programmatically modify HTML templates</li>\n</ul>\n<h3 id=\"snippet-create-a-developer-account\">1. Create a developer account</h3>\n\n<p>Depending on your <a href=\"https://help.optimizely.com/hc/en-us/articles/200040055\">Optimizely plan type</a>, the REST API may restrict the number of calls you can make per month. To avoid going over the limit with your account, <a href=\"https://www.optimizely.com/?modal=devsignup\">create a free developer account</a>. Creating a developer account does not require a credit card and will provide full access the REST API.</p>\n<h3 id=\"snippet-register-your-application\">2. Register your application</h3>\n\n\n<p>We require you to use OAuth 2.0 to authenticate with the Optimizely REST API. This will allow you to provide a seamless experience to users in your application who want to install the Optimizely snippet. <a href=\"/oauth/index.html\">Learn how to connect to Optimizely using OAuth 2.0</a>.</p>\n<h3 id=\"snippet-create-a-configuration-form\">3. Create a configuration form</h3>\n\n<p>Within your platform, you should add a form for installing Optimizely in a place only administrators have access to. The configuration form should consist of a button to authenticate with Optimizely using OAuth and a selector for selecting the project that the user wants to install on their website. This is an example form:</p>\n<p><img src=\"/assets/img/integrations/snippet_wordpress_first.png\"></p>\n<p>After connecting with Optimizely you can use the REST API to get all the projects connected to the account that the user authenticated with. To get all the project names and their corresponding project IDs, use the <a href=\"/rest/reference/index.html#list-projects\">list-projects</a> REST API call.</p>\n<p><img src=\"/assets/img/integrations/snippet_wordpress_choose.png\"></p>\n<h3 id=\"implement-snippet-in-head\">4. Implement snippet in the head section of every page</h3>\n\n<p>Write custom code that automatically adds the Optimizely snippet to every page using the project ID that was chosen by the user.</p>\n<p>This is an example of how it would work within WordPress:</p>\n<pre><code class=\"lang-php\">/**\n * Generates the Optimizely script tag.\n * @param int $project_code\n * @return string\n */\nfunction optimizely_generate_script( $project_id ) {\n    return &#39;&lt;script src=&quot;//cdn.optimizely.com/js/&#39; . abs( floatval( $project_id ) ) . &#39;.js&quot;&gt;&lt;/script&gt;&#39;;\n}\n\n/**\n * Force Optimizely to load first in the head tag.\n */\nfunction optimizely_add_script() {\n    $project_id = get_option( &#39;optimizely_project_id&#39; );\n    if ( ! empty( $project_id ) ) {\n        // This cannot be escaped since optimizely_generate_script returns a script tag.\n        // The output of this script is fully escaped within the function below\n        echo optimizely_generate_script( $project_id );\n    }\n}\nadd_action( &#39;wp_head&#39;, &#39;optimizely_add_script&#39;, -1000 );\n</code></pre>\n<p>Want to learn more about the wp_head function used above? Check out the <a href=\"https://codex.wordpress.org/Plugin_API/Action_Reference/wp_head\">WordPress documentation here</a>.</p>\n<p><h3 id=\"snippet-qa-integration\">5. QA your integration</h3>\nTo verify whether the snippet integration is working correctly, use the snippet integration form to add a snippet to a test page. If you have gone through all the steps of your form, the Optimizely snippet should be installed on the page. Verify wether the snippet integration is working correctly by going to the test page on the website and opening the JavaScript console. When you execute <code>optimizely.getProjectId()</code> Optimizely should return the project ID that is installed on the page.</p>\n<p><img src=\"/assets/img/integrations/snippet_validation.png\"></p>\n"}},"ios":{"reference":{"index":{"template":"page-sidebar","title":"Optimizely iOS SDK Reference","body":"<h1 id=\"optimizely-ios-sdk-reference\">Optimizely iOS SDK Reference</h1>\n<p>This section provides information on how to customize your SDK installation and code snippets for how to implement Optimizely&#39;s APIs.</p>\n<p>Key things you can do include:</p>\n<ul>\n<li><a href=\"#programmatically-enable-edit-mode\">Programmatically connect to Optimizely&#39;s web editor</a></li>\n<li><a href=\"#disable-gesture\">Disable gesture</a> (The gesture is disabled by default in your live app)</li>\n<li><a href=\"#disable-visual-editor\">Disable the visual editor</a></li>\n<li><a href=\"#register-live-variables\">Register live variables</a></li>\n<li><a href=\"#code-blocks\">Implement code blocks</a></li>\n<li><a href=\"#goal-tracking\">Custom Event and Revenue Tracking</a></li>\n<li><a href=\"#analytics-integrations\">Implement custom and default analytics integrations</a></li>\n</ul>\n<h2 id=\"custom-initialization\">Custom Initialization</h2>\n<p>By default, Optimizely is initialized synchronously with a max 2 second timeout.  Optimizely can also be initialized asynchronously, which is a non-blocking call.  If you choose to load Optimizely asynchronously, you will need to use the callback to ensure that Optimizely variables and code blocks are accessed after Optimizely start has been completed.  If Optimizely variables and code blocks are accessed prior to Optimizely start being completed, no experiments will run.</p>\n<pre><code class=\"lang-obj-c\">[Optimizely startOptimizelyWithAPIToken:YOUR_API_TOKEN\n                          launchOptions:launchOptions\n              experimentsLoadedCallback:^(BOOL success, NSError *error) {...}];\n</code></pre>\n<h2 id=\"connecting-to-optimizely-s-editor\">Connecting to Optimizely&#39;s Editor</h2>\n<p>It is highly recommended to use Optimizely&#39;s &#39;O&#39; gesture to connect your app to Optimizely&#39;s editor.  However, there are other options should you choose not to implement Optimizely&#39;s URL scheme.</p>\n<h3 id=\"programmatically-enable-edit-mode\">Programmatically Enable Edit Mode</h3>\n<p>Typically Optimizely&#39;s &#39;O&#39; gesture will put your app into Edit Mode, which will then allow you to connect with Optimizely&#39;s editor.  However, if you choose not to implement the URL scheme in your app or are unable to put the app into &#39;Edit Mode&#39;, prior to <code>startOptimizelyWithAPIToken</code>, you can call <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/enableEditor\">enableEditor</a> in the development version of your app so that you can make changes.</p>\n<pre><code class=\"lang-obj-c\">[Optimizely enableEditor];\n[Optimizely startOptimizelyWithAPIToken:YOUR_API_TOKEN launchOptions:launchOptions];\n</code></pre>\n<p> <strong>Note that you should always remove the enableEditor call prior to releasing your app to the App store.</strong></p>\n<h3 id=\"disable-gesture\">Disable Gesture</h3>\n<p>By default, Optimizely&#39;s iOS SDK disables the gesture if the app is live in the App store.  However, if you would like to ensure that your end users are not able to put the app into edit mode (e.g. if you have an enterprise app that you release to internal employees), you can call the <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/disableGesture\">disableGesture</a> method prior to <code>startOptimizelyWithAPIToken</code>.</p>\n<p>An example of how to implement this method can be found below:</p>\n<pre><code class=\"lang-obj-c\">[Optimizely sharedInstance].disableGesture = YES;\n[Optimizely startOptimizelyWithAPIToken:YOUR_API_TOKEN launchOptions:launchOptions];\n</code></pre>\n<h2 id=\"visual-editor-configuration\">Visual Editor Configuration</h2>\n<p>The Optimizely Visual Editor allows you to modify existing views in your app. The first time you connect your app to Optimizely&#39;s Visual Editor, you can see which views are automatically detected by Optimizely.  Optimizely is able to detect and allows you to modify these views by:</p>\n<ul>\n<li>Dynamically tagging all views with an Optimizely ID</li>\n<li>Optimizely uses swizzling to enable view changes</li>\n</ul>\n<h3 id=\"tag-your-views\">Tag Your Views</h3>\n<p>There are some cases where Optimizely will not be able to detect your views.  For those views, you should give them a unique <code>optimizelyId</code>.  An example of how to do this is below:</p>\n<pre><code class=\"lang-obj-c\">UILabel *label = [[UILabel alloc] initWithFrame:...];\nlabel.optimizelyId = @&quot;pricing-title-label&quot;;\n</code></pre>\n<p>Cases where you will typically have to tag your views include if you would like to be able to modify a specific <a href=\"#tableview\">TableView cell</a>.</p>\n<h3 id=\"disable-automatic-tagging\">Disable Automatic Tagging</h3>\n<p>If you decide you do not want views to be automatically tagged with an optimizelyId, you can set the <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/shouldNotGenerateDynamicIds\">shouldNotGenerateDynamicIds</a> property to YES.</p>\n<h3 id=\"disable-visual-editor\">Disable Visual Editor</h3>\n<p>If you decide you want to exclusively use Live Variables and Code Blocks, you can set the  <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/disableSwizzle\">disableSwizzle</a> property to YES.</p>\n<p><strong>Note: Disabling the Visual Editor will also disable the ability to track tap goals. If you disable the Visual Editor, you&#39;ll need to rely only on view goals and custom event goals to track conversions.</strong></p>\n<h2 id=\"register-live-variables\">Register Live Variables</h2>\n<p><a href=\"/ios/help/html/Classes/Optimizely.html#task_Live%20Variables\">Live Variables</a> allow you to designate variables in your app that can be assigned values in the Optimizely editor.  These values can be modified by Optimizely&#39;s editor even after you have released your app to the app store.  For example, you might want to create an experiment that tests various values for gravity.  In order to create an Optimizely Live Variable, first define a corresponding <code>OptimizelyVariableKey</code> as follows:</p>\n<h4 id=\"objective-c-example\">Objective-C Example</h4>\n<pre><code class=\"lang-obj-c\">#import &lt;Optimizely/Optimizely.h&gt;\n\n// This line defines an OptimizelyVariableKey called myGravityVariable with a default value of 9.8\nOptimizelyVariableKeyForNumber(myGravityVariable, @9.8f);\n\n@implementation MyViewController\n\n...\n\n@end\n</code></pre>\n<p>or, if you&#39;re using Swift, declare your <code>OptimizelyVariableKey</code>s in your AppDelegate&#39;s top level. <code>#define</code> macros do not work in Swift so you&#39;ll have to manually pre-register these keys in the <code>application:didFinishLaunchingWithOptions:</code> method before calling <code>startOptimizelyWithAPIToken</code>. Here&#39;s an example of an AppDelegate.swift:</p>\n<h4 id=\"swift-example\">Swift Example</h4>\n<pre><code class=\"lang-swift\">import Optimizely\n\ninternal var myGravityVariableKey: OptimizelyVariableKey = OptimizelyVariableKey.optimizelyKeyWithKey(&quot;myGravityVariable&quot;, defaultNSNumber: 9.8)\n\n@UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate {\n\n   var window: UIWindow?\n\n   func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool {\n\n       // Make sure to pre-register your keys before starting Optimizely\n       Optimizely.preregisterVariableKey(myGravityVariableKey)\n\n       Optimizely.startOptimizelyWithAPIToken(&quot;YOUR_API_TOKEN&quot;, launchOptions: launchOptions)\n       return true\n   }\n}\n</code></pre>\n<p>By defining your variable key at the top level of the AppDelegate.swift and specifying it as <code>internal</code>, you&#39;ll be able to access them throughout your target.</p>\n<p>This defines an Optimizely variable key called <code>myGravityVariable</code> with a default value of 9.8.  Once a variable key is defined, variations can change the value for variables accessed via this key.</p>\n<p>The provided <code>OptimizelyVariableKeyFor[type]</code> macro (<a href=\"/ios/help/html/Classes/Optimizely.html#task_Live%20Variables\">list of types</a>) is the suggested method for defining an <code>OptimizelyVariableKey</code> as it will allow the web editor to detect Live Variables right when it connects your application. <strong>Note that keys must be defined outside of the function scope.</strong></p>\n<p>In order to access the variable, call <code>numberForKey</code> and provide the corresponding variable key:</p>\n<h4 id=\"objective-c-example\">Objective-C Example</h4>\n<pre><code class=\"lang-obj-c\">#import &lt;Optimizely/Optimizely.h&gt;\n\n// This line defines an OptimizelyVariableKey called myGravityVariable\nOptimizelyVariableKeyForNumber(myGravityVariable, @9.8f);\n\n@implementation MyViewController\n\n- (void) someFunction {\n    // This line reads myGravityVariable and stores it in &quot;gravity&quot;\n    NSNumber *gravity = [Optimizely numberForKey:myGravityVariable];\n\n    // Use gravity...\n    NSLog(@&quot;Gravity for this variation is %@&quot;, gravity);\n}\n\n@end\n</code></pre>\n<h4 id=\"swift-example\">Swift Example</h4>\n<pre><code class=\"lang-swift\">import Optimizely\n\nfunc someFunction() {\n    // myGravityVariableKey was previously defined in our AppDelegate.swift at\n    // the top level as an internal variable, so we can reference it here\n    // in other parts of our application\n    var gravity: NSNumber = Optimizely.numberForKey(myGravityVariableKey)\n\n    // Use gravity...\n    println(&quot;Gravity for this variation is \\(gravity)&quot;)\n}\n</code></pre>\n<p>You&#39;re now ready to implement your experiment using the Optimizely web editor:</p>\n<ol>\n<li>Load your application and connect in edit mode.</li>\n<li>Navigate to the variables section of the editor.\n<img src=\"/assets/img/ios/editor-variables-add-button.png\" alt=\"Drawing\" style=\"width: 50%; align:center\"/></li>\n<li>Click the &quot;Add Variable&quot; button to open a dialog where you can select variables to add to your experiment.</li>\n<li>Once you have added a variable to the experiment, you can select a value for each variation in the variables section of the editor.</li>\n<li>While in edit mode, changes to the variable will be applied on subsequent reads, thereby allowing you to quickly test your variable logic.  However, we recommend that you verify your variable tests in <a href=\"/ios/getting-started/index.html#preview-mode\">preview mode</a> prior to going live with the experiment.</li>\n<li>Once you&#39;ve connected your app to the editor, you can later edit live variables without connecting a device. However, if you make any changes to your app, make sure to connect it again to allow your changes to sync with the editor.</li>\n</ol>\n<p>For more details, please see the <a href=\"/ios/help/html/Classes/Optimizely.html#task_Live%20Variables\">Live Variables API Reference</a></p>\n<h3 id=\"register-variable-callback\">Register Variable Callback</h3>\n<p>By default, in Edit Mode, Optimizely&#39;s editor will apply variable value changes once the screen the variable is defined on is reloaded.  However, there may be times where you want the changed value of the variable to be reflected in your app without the screen being refreshed while you&#39;re making experiment changes.  To do so, you can use the <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/registerCallbackForVariableWithKey:callback:\">registerCallbackForVariableWithKey:callback:</a> method.</p>\n<p>An example implementation of this can be found below:</p>\n<pre><code class=\"lang-obj-c\">[Optimizely registerCallbackForVariableWithKey:myVariableKey callback:^(NSString *key, id value) {\n        NSLog(@&quot;The value of Optimizely&#39;s Live Variable: %@ is now %@\\n&quot;, key, value);\n        [self.tableView reloadData];\n}];\n</code></pre>\n<h2 id=\"code-blocks\">Code Blocks</h2>\n<p>Code Blocks allow developers to create variations that execute different code paths.  For example, one use case might be to test various checkout flows.   In order to create a Code Block, first define a corresponding <code>OptimizelyCodeBlocksKey</code> as follows:</p>\n<h4 id=\"objective-c-example\">Objective-C Example</h4>\n<pre><code class=\"lang-obj-c\">#import &lt;Optimizely/Optimizely.h&gt;\n\n// This line defines an OptimizelyCodeBlocksKey called myCheckoutTest\n// Arguments after the first are descriptive names for the blocks\nOptimizelyCodeBlocksKeyWithBlockNames(myCheckoutBlocksKey,\n                                    @&quot;shortCheckout&quot;,\n                                    @&quot;longCheckout&quot;);\n\n@implementation MyViewController\n\n...\n\n@end\n</code></pre>\n<h4 id=\"swift-example\">Swift Example</h4>\n<pre><code class=\"lang-swift\">import Optimizely\n\ninternal var myCheckoutBlocksKey: OptimizelyCodeBlocksKey = OptimizelyCodeBlocksKey(&quot;myCheckoutBlocksKey&quot;, blockNames: [&quot;shortCheckout&quot;, &quot;longCheckout&quot;])\n\n@UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate {\n\n   var window: UIWindow?\n\n   func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool {\n\n       // Make sure to pre-register your keys before starting Optimizely\n       Optimizely.preregisterBlockKey(myCheckoutBlocksKey)\n       Optimizely.startOptimizelyWithAPIToken(&quot;YOUR_API_TOKEN&quot;, launchOptions: launchOptions)\n\n       return true\n   }\n}\n</code></pre>\n<p>By defining your block key at the top level of the AppDelegate.swift and specifying it as <code>internal</code>, you&#39;ll be able to access them throughout your target.</p>\n<p>This defines an <code>OptimizelyCodeBlocksKey</code> called myCheckoutTest associated with block names &quot;shortCheckout&quot; and &quot;longCheckout.&quot; A Code Block can contain up to 4 named blocks.  Once a Code Block key is defined, variations can change the block that is executed for a particular variation.</p>\n<p>The provided <code>OptimizelyCodeBlocksKeyWithBlockNames</code> macro is the suggested method for defining an OptimizelyCodeBlocksKey as it will allow the web editor to detect Code Blocks right when it connects to your application. Note that keys must be defined outside of the function scope.</p>\n<p>Next, implement the Code Block as follows:</p>\n<h4 id=\"objective-c-example\">Objective-C Example</h4>\n<pre><code class=\"lang-obj-c\">#import &lt;Optimizely/Optimizely.h&gt;\n\n// This line defines an OptimizelyCodeBlocksKey called myCheckoutBlocksKey\nOptimizelyCodeBlocksKeyWithBlockNames(myCheckoutBlocksKey,\n                                    @&quot;shortCheckout&quot;,\n                                    @&quot;longCheckout&quot;);\n\n@implementation MyViewController\n\n- (void) someFunction {\n\n    // This line defines Code Blocks &quot;shortCheckout&quot;, &quot;longCheckout&quot;, and a\n    // default block that is executed in the case that the experiment is\n    // not activated.\n    [Optimizely codeBlocksWithKey:myCheckoutBlocksKey\n                       blockOne:^{\n        // This block is executed when myCheckoutTest -&gt; shortCheckout\n        [self performSegueWithIdentifier:@&quot;shortCheckoutFlow&quot; sender:self];\n    }\n                       blockTwo:^{\n        // This block is executed when myCheckoutTest -&gt; longCheckout\n        [self performSegueWithIdentifier:@&quot;longCheckoutFlow&quot; sender:self];\n    }\n                   defaultBlock:^{\n        // This block is executed by default\n        [self performSegueWithIdentifier:@&quot;checkoutFlow&quot; sender:self];\n    }];\n}\n\n@end\n</code></pre>\n<h4 id=\"swift-example\">Swift Example</h4>\n<pre><code class=\"lang-swift\">import Optimizely\n\nfunc someFunction() {\n    // myCheckoutBlocksKey was previously defined in our AppDelegate.swift at\n    // the top level as an internal variable, so we can reference it here in\n    // other parts of our application\n    Optimizely.codeBlocksWithKey(myCheckoutBlocksKey,\n        blockOne: { self.performSegueWithIdentifier(&quot;shortCheckoutFlow&quot; sender:self) },\n        blockTwo: { self.performSegueWithIdentifier(&quot;longCheckoutFlow&quot; sender:self) },\n        defaultBlock: { self.performSegueWithIdentifier(&quot;checkoutFlow&quot; sender:self) })\n}\n</code></pre>\n<p>You&#39;re now ready to implement your experiment using the Optimizely web editor:</p>\n<ol>\n<li>Load your application and connect in edit mode.</li>\n<li>Navigate to the Code Blocks section of the editor.\n<img src=\"/assets/img/ios/editor-codeblocks.png\" alt=\"Drawing\" style=\"width: 100%;\"/></li>\n<li>The editor will display your Code Blocks.  Use the drop down to select the desired Code Block for this variation.</li>\n<li>While in edit mode, changes to the active block will be applied on subsequent executions, thereby allowing you to quickly test your Code Block&#39;s logic.  However, we recommend that you verify your Code Blocks in <a href=\"/ios/getting-started/index.html#preview-mode\">preview mode</a> prior to going live with the experiment.</li>\n<li>Once you&#39;ve connected your app to the editor, you can later edit code blocks without connecting a device. However, if you make any changes to your app, make sure to connect it again to allow your changes to sync with the editor.</li>\n</ol>\n<p>For more details, please see the <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/codeBlocksWithKey:blockOne:defaultBlock:\">Code Blocks API Reference</a></p>\n<h3 id=\"register-code-block-callback\">Register Code Block Callback</h3>\n<p>By default, in Edit Mode, Optimizely&#39;s editor will apply code block branch changes once the code block is executed again.  However, there may be times where you want the new code block branch to be executed in your app without the screen being refreshed while you&#39;re making experiment changes.  To do so, you can use the <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name//registerCallbackForCodeBlockWithKey:callback:\">registerCallbackForCodeBlockWithKey:callback:</a> method.</p>\n<p>An example implementation of this can be found below:</p>\n<pre><code class=\"lang-obj-c\">[Optimizely registerCallbackForCodeBlockWithKey:myCodeBlockKey callback:^() {\n    // Calling renderViews will allow us to execute the code that wraps our code block\n    [self renderViews];\n}];\n</code></pre>\n<h3 id=\"phased-rollouts\">Phased Rollouts</h3>\n<p>A common use case for Code Blocks are phased rollouts.  Phased rollouts allow you to release a feature to a subset of users, which will help you mitigate the risk of crashes and help you understand how users will react to your new feature prior to rolling out a new feature to all users.  To learn more about to implement a phased rollout using Optimizely, you can refer to the article in Optiverse <a href=\"https://help.optimizely.com/hc/en-us/articles/206101447-Phased-rollouts-for-your-iOS-or-Android-App\">here</a>.</p>\n<h2 id=\"custom-targeting\">Custom Targeting</h2>\n<h3 id=\"attributes\">Attributes</h3>\n<p>Use attributes to segment your experiment results for more insight. This allows you to drill down into experiment results and discover how certain segments of users are behaving differently. This will allow you to create future experiments targeted to them.</p>\n<p>To set the value for an Attribute use one of these two methods.</p>\n<pre><code class=\"lang-obj-c\">BOOL success = [Optimizely setValue:@&quot;value&quot; forAttributeId:@&quot;attributeId&quot;];\nBOOL success = [Optimizely setValue:@&quot;value&quot; forAttributeApiName:@&quot;attributeApiName&quot;];\n</code></pre>\n<p>Both methods will return a boolean that determines whether the value was successfully set for the Attribute. If the string you passed in for the Attribute Id or the Attribute API Name do not match an Attribute in your project, it will return false. If Optimizely was able to locate the Attribute and set the value, it will return true. If you are using these methods before starting Optimizely, they will always return true even if the Attribute Id or Attribute API Name do not match an existing Attribute. If you use both <code>setValue:forAttributeId:</code> and <code>setValue:forAttributeApiName:</code> before starting Optimizely for the same attribute, <code>setValue:forAttributeId:</code> will override <code>setValue:forAttributeApiName:</code> when the Attribute is initialized.</p>\n<p>To get the current value of an Attribute use one of these two methods.</p>\n<pre><code class=\"lang-obj-c\">NSString *value = [Optimizely getValueForAttributeId:@&quot;attributeId&quot;];\nNSString *value = [Optimizely getValueForAttributeApiName:@&quot;attributeApiName&quot;];\n</code></pre>\n<p>Both methods will return an <code>NSString</code> object whose value is the current value for the associated Attribute. If the Attribute does not exist, it will return <code>nil</code>. If you use these methods before starting Optimizely, they will return the last value you provided through the corresponding <code>setValue:forAttributeId:</code> or <code>setValue:forAttributeApiName:</code> call. But <code>getValueForAttributeId:</code> will not be able to return the value for an Attribute whose value you have attempted to set through <code>setValue:forAttributeApiName:</code>. Likewise, <code>getValueForAttributeApiName:</code> will not be able to return the value for an Attribute whose value you have attempted to set through <code>setValue:forAttributeId:</code>.</p>\n<p>To get an Array of all the current Attributes, use</p>\n<pre><code class=\"lang-obj-c\">NSArray *attributes = [Optimizely getAttributes];\n</code></pre>\n<p>This method returns a copy of all attributes that are defined in the data file. If this is called before Optimizely starts, it will return an empty array. If there are no attributes, it will return an empty array. Each attribute will be an index in the NSArray represented by an instance of the <code>OptimizelyAttribute</code> class.</p>\n<h3 id=\"custom-tags\">Custom Tags</h3>\n<p>Custom Tags allow you to target users based on variables and attributes. You will be able to run your experiment and target visitors based on those custom attributes, effectively <strong>only</strong> bucketing those who meet your targeting conditions.  To be able to use Custom Tags in Optimizely, there are some lines of code that need to be added to your app.</p>\n<p>For example, to create the Custom Tag &quot;returning_customer&quot; with a value of &quot;true&quot;:</p>\n<pre><code class=\"lang-obj-c\">[Optimizely setValue:@&quot;true&quot; forCustomTag:@&quot;returning_customer&quot;];\n[Optimizely startOptimizelyWithAPIToken:YOUR_API_TOKEN launchOptions:launchOptions];\n</code></pre>\n<p><em><code>setValue</code> will only handle NSString objects.</em></p>\n<p><code>setValue:forCustomTag:</code> should be called prior to <code>startOptimizely</code> and any time custom tag values are expected to change.  To do that you can make the <code>setValue:forCustomTag:</code> call in the following ways:</p>\n<ul>\n<li>Prior to <code>startOptimizely</code> so that Optimizely knows all of the targeting conditions prior to experiment activation</li>\n<li><p><code>setValue:forCustomTag:</code> can also be called in conjunction with <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/refreshExperiments\">refreshExperiments</a> while the app is still running.  For more details on how this works, you can refer to the section <a href=\"#experiment-reload\">below</a>.</p>\n<pre><code class=\"lang-obj-c\">[Optimizely setValue:@&quot;true&quot; forCustomTag:@&quot;returning_customer&quot;];\n[Optimizely refreshExperiments];\n</code></pre>\n</li>\n</ul>\n<p>From there, to create an experiment <a href=\"https://help.optimizely.com/hc/en-us/articles/202296994-Get-Started-on-Mobile-Optimization#targeting\">targeting a Custom Tag</a>, open the Optimizely editor, click on &quot;Options,&quot; followed by &quot;Targeting&quot; and selecting &quot;Custom Tag&quot; within the Optimizely editor.</p>\n<h3 id=\"experiment-reload\">Experiment Reload</h3>\n<p><a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/refreshExperiments\">refreshExperiments</a> should be called any time custom tag values are expected to change.  <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/refreshExperiments\">refreshExperiments</a> allows Optimizely to take into account a user&#39;s newly added or changed custom tag values and re-buckets users based on updated targeting.</p>\n<p>For example, here&#39;s a use case where the user logs in, the developer sets a logged in custom tag, and then calls <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/refreshExperiments\">refreshExperiments</a>:</p>\n<pre><code class=\"lang-obj-c\">- (void)handlerForUserLogin {\n      // The user just logged in and we can set a custom tag to track this\n      // and then we&#39;ll call a refresh\n      [Optimizely setValue:@&quot;logged_in&quot; forCustomTag:@&quot;customer_state&quot;];\n      [Optimizely refreshExperiments];\n}\n</code></pre>\n<p><em>Note: <a href=\"#manual-activation\">Manually activated</a> experiments will need to be re-activated after refreshExperments for the new audience conditions to take effect.</em></p>\n<h3 id=\"optimizely-end-user-id\">Optimizely End User Id</h3>\n<p>This is a unique identifier generated by the Optimizely SDK for each end user of the app. Unlike the Universal User Id, this is a readonly property. If no Universal User Id is set, the Optimizely End User Id will be used for bucketing. All events sent from the SDK will contain the Optimizely End User Id. You can read the value for the Optimizely End User Id by calling</p>\n<pre><code class=\"lang-obj-c\">[Optimizely sharedInstance].optimizelyEndUserId;\n</code></pre>\n<h3 id=\"universal-user-id-beta-\">Universal User ID (Beta)</h3>\n<p>Set a unique (logged-in) identifier to be used by Optimizely for bucketing and tracking. Once set, Optimizely will bucket visitors in all new and future experiments so that visitors will see the same variation across devices (e.g. iPad app to iPhone app). Note that bucketing only happens upon app foregrounding, cold start, or manual activation. We will store this identifier in <code>NSUserDefaults</code> and continue to use it until a new one is set.</p>\n<p>Optimizely will also track unique visitors in experiment results using this ID; we will count an anonymous ID and a Universal ID as two distinct visitors, and prefer the Universal ID when counting experiment traffic and goals. UUID will not rebucket users who have seen a certain experiment already. <em>Regardless, make sure to target your experiments to &quot;Has Universal User ID&quot; to ensure consistent counting and bucketing across devices.</em></p>\n<pre><code class=\"lang-obj-c\">[Optimizely sharedInstance].universalUserId = @&quot;universalUserid&quot;;\n</code></pre>\n<p>Always set UUID before your experiment gets activated. For automatic experiments, this means setting UUID before you call start Optimizely. For manual experiments, this means setting UUID before you call activateManualExperiment.</p>\n<p><em>This is a beta feature, and is subject to change.</em> To learn more, visit our <a href=\"https://help.optimizely.com/hc/en-us/articles/203626830\">Help Center</a>, or consult our <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/userId\">API reference</a>. For support, please visit <a href=\"http://www.optiverse.com/\">Optiverse</a> or contact your Customer Success Manager.</p>\n<div class=\"attention attention--warning push--bottom\">Note: By using this API call, you agree not to pass personally identifiable (PII) information to Optimizely in accordance with our <a href=\"http://optimizely.com/terms\">Terms of Service</a> or your Master Service Agreement. If your login identifier is personally identifiable (such as an email address) you must hash it first before sending to Optimizely.</div>\n\n<h2 id=\"goal-tracking\">Goal Tracking</h2>\n<p>For additional information about any of the experimental approaches below, see the full <a href=\"/ios/help/html/index.html\">API Documentation</a>.</p>\n<h3 id=\"track-event\">Track Event</h3>\n<p>Custom goals allow you to track events other than taps and view changes. There are two steps to creating a custom goal.</p>\n<ol>\n<li><p>In order to track a custom goal, choose a unique string to identify it and send this string as a parameter to:</p>\n<pre><code class=\"lang-obj-c\">   [Optimizely trackEvent:(NSString *)];\n</code></pre>\n</li>\n<li><p>To create an experiment that tracks that custom goal, open the Optimizely editor, click &quot;Goals,&quot; then &quot;Create a New Goal,&quot; and select &quot;Custom Goal&quot; from the drop-down. You will be prompted for a string to uniquely identify your custom goal.  You should enter in the same string used in your trackEvent method call in the previous step.</p>\n</li>\n</ol>\n<p>For example, if we wanted a goal for users deleting a task with a swipe, we might create a custom goal &quot;User Deleted Task&quot; and then call <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/trackEvent:\">trackEvent</a> with this string in our event handler as follows:</p>\n<pre><code>  ```obj-c\n  - (void)userDidSwipeTask:(id)sender {\n      [Optimizely trackEvent:@&quot;User Deleted Task&quot;];\n      //The rest of your handler\n  }\n  ```\n</code></pre><p>As of SDK version 1.1, if you aren&#39;t sure of the exact spelling of your custom goal string, you can trigger custom events in your simulator or connected device, and the strings will appear in the dialog in the order they were triggered.</p>\n<p>For more details and to learn about tap and view goals, refer to the following <a href=\"https://help.optimizely.com/Track_Conversion_Goals/Mobile_Goals%3A_Measure_the_success_of_your_experiment\">guide</a> from our Knowledge Base.</p>\n<h3 id=\"revenue-tracking\">Revenue Tracking</h3>\n<p>The revenue goal allows you to <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/trackRevenue:\">track revenue</a> in your app. There are two steps to creating a custom goal.</p>\n<ol>\n<li><p>Add the tracking code to your app, you can add this tracking call by adding the code below:</p>\n<pre><code class=\"lang-obj-c\">   [Optimizely trackRevenue:(int)];\n</code></pre>\n<p>   For example, if we wanted a goal for users that completed a purchase, and you could make the tracking call in your purchaseConfirmation method where <code>price</code> is the variable that holds the dollar amount that has been spent:</p>\n<pre><code class=\"lang-obj-c\">   - (void)purchaseConfirmation:(id)sender {\n       [Optimizely trackRevenue:price*100];\n       //The rest of your handler\n   }\n</code></pre>\n</li>\n<li><p>To create an experiment that tracks revenue, click Goals -&gt; Add a Saved Goal -&gt; Hover over the &quot;Total Revenue&quot; goal and click the &quot;Add&quot; button.</p>\n</li>\n</ol>\n<h2 id=\"analytics-integrations\">Analytics Integrations</h2>\n<p>Optimizely integrates with popular analytics frameworks to allow you to slice and dice your experiment results. The integration sends information about the experiment and variation a user is bucketed into.  Currently we support the following frameworks in our iOS SDK:</p>\n<ul>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/209645787\">Localytics</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/204963198\">Amplitude</a></li>\n<li><a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/activateMixpanelIntegration\">Mixpanel</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/204628347\">Google Analytics</a></li>\n</ul>\n<p><em>Note: You must instantiate your analytics SDK in <code>application:didFinishLaunchingWithOptions:</code> before calling <code>startOptimizelyWithAPIToken</code> and enabling any integrations.</em></p>\n<h3 id=\"custom-integration\">Custom Integration</h3>\n<p>You can also access experiments and variations that a user has visited directly using the <code>[Optimizely sharedInstance].visitedExperiments</code> property and pass that data to internal or other analytics frameworks.  You can pass the values of <code>[Optimizely sharedInstance].visitedExperiments.experimentName</code> and <code>[Optimizely sharedInstance].visitedExperiments.variationName</code> to your analytics tool.  You can learn more about the <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/allExperiments\">allExperiments</a> and <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/visitedExperiments\">visitedExperiments</a> properties via our API reference.</p>\n<p>The recommended time to access data from the <code>[Optimizely sharedInstance].visitedExperiments</code> property is when the <code>OptimizelyExperimentVisitedNotification</code> is triggered.  For more details on the <code>OptimizelyExperimentVisitedNotification</code>, you can refer <a href=\"/ios/reference/index.html#subscribe-to-nsnotifications\">here</a>.</p>\n<h2 id=\"network-settings\">Network Settings</h2>\n<p>There are only two instances when the Optimizely iOS SDK uses a network connection: when downloading the config file (which contains all experiment configuration information) and when returning event tracking data.  By default, network calls are automatically made every 2 minutes.  The Optimizely iOS SDK allows you to customize how often these network calls are made by:</p>\n<ol>\n<li>Customizing the 2 minute interval</li>\n<li>By turning off automatic sending of events and allowing you to sending events manually.</li>\n</ol>\n<p>The first option is to customize the interval for how often you want network calls to be made. To adjust the interval in seconds, you can use the <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/dispatchInterval\">dispatchInterval</a> method, which should be called prior to <code>startOptimizely</code> at the beginning of your <code>application:didFinishLaunchingWithOptions:</code> method:</p>\n<pre><code class=\"lang-obj-c\">    // Configure a network call to be made every minute\n    [Optimizely sharedInstance].dispatchInterval = 60;\n\n    [Optimizely startOptimizelyWithAPIToken:YOUR_API_TOKEN launchOptions:launchOptions];\n</code></pre>\n<p>The second option is to turn off the interval and manually make network calls.  Setting <code>dispatchInterval</code> to 0 or a negative value will disable the automatic sending of events. You will need to send events manually using <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/dispatch\">dispatch</a>, which is also when the config file will be downloaded.</p>\n<p>To turn off the automatic sending of events, you can set the value of <a href=\"/ios/help/html/Classes/Optimizely.html#//api/name/dispatchInterval\">dispatchInterval</a> to 0 at the beginning of your <code>application:didFinishLaunchingWithOptions:</code> method:</p>\n<pre><code class=\"lang-obj-c\">\n#ifdef DEBUG\n    [Optimizely enableEditor];\n#endif\n\n    // Configure a network call to be made every minute\n    [Optimizely sharedInstance].dispatchInterval = 0;\n\n    [Optimizely sharedInstance].shouldReloadExperimentsOnForegrounding = YES;\n    [Optimizely startOptimizelyWithAPIToken:YOUR_API_TOKEN launchOptions:launchOptions];\n</code></pre>\n<p>To manually send events, in the appropriate function (e.g. where you make other network calls or after a custom event goal is triggered):</p>\n<pre><code class=\"lang-obj-c\">- (void)userDidSwipeTask:(id)sender {\n    [Optimizely trackEvent:@&quot;User Deleted Task&quot;];\n\n    // Dispatch events to the network\n    [Optimizely dispatch];\n\n    //The rest of your handler\n}\n</code></pre>\n<h2 id=\"manual-activation\">Manual Activation</h2>\n<h3 id=\"experiment-activation-modes\">Experiment Activation Modes</h3>\n<p>There are two different types of activation modes for Optimizely Mobile experiments.</p>\n<h4 id=\"automatic-default-\">Automatic (Default)</h4>\n<p>By default, Optimizely buckets users and activates the experiment as soon as the app starts and the startOptimizely method is called (either synchronously or asynchronously). Experiments are marked as visited when the end user reaches an element that has been modified in the experiment.</p>\n<h4 id=\"manual\">Manual</h4>\n<p>In manual activation mode, developers can specify, via an in-app API call, at which point they want to activate a given experiment. Manual activation allows you to separate the experiment start (which buckets the users and activates the experiment) from startOptimizely, which loads the datafile and any remote assets, such as images. Manual activation is only available for SDK versions 1.3.0 and above.</p>\n<p><em>Please note that visitors still must meet Audience targeting conditions for a manually activated experiment to be eligible for that experiment.</em> Manual activation does not bypass Audience conditions.</p>\n<p>Toggle between manual and automatic activation mode from the Options &gt; Activation Mode menu in the Editor:</p>\n<p><img src=\"/assets/img/ios/activation_mode.png\" alt=\"Drawing\" style=\"width: 50%;\"/></p>\n<h3 id=\"use-cases\">Use Cases</h3>\n<h4 id=\"use-case-1-set-additional-metadata-for-your-audiences-before-evaluating-targeting-conditions-for-an-unactivated-experiment-\">Use case #1: Set additional metadata for your audiences before evaluating targeting conditions for an unactivated experiment.</h4>\n<p>Bucketing only occurs for your audiences when activateExperiment is called and NOT when startOptimizely is called, and thus any custom tags you set before the experiment starts will be considered for targeting.\nFor example, you can mark a user as a “VIP” at one point during a session, then use this tag for an experiment later in the same session.\nWith automatic activation mode, you can only target using tags set before the app was started (and thus set in a previous session).</p>\n<h4 id=\"use-case-2-bucket-only-a-subset-of-users-who-access-less-frequently-used-areas-of-your-app-\">Use case #2: Bucket only a subset of users who access less frequently used areas of your app.</h4>\n<p>Bucketing users when the app loads, which is done in automatic mode, may not be the best choice for experiments involving an experience that not all users visit.\nFor example, if you want to test a feature deep in your user experience that only 10% of users visit, you wouldn’t necessarily want to bucket all users when you launch your app (as is done with automatic mode), because this could lead to skewed sampling.\nIf you manually activate your experiment only when users reach that experience, you can bucket users at the point where they visit that feature, and run tests on only those users.</p>\n<h4 id=\"use-case-3-quick-load-assets-for-consistency-\">Use case #3: Quick-load assets for consistency.</h4>\n<p>Remote assets distributed by the Optimizely CDN, such as images you upload to our editor, start loading asynchronously when the app starts. As a result, if any assets fail to load before an experiment is viewed due to slow internet speeds, the user is not showed the variation and is instead shown the control even though that user has been bucketed.\nThe variation will be shown to the user the next time he or she opens the app, assuming the assets have loaded before he or she views the experiment, leading to an inconsistent user experience and possibly even skewed results.\nIn manual activation mode, you can activate experiments right when you want to show them, giving the user’s device more time to load assets associated with that experiment.</p>\n<h3 id=\"manual-activation-example\">Manual Activation Example</h3>\n<pre><code class=\"lang-obj-c\">// Calling start Optimizely will not activate any manual experiments.\n// Instead you have to activate them manually for users to see your experiment\n[Optimizely startOptimizelyWithAPIToken:myOptimizelyAPIKey\n                          launchOptions:launchOptions];\n\n...\n\n// You specify when you want to activate each manual experiment.\n// For use case #1 above, this can be useful if you want to wait until you\n// have additional data for a user and then store that data as custom tags.\n// For example, we now know that the user is a VIP user so we set a tag for that\n[Optimizely setValue:@&quot;VIP&quot; forCustomTag:@&quot;accountType&quot;];\n\n// Activate a manual experiment that takes the custom tag we just set into account\nBOOL success = [Optimizely activateManualExperiment:myExperimentId];\n</code></pre>\n<h2 id=\"debugging-your-experiments\">Debugging Your Experiments</h2>\n<p>For full details on how to use NSNotifications and the Experiment Data Object, you can refer to this <a href=\"https://help.optimizely.com/hc/en-us/articles/205156117-QA-Your-Optimizely-iOS-Experiments\">QA article</a> in Optiverse.</p>\n<h3 id=\"subscribe-to-nsnotifications\">Subscribe to NSNotifications</h3>\n<p>Optimizely provides a couple NSNotificationCenter notifications for developers to observe.  Some use cases for implementing a notification include debugging and a way to interact with your other analytics tools.</p>\n<p><code>OptimizelyStartedNotification</code> is triggered when Optimizely has successfully completed startup.</p>\n<p><code>OptimizelyFailedToStartNotification</code> is triggered when Optimizely has failed to complete startup.</p>\n<p><code>OptimizelyExperimentVisitedNotification</code> is triggered when an experiment is viewed by the user. The userInfo in the notification will have metadata which includes experiment Id, variation Id, experiment description and variation description for the experiment that was visited.</p>\n<p><code>OptimizelyGoalTriggeredNotification</code> is triggered when an Optimizely goal is tracked and a conversion is counted. The user info in the notification will list the experiment IDs for which this was counted as a conversion.</p>\n<p><code>OptimizelyNewDataFileLoadedNotification</code> is triggered when an application resumes from foregrounding and a new experiment datafile is applied. This notification only triggers in Normal Mode, and not in Edit Mode.</p>\n<p>The following sample shows how to register for a notification:</p>\n<pre><code class=\"lang-obj-c\">-(void)registerForOptimizelyNotifications {\n    [[NSNotificationCenter defaultCenter] addObserver:self\n        selector:@selector(experimentDidGetViewed:)\n            name:OptimizelyExperimentVisitedNotification object:nil];\n}\n</code></pre>\n<h3 id=\"experiment-data-object\">Experiment Data Object</h3>\n<p>Optimizely&#39;s Experiment Object will provide information about what part of the experiment life cycle a user is part of.  There are two main objects: <code>allExperiments</code> and <code>visitedExperiments</code>.  <code>allExperiments</code> contains all running, paused, and draft experiments in your Optimizely project.  <code>visitedExperiments</code> contains all experiments in your Optimizely project that a user has actually visited. You can also query for the <code>OptimizelyExperimentData</code> associated to a given experimentId by using <code>getExperimentDataById:</code>.</p>\n<p>Each experiment is represented as an <code>OptimizelyExperimentData</code> object. For more info on the properties contained there, see the class reference for <a href=\"/ios/help/html/Classes/OptimizelyExperimentData.html\">OptimizelyExperimentData</a>.</p>\n<p>Sample usage of how this data looks is listed below:</p>\n<pre><code class=\"lang-obj-c\">for (OptimizelyExperimentData *data in [Optimizely sharedInstance].allExperiments) {\n    // Lists all running, paused, and draft experiments\n    NSLog(@&quot;All Experiments: %@, %@, %u, visitedEver: %s, visitedCount: %ld&quot;, data.experimentName, data.variationName, data.state, data.visitedEver ? &quot;true&quot; : &quot;false&quot;, (unsigned long) data.visitedCount);\n}\n\nfor (OptimizelyExperimentData *data in [Optimizely sharedInstance].visitedExperiments) {\n    // Lists all experiments that a user has visited\n    NSLog(@&quot;Visited Experiments: %@, %@, %u, visitedEver: %s, visitedCount: %ld&quot;, data.experimentName, data.variationName, data.state, data.visitedEver ? &quot;true&quot; : &quot;false&quot;, (unsigned long)data.visitedCount);\n}\n\n// This will get the experiment with the corresponding experimentId\nOptimizelyExperimentData *data = [Optimizely getExperimentDataById:@&quot;EXPERIMENT_ID&quot;];\n</code></pre>\n<h3 id=\"audience-information\">Audience Information</h3>\n<p>There are a couple utility functions that you can use to help aid in debugging audiences. <code>getAudiences</code> will return an array of all the audiences associated with your project. Each audience is represented as an NSDictionary and you&#39;ll be able extract additional metadata through the following keys: <code>audience_id</code>, <code>conditions</code>, and <code>name</code>. From there you can check whether or not the user currently satisfy a given audience by calling <code>isUserInAudience:</code> with a specific audienceId. Keep in mind that both of these methods need to be called after Optimizely is started.</p>\n<p>Here&#39;s an example below:</p>\n<pre><code class=\"lang-obj-c\">// Make sure to call the helper functions after starting Optimizely\n[Optimizely startOptimizelyWithAPIToken:myOptimizelyAPIKey\n                          launchOptions:launchOptions];\n\n// Gets an array that holds all your project audiences\nNSArray *audiences = [Optimizely getAudiences];\n\nfor (NSDictionary *audience in audiences) {\n    // You can access the metadata associated with each audience\n    // Here we&#39;re just getting each audience&#39;s audienceId\n    NSString *audienceId = audience[@&quot;audience_id&quot;];\n\n    // We can then check to see if the user currently satisfies those\n    // audience conditions\n    BOOL included = [Optimizely isUserInAudience:audienceId];\n    NSLog(@&quot;The user %@ included in audience: %@&quot;, included ? @&quot;is&quot; : @&quot;isn&#39;t&quot;, audienceId);\n}\n</code></pre>\n<h3 id=\"forcing-a-variation\">Forcing a Variation</h3>\n<p>Sometimes you&#39;ll want to try out your experiment before it goes live and outside of preview mode. You may spend a lot of time re-bucketing yourself in order to get into all the experiment combinations. Now you can opt to force an experiment into a given variation with <code>forceVariation:ofExperiment:</code>. <em>You must force the variation before calling start Optimizely.</em></p>\n<p>When you force a variation for a given experiment, we&#39;ll reset the app&#39;s userId and try to force that experiment/variation if they are both valid. This should be called before startOptimizely is called and keep in mind that you should only use this for testing your experiments. You should NOT ship this to your customers.</p>\n<p>Here&#39;s an example below:</p>\n<pre><code class=\"lang-obj-c\">// Force the variation and experiment specified by those two ids\n[Optimizely forceVariation:myVariationId ofExperiment:myExperimentId];\n\n// Make sure to call it before start Optimizely is called\n[Optimizely startOptimizelyWithAPIToken:myOptimizelyAPIKey\n                          launchOptions:launchOptions];\n</code></pre>\n<p>To find a variation&#39;s ID, head to the experiment editor and click on the &quot;Variation Settings&quot; button on the black bar on the far left-hand side of the window.</p>\n<p><strong>Note your experiment must not be paused for forceVariation to take effect.</strong></p>\n<h3 id=\"programmatically-enable-preview-mode\">Programmatically Enable Preview Mode</h3>\n<p>While preview mode can be enabled from the dashboard it can also be enabled from code.  This allows you to preview variations across all of your experiments without needing to connect to the editor.  Preview mode has UI that allows you easily switch variations and view event logs.</p>\n<pre><code class=\"lang-obj-c\">[Optimizely enablePreview];\n[Optimizely startOptimizelyWithAPIToken:YOUR_API_TOKEN launchOptions:launchOptions];\n</code></pre>\n<h3 id=\"resetting-qa-state\">Resetting QA State</h3>\n<p>Uninstalling the app everytime to QA your builds with Optimizely can be quite tedious. Now you can use <code>resetUserBucketing</code> to clear any variations that the current app user may have already been bucketed into. This will also remove the cached data file. This is useful if you want to insure that you&#39;re treated as a new user each time you start the app. Keep in mind that you must call <code>resetUserBucketing</code> before you start Optimizely.</p>\n<p>Here&#39;s an example below:</p>\n<pre><code class=\"lang-obj-c\">// Reset user bucketing\n[Optimizely resetUserBucketing];\n\n// Make sure to call it before start Optimizely is called\n[Optimizely startOptimizelyWithAPIToken:myOptimizelyAPIKey\n                          launchOptions:launchOptions];\n</code></pre>\n<h3 id=\"verbose-logging\">Verbose Logging</h3>\n<p>Enabling verbose logging allows you to view detailed log output. This will provide more information about experiments and its goals, your Live Variables, Code Blocks, and more.</p>\n<pre><code class=\"lang-obj-c\">// Enable verbose logging\n[Optimizely sharedInstance].verboseLogging = YES;\n\n// Make sure to call it before start Optimizely is called\n[Optimizely startOptimizelyWithAPIToken:myOptimizelyAPIKey\n                          launchOptions:launchOptions];\n</code></pre>\n<h2 id=\"upgrading-to-a-new-sdk\">Upgrading to a new SDK</h2>\n<p>To keep up with SDK updates, you can refer to our <a href=\"https://github.com/optimizely/Optimizely-iOS-SDK/blob/master/CHANGELOG.md\">change log</a>.</p>\n<h4 id=\"using-cocoapods\">Using CocoaPods</h4>\n<p>Simply run <code>pod update</code>.</p>\n<h4 id=\"manual-installation-upgrade\">Manual Installation Upgrade</h4>\n<p>Repeat steps 1 and 2 <a href=\"/ios/getting-started/index.html#manual-installation\">here</a>. You may need to remove Optimizely.framework from your Frameworks directory before you drag in the new copy.</p>\n<!--\n#### SDK Specific Upgrade Instructions (for upgrading to SDK 0.8)\n0. [![SDK Version](http://img.shields.io/cocoapods/v/Optimizely-iOS-SDK.svg?style=flat)](https://github.com/optimizely/Optimizely-iOS-SDK/releases/) For manual upgrades, please follow steps 1 and 2 [here](/ios/getting-started/index.html#manual-installation).\n\n1. Remove the run script build phase (prior to version 0.8).\n  Click on your project and for any target that was using Optimizely, select\n  the run script build phase for `OptimizelyPrepareNibs.rb` and click the little\n  'x' on the right hand side of the build phase.\n\n2. If you haven't already, be sure to implement the [URL scheme](#urlscheme).\n-->\n<h2 id=\"uninstalling-optimizely\">Uninstalling Optimizely</h2>\n<p>There are two steps to uninstalling Optimizely.</p>\n<ol>\n<li><p><strong>Remove the SDK from your app.</strong>\nIf you installed via CocoaPods, simply remove the dependency on Optimizely\nand run <code>pod install</code> again. If you installed manually, you need to delete\nOptimizely.framework from your app. Whether or not you actually delete the\nframework or just remove the reference, it wont be compiled into your app any longer.</p>\n</li>\n<li><p><strong>Remove the run script build phase (prior to version 0.8).</strong>\nClick on your project and for any target that was using Optimizely, select\nthe run script build phase for <code>OptimizelyPrepareNibs.rb</code> and click the little\n&#39;x&#39; on the right hand side of the build phase.</p>\n</li>\n</ol>\n"}},"guide":{"index":{"template":"page-sidebar","title":"Optimizely iOS SDK Tutorial","body":"<h1 id=\"optimizely-ios-sdk-tutorial\">Optimizely iOS SDK Tutorial</h1>\n<p>The following steps will allow you to try out Optimizely&#39;s SDK in our Tutorial App.  This guide is a walkthrough of all the key code that you can include in your app prior to releasing your app live to the App Store.</p>\n<h2 id=\"download-the-tutorial-app\">Download the tutorial app</h2>\n<p>The tutorial app is included as a sub directory in the SDK directory.  It can be found in the <em><a href=\"https://github.com/optimizely/Optimizely-iOS-SDK/tree/master/TutorialApp\" target=\"_blank\">TutorialApp</a></em> folder in the SDK.</p>\n<p><a href=\"http://developers.optimizely.com/ios/help/html/index.html\"><img src=\"http://img.shields.io/cocoapods/v/Optimizely-iOS-SDK.svg?style=flat\" alt=\"SDK Version\"></a></p>\n<p><a href=\"http://github.com/optimizely/Optimizely-iOS-SDK/zipball/master\">ZIP</a> | <a href=\"http://github.com/optimizely/Optimizely-iOS-SDK/tarball/master\">TAR</a> | <a href=\"http://github.com/optimizely/Optimizely-iOS-SDK\">GitHub</a></p>\n<h2 id=\"create-an-ios-project\">1. Create an iOS Project</h2>\n\n<p>To create an iOS project, select &quot;Create New Project&quot; in the <a href=\"https://www.optimizely.com/dashboard\">Optimizely Dashboard</a>:</p>\n<p>   <img src=\"/assets/img/ios/New_projectbutton.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p>   <img src=\"/assets/img/ios/create-project.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p><a name=\"project-code\"></a>Once you&#39;ve created a project, please take a look at the <code>Settings</code> tab to find your project ID and API key which you will use during installation:</p>\n<p><img src=\"/assets/img/ios/project-code.png\" alt=\"Project Code Dialog\"></p>\n<h2 id=\"add-your-api-token\">2. Add Your API token</h2>\n\n<ol>\n<li>Now, you&#39;re ready to add your API token to the tutorial app!  Open the <code>AppDelegate.m</code> file in the Project Navigator.  Replace the dummy API token <code>@&quot;AAMseu0A6cJKXYL7RiH_TgxkvTRMOCvS~123456&quot;</code> at the beginning of <code>application:didFinishLaunchingWithOptions:</code> in your\napp delegate. The code can be copied from your <code>Project Code</code>, which you can find by selecting the appropriate iOS Project in your <a href=\"https://www.optimizely.com/dashboard\">Optimizely Dashboard</a>.  For more details, you can refer back to <a href=\"#accountcreation\">Step 1: Create an iOS project</a>.</li>\n</ol>\n<p><img src=\"/assets/img/ios/project-code.png\" alt=\"Project Code Dialog\"></p>\n<p><em>Note: We recommend putting this code at the beginning of your <code>application:didFinishLaunchingWithOptions:</code> function.</em></p>\n<ol>\n<li><p><a name=\"urlscheme\"></a> In order to enter Edit Mode (which will allow your app to be detected by Optimizely&#39;s Editor), you&#39;ll have to define a URL scheme for Optimizely.</p>\n<ol>\n<li><a name=\"urlschemeInfo\"></a> In the project editor, click on &quot;Targets&quot; -&gt; Your app name -&gt; &quot;Info&quot; tab.</li>\n<li><p>Add <code>optly{PROJECT_ID}</code> to &quot;URL Schemes.&quot;  Your Project ID is available at the bottom of the <a href=\"#project-code\">Project Code</a> dialog box. For instance, if your Project ID is <code>123456</code>, your URL Scheme would be <code>optly123456</code>.\nOnce completed, your <code>URL Scheme</code> should look like this:\n<img src=\"/assets/img/ios/project-plist.png\" alt=\"Drawing\" style=\"width: 100%; padding-bottom:10px;\"/></p>\n</li>\n<li><p><a name=\"urllinkgenerate\"></a>Once you run your app in DEBUG mode with the SDK installed, you should see the image below in your <a href=\"https://www.optimizely.com/dashboard\">Optimizely Dashboard</a>.  Once the SDK is detected, the Create Experiment button will appear, and you can continue to Step 3 to create your experiment.</p>\n<p>  <img src=\"/assets/img/ios/sdk-detected.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"create-an-experiment\">3. Create An Experiment</h2>\n\n<p>Once you have a project created and the SDK installed, you should be ready to start running experiments to generate more value from your mobile apps.</p>\n<ol>\n<li>In the Optimizely Application, select the project that you use for your iOS experiments and click Create Experiment.</li>\n</ol>\n<p><img src=\"/assets/img/ios/create_experiment.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<ol>\n<li>Put the app into <em>Edit Mode</em> by drawing the Optimizely &#39;O&#39;.</li>\n</ol>\n<h2 id=\"modify-live-variables\">4. Modify Live Variables</h2>\n\n<p>Live variables have already been added to the sample app. You can refer to the <em>LiveVariablesViewController.m</em> file.  There are 3 examples of live variables used in that file, which are shown below.  Save your experiment after you have made the change.</p>\n<p><img src=\"/assets/img/ios/live_variable_number.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n<p>For more details about live variables, you can refer <a href=\"../reference/index.html#register-live-variables\">here</a>.</p>\n<h2 id=\"modify-code-blocks\">5. Modify Code Blocks</h2>\n\n<p>Code Blocks have already been added to the sample app. You can refer to the <em>CodeBlocksViewController.m</em> file.  There is 1 example of a code block used in that file, which are shown below.  Save your experiment after you have made the change.</p>\n<ol>\n<li><p>If you tap on &quot;Code Blocks&quot; &gt; &quot;Sign in&quot; without modifying the code block, the View Controller that will appear is shown below:</p>\n<p><img src=\"/assets/img/ios/code_block_2.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n</li>\n<li><p>Return to the &quot;Sign in&quot; View Controller:</p>\n<p><img src=\"/assets/img/ios/code_blocks_3.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n</li>\n<li><p>Now, select &quot;One Stage&quot;, and if you navigate through the app, you will see a new screen appear, which is shown below:</p>\n<p><img src=\"/assets/img/ios/code_blocks_4.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n</li>\n</ol>\n<p>For more details about code blocks, you can refer <a href=\"../reference/index.html#code-blocks\">here</a>.</p>\n<h2 id=\"add-custom-tags\">6. Add Custom Tags</h2>\n\n<p>Custom tags sample code can be found in the <em>AppDelegate.m</em> and <em>CodeBlocksViewController.m</em> files.  In order to create a test that only runs for returning users as defined in the app, in your Optimizely experiment you can go to Audiences to set up the custom tag condition.</p>\n<p><img src=\"/assets/img/ios/custom_tags_guide.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n<p>For more details about custom tags, you can refer <a href=\"../reference/index.html#custom-tags\">here</a></p>\n<h2 id=\"track-event\">7. Track Event</h2>\n\n<p>trackEvent sample code can be found in the <em>CodeBlocksViewController.m</em> file.  In order to track the custom event for a specific experiment, you can click on the flag image on the top right of the screen next to the &quot;Start Experiment&quot; button.</p>\n<p><img src=\"/assets/img/ios/goals_flag.png\" alt=\"Drawing\" style=\"width: 30%;\"/></p>\n<p>From there, you can add a new goal of goal type custom event as shown below:</p>\n<p><img src=\"/assets/img/ios/goal_modal.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n<p>For more details, you can refer <a href=\"../reference/index.html#track-event\">here</a>.</p>\n<h2 id=\"revenue-tracking\">8. Revenue Tracking</h2>\n\n<p>Code for tracking revenue can be found in the <em>CodeBlocksViewController.m</em> file.  In order to track revenue for a specific experiment, you can click on the flag image on the top right of the screen next to the &quot;Start Experiment&quot; button.</p>\n<p><img src=\"/assets/img/ios/goals_flag.png\" alt=\"Drawing\" style=\"width: 30%;\"/></p>\n<p>From there, you can click on Add a Saved Goal &gt; Select Revenue:</p>\n<p><img src=\"/assets/img/ios/revenue.png\" alt=\"Drawing\" style=\"width: 60%;\"/></p>\n<p>For more details, you can refer <a href=\"../reference/index.html#revenue-tracking\">here</a>.</p>\n<h2 id=\"analytics-integrations\">9. Analytics Integration</h2>\n\n<p>For guidance on how to implement Google Analytics and Mixpanel integrations, you can refer to the <em>AppDelegate.m</em> file in the comments.</p>\n<p>For more details, you can refer <a href=\"../reference/index.html#analytics-integrations\">here</a></p>\n<h2 id=\"qa\">10. QA</h2>\n\n\n<h3 id=\"preview-mode\">Preview Mode</h3>\n<p>Preview mode allows you to view your app in a different variations for a given experiment in order to check that your app and the experiment are both running smoothly. To enter preview mode, connect your device to the editor, open the <code>Preview</code> menu, and click <code>Launch Preview</code></p>\n<p><img src=\"/assets/img/mobile/launch-preview.png\" style=\"width: 60%;\" alt=\"Enter Preview Mode\" /></p>\n<p>Your app will restart and you will see the Optimizely preview menu icon displayed over your app content.\n The icon may be repositioned by dragging it. Tapping the icon will reveal the Preview Menu which allows you to switch variations, view the goals that have been triggered so far, and see the code blocks and live variables that are included in the experiment.</p>\n<p><img src=\"/assets/img/ios/preview-menu.gif\" style=\"width: 40%;\" alt=\"Preview Mode Demo\" /></p>\n"}},"faqs":{"index":{"template":"page-sidebar","title":"Optimizely iOS SDK FAQs","body":"<h1 id=\"optimizely-ios-sdk-faqs\">Optimizely iOS SDK FAQs</h1>\n<p>Below are some frequently asked questions about the iOS SDK. You may also want to check out <a href=\"https://help.optimizely.com/hc/en-us/articles/201893400\">general product FAQs</a>.</p>\n<p>Can&#39;t find an answer to your question? We&#39;re happy to answer your question on <a href=\"mobile-support@optimizely.com\">mobile-support@optimizely.com</a>.</p>\n<p><a href=\"#iosversion\"><em>Q:</em> What iOS versions does Optimizely support?</a><br>\n<a href=\"#ioslibs\"><em>Q:</em> What third party libraries are used in the iOS SDK?</a><br>\n<a href=\"#iossize\"><em>Q:</em> What is the size of the iOS SDK?</a><br>\n<a href=\"#howiosworks\"><em>Q:</em> How does the SDK work?</a><br>\n<a href=\"#cantseeappineditor\"><em>Q:</em> My device is running the app but I can&#39;t see it in the editor.</a><br>\n<a href=\"#remoterepo\"><em>Q:</em> What should I do if I get a <code>Could not read from remote repository.</code> error?</a><br>\n<a href=\"#tableview\"><em>Q:</em> How do I modify a Table View Cell?</a><br>\n<a href=\"#compileerror\"><em>Q:</em> My app won&#39;t compile.</a><br>\n<a href=\"#dynamicimage\"><em>Q:</em> My dynamically rendered image does not render while using the Editor.</a><br>\n<a href=\"#visualeditorchange\"><em>Q:</em> I&#39;m trying to make a Visual Change with Optimizely&#39;s Visual Editor, but the View is not changing.</a><br>\n<a href=\"#resultspage\"><em>Q:</em> I am not seeing conversions or visitors on the results page.</a><br>\n<a href=\"#testflight\"><em>Q:</em> If I release my app via TestFlight, will the gesture be disabled?</a><br>\n<a href=\"#labeltextcutoff\"><em>Q:</em> Sometimes when I modify the text of a label the text gets cut off or doesn&#39;t break properly when I use the Visual Editor.  How can I fix that?</a><br>\n<a href=\"#64bit\"><em>Q:</em> Does Optimizely support 64-bit apps?</a><br></p>\n<p><a name=\"iosversion\"></a></p>\n<h5 id=\"-q-what-version-of-ios-is-supported-by-optimizely-s-ios-sdk-\"><em>Q: What version of iOS is supported by Optimizely&#39;s iOS SDK?</em></h5>\n<p><em>A:</em> Optimizely currently supports apps that are built for Apple iOS 7.0 and higher.  For earlier versions, the app will still run but the SDK will be disabled.</p>\n<p><a name=\"ioslibs\"></a></p>\n<h5 id=\"-q-what-third-party-libraries-are-used-in-the-ios-sdk-\"><em>Q: What third party libraries are used in the iOS SDK?</em></h5>\n<p><em>A: Libraries</em></p>\n<ul>\n<li>AFDownloadRequestOperation v2.0.1</li>\n<li>AFNetworking v2.5.4</li>\n<li>CTObjectiveCRuntimeAdditions v1</li>\n<li>SocketRocket v0.3.1</li>\n<li>FMDB v2.5</li>\n<li>Murmur3 v1</li>\n</ul>\n<p><a name=\"iossize\"></a></p>\n<h5 id=\"-q-what-is-the-size-of-the-ios-sdk-\"><em>Q: What is the size of the iOS SDK?</em></h5>\n<p><em>A:</em> Approximately 840KB</p>\n<p><a name=\"howiosworks\"></a></p>\n<h5 id=\"-q-how-does-the-sdk-work-\"><em>Q: How does the SDK work?</em></h5>\n<p><em>A:</em> Optimizely is implemented through an SDK and the Optimizely datafile.  To get started with Optimizely and run your first experiments, you simply need to install the SDK and add one line of code to your app.  The SDK will download the datafile which is comprised of JSON and contains all of the experiment and goal information necessary to deploy and control experiments and return data to our reporting.  The data file is hosted on our CDN and follows the attached schemas for iOS and Android.  You may view your datafile at cdn.optimizely.com/json/ios/1.0/&lt;project_id&gt;.json. Replace &quot;1.0&quot; in the example with the version of the SDK that you are using. For more details, you can refer to the following <a href=\"https://help.optimizely.com/hc/en-us/articles/205014107-How-Optimizely-s-SDKs-Work-SDK-Order-of-execution-experiment-activation-and-goals\">article</a>.  The platform works as shown below:</p>\n<p><em>SDK Contents</em></p>\n<ul>\n<li>Data File Contents</li>\n<li>Compiled into the app</li>\n<li>Downloads Config from CDN</li>\n<li>Executes experiments and tracks goals locally</li>\n<li>Offline caching/network logic</li>\n<li>Reports events back</li>\n<li>Integrated with dependency management systems for easy updates</li>\n</ul>\n<p><em>Datafile contents</em></p>\n<ul>\n<li>Active Experiments</li>\n<li>Draft Experiments</li>\n<li>Project goals</li>\n</ul>\n<p>The datafile follows this <a href=\"/ios/schema\">schema</a>.</p>\n<p><a name=\"cantseeappineditor\"></a></p>\n<h5 id=\"-q-my-device-is-running-the-app-but-i-can-t-see-it-in-the-editor-\"><em>Q: My device is running the app but I can&#39;t see it in the editor.</em></h5>\n<p><em>A:</em> First, confirm your device is connected to the internet and make sure that the API token that you passed into</p>\n<pre><code class=\"lang-obj-c\">[Optimizely startOptimizelyWithAPIToken:@&quot;YOUR-API-TOKEN&quot;\n                          launchOptions:launchOptions];\n</code></pre>\n<p>matches what you see in the Project Code box within Optimizely.</p>\n<p><a name=\"remoterepo\"></a></p>\n<h5 id=\"-q-what-should-i-do-if-i-get-a-could-not-read-from-remote-repository-error-\"><em>Q: What should I do if I get a <code>Could not read from remote repository.</code> error?</em></h5>\n<p><em>A:</em> Please make sure you have a GitHub account with <a href=\"https://help.github.com/articles/generating-ssh-keys\">SSH access</a> installed.</p>\n<p><a name=\"tableview\"></a></p>\n<h5 id=\"-q-how-do-i-modify-a-table-view-cell-\"><em>Q: How do I modify a Table View Cell?</em></h5>\n<p><em>A:</em> By default, each instance of a UITableViewCell in a UITableView will have the same changes applied to it.  If you would like to be able to modify a single UITableViewCell, you can <a href=\"#tag%20your%20views\">tag</a> the specific UITableViewCell with an optimizelyId.</p>\n<p><a name=\"compileerror\"></a></p>\n<h5 id=\"-q-my-app-won-t-compile-and-i-get-an-error-saying-\"><em>Q: My app won&#39;t compile and I get an error saying:</em></h5>\n<pre><code>Undefined symbols for architecture armv7s: &quot;_OBJC_CLASS_$_Optimizely&quot;,\nreferenced from: MY_CLASS\n</code></pre><p><em>A:</em> Certain build configurations require you to add <code>-framework Optimizely</code> to your Build Settings under &quot;Other Linker Flags.&quot; If you installed using CocoaPods, you may need to update or reset &quot;Other Linker Flags&quot; because you have settings in your project that conflict with CocoaPods&#39;s automatic addition of that flag.</p>\n<p><a name=\"dynamicimage\"></a></p>\n<h5 id=\"-q-my-dynamically-rendered-image-does-not-render-while-using-the-editor-\"><em>Q: My dynamically rendered image does not render while using the Editor.</em></h5>\n<p><em>A:</em> When using Optimizely to replace a dynamically-rendered image, the new image might not consistently render while using the Editor. Please use Preview to test how the replaced image will render in production.</p>\n<p><a name=\"visualeditorchange\"></a></p>\n<h5 id=\"-q-i-m-trying-to-make-a-visual-change-with-optimizely-s-visual-editor-but-the-view-is-not-changing-\"><em>Q: I&#39;m trying to make a Visual Change with Optimizely&#39;s Visual Editor, but the View is not changing.</em></h5>\n<p><em>A:</em> Optimizely applies changes once viewDidMoveToWindow is called.  The implication is that if you have code that modifies views after viewDidMoveToWindow is called (e.g. an animation that starts after the view is rendered), Optimizely will not be able to apply Visual Changes to the view.</p>\n<p><a name=\"resultspage\"></a></p>\n<h5 id=\"-q-i-am-not-seeing-conversions-or-visitors-on-the-results-page-\"><em>Q: I am not seeing conversions or visitors on the results page.</em></h5>\n<p><em>A:</em> There are two things to check if you not being counted as a visitor or seeing conversions on the results page as you&#39;re doing QA: that you meet targeting conditions and goals are being triggered properly.</p>\n<p>To be counted as a visitor and show up on the results page, you actually have to see the change that you made to the app (i.e. the Live Variable code has to actually execute or you have to see the change you made via the visual editor).  Goals are only sent to the server every 2 minutes (the app must be open for at least 2 minutes), or you need to background the app in order for events store locally to be sent to the server.</p>\n<p>To check that goals are triggering properly, you can use our <a href=\"https://help.optimizely.com/hc/en-us/articles/205156117-QA-Your-Optimizely-iOS-Experiments\">developer APIs</a> to check that:</p>\n<ul>\n<li>Your experiment is running</li>\n<li>Your goals are triggered properly</li>\n</ul>\n<p><a name=\"testflight\"></a></p>\n<h5 id=\"-q-if-i-release-my-app-via-testflight-will-the-gesture-be-disabled-\"><em>Q: If I release my app via TestFlight, will the gesture be disabled?</em></h5>\n<p><em>A:</em> If you release your app via TestFlight or as an enterprise app (not through the App Store), the gesture will not be disabled by default.  Be sure to disable the gesture in code by making a call to <a href=\"/ios/reference/index.html#disable-gesture\">disableGesture</a> before you release your app via TestFlight or anywhere other than the App Store so that your users cannot put the app into Edit Mode.</p>\n<p><a name=\"labeltextcutoff\"></a></p>\n<h5 id=\"-q-sometimes-when-i-modify-the-text-of-a-label-the-text-gets-cut-off-or-doesn-t-break-properly-when-i-use-the-visual-editor-how-can-i-fix-that-\"><em>Q: Sometimes when I modify the text of a label the text gets cut off or doesn&#39;t break properly when I use the Visual Editor.  How can I fix that?</em></h5>\n<p><em>A:</em> In order to make it such that the label wraps correctly, in your app code you will need to set the following properties for the label you are looking to modify with the Visual Editor:</p>\n<ul>\n<li>set Lines property to 0</li>\n<li>set Line Breaks property to Word Wrap</li>\n</ul>\n<p><a name=\"64bit\"></a></p>\n<h5 id=\"-q-does-optimizely-support-64-bit-apps-\"><em>Q: Does Optimizely support 64-bit apps?</em>.</h5>\n<p><em>A:</em> Yes, Optimizely does support 64-bit apps.  Optimizely&#39;s SDK includes a 64-bit slice.  Architectures supported in the fat file include: armv7 and arm64.</p>\n"}},"changelog":{"index":{"template":"page-sidebar","title":"Optimizely iOS SDK Changelog","body":"<h1 id=\"optimizely-ios-sdk-changelog\">Optimizely iOS SDK Changelog</h1>\n<h3 id=\"1-6-1\">1.6.1</h3>\n<p>July 25, 2016</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixed an error in which default segments would not be sent with events.</li>\n<li>Fixed a crash when <code>[Optimizely trackRevenue:withDescription:]</code> is called in the app, but the downloaded datafile does not have a revenue goal.</li>\n</ul>\n<h3 id=\"1-6-0\">1.6.0</h3>\n<p>July 12, 2016</p>\n<p><em>New Features:</em></p>\n<ul>\n<li><p><strong>Enhanced Preview Mode:</strong> Aside from a new look, the enhanced Preview mode allows you to select multiple variations from different experiments and enable them at the same time. A new API also allows you to enable Preview mode programmatically without having to go through the web client. You can also enter Preview mode while in Edit mode by tapping on the Editor icon.</p>\n</li>\n<li><p><strong>New APIs:</strong></p>\n<ul>\n<li>Enter Preview mode programmatically without having to go through the web client:\n<code>[Optimizely enablePreview]</code></li>\n</ul>\n</li>\n</ul>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixed warning from Optimizely Umbrella Header not importing OptimizelyDimension.h.</li>\n<li>Optimizely File Manager class is not dependent on a Singleton class anymore. This helps avoid errors in initialization.</li>\n<li>Views should not be retained when the app is backgrounded. Release the registered views when the app is backgrounded, but re-register the views when the app is foregrounded.</li>\n</ul>\n<h3 id=\"1-5-0\">1.5.0</h3>\n<p>May 23, 2016</p>\n<p><em>New Features:</em></p>\n<ul>\n<li><p><strong>Optimizely Attributes:</strong> You can now create Optimizely Attributes for iOS in the project dashboard. These attributes can be used to segment results on the results page and for audience targeting. New APIs to get and set the value for attributes have been created. More details can be found <a href=\"https://help.optimizely.com/Target_Your_Visitors/Mobile_Attributes\">here</a>.</p>\n<ul>\n<li>You can set an attribute&#39;s value by using either<pre><code>[Optimizely setValue:(NSString *)value forAttributeId:(NSString*)attributeId]\n</code></pre>or<pre><code>[Optimizely setValue:(NSString *)value forAttributeApiName:(NSString *)attributeApiName].\n</code></pre></li>\n<li>You can get an attribute&#39;s current value by using either<pre><code>[Optimizely getAttributeValueForAttributeId:(NSString *)attributeId]\n</code></pre>or<pre><code>[Optimizely getAttributeValueForAttributeApiName:(NSString *)attributeApiName].\n</code></pre></li>\n<li>You can get a copy of all attributes by calling [Optimizely getAttributes]. This replaces the previous<pre><code>[Optimizely getDimensions]\n</code></pre>call.</li>\n</ul>\n</li>\n<li><p><strong>New Headers:</strong>\nOptimizelyAttribute.h - Represents an Optimizely Attribute. Read more about Optimizely Attributes <a href=\"https://help.optimizely.com/Target_Your_Visitors/Mobile_Attributes\">here</a>.</p>\n</li>\n<li><p><strong>New APIs:</strong>\nAdded an API to access the Optimizely running mode:\n<code>[Optimizely sharedInstance].runningMode.</code></p>\n</li>\n</ul>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixed sending Localytics Name + Variation without parenthesis.</li>\n<li>Fixed memory leak caused by not releasing an allocated memory in a non-arc source file.</li>\n<li>Improved editor stability.</li>\n<li>Refactored kill switch file retrieval to reduce Optimizely startup time.</li>\n</ul>\n<p><em>Deprecations:</em></p>\n<ul>\n<li><code>[Optimizely getDimensions]</code> is now deprecated. Please use <code>[Optimizely getAttributes]</code>.</li>\n<li>OptimizelyDimension.h: This class is now deprecated. Please use Optimizely Attribute.</li>\n</ul>\n<h3 id=\"1-4-2\">1.4.2</h3>\n<p>March 9, 2016</p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>We made a merge error and the internal version is 1.4.2 instead of 1.4.0. We are trying to make all affected files consistent with 1.4.2 since customers are already using 1.4.2.</li>\n</ul>\n<h3 id=\"1-4-1\">1.4.1</h3>\n<p>Skipped</p>\n<h3 id=\"1-4-0\">1.4.0</h3>\n<p>February 25, 2016</p>\n<p><em>New Features:</em></p>\n<ul>\n<li><em>Plugins Rearchitecture:</em> We&#39;ve spent some time thinking about how Optimizely can integrate with other plugins. We want to enable 3rd parties to build point solutions that leverage Optimizely&#39;s platform in new ways.<ul>\n<li><code>[Optimizely registerPlugin:(id&lt;OptimizelyPlugin&gt;) plugin]</code> - register a plugin.</li>\n<li>Use this method if your app is in Swift instead of <code>[Optimizely activateAmplitudeIntegration]</code>, <code>[Optimizely activateLocalyticsIntegration]</code>, or <code>[Optimizely activateMixpanelIntegration]</code>.</li>\n<li>If are using a custom Plugin in Objective-C, use the <code>OptimizelyRegisterPlugin</code> macro from OptimizelyPlugin.h</li>\n</ul>\n</li>\n<li><em>Developer Improvements:</em> We want to enable customers to use the <a href=\"https://help.optimizely.com/hc/en-us/articles/200040195-Tracking-offline-conversion-events-with-Optimizely\">offline conversions</a> API to its full potential, so we&#39;ve exposed essential parameters needed to send offline conversion events.<ul>\n<li><code>[Optimizely getDimensions]</code> - get an NSArray of all OptimizelyDimensions in the SDK.</li>\n<li><code>[Optimizely sharedInstance].universalUserId</code> - your custom Universal User Id for the end user. Set the universalUserId to identify the end user across devices. More info can be found <a href=\"https://help.optimizely.com/hc/en-us/articles/203626830-Universal-User-ID-Beta\">here</a></li>\n<li><code>[Optimizely sharedInstance].optimizelyEndUserId</code> - read only property to get the Optimizely End User Id created by the Optimizely SDK.</li>\n</ul>\n</li>\n<li><em>New Headers:</em><ul>\n<li>OptimizelyDimension.h - A representation of the data in an individual Optimizely Dimension. Read more about Dimensions <a href=\"https://help.optimizely.com/hc/en-us/articles/200040865-Dimensions-Capture-visitor-data-through-the-API\">here</a>.</li>\n<li>OptimizelyPlugin.h - Integrations allow customers to track Optimizely experiments in an external tool. A plugin written on the Optimizely platform can edit views, live variables, and code blocks. <a href=\"/integrations/#mobile-analytics\">Read more</a>.</li>\n</ul>\n</li>\n</ul>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixed an issue with tracking revenue goals with an empty string description.</li>\n</ul>\n<p><em>Deprecated Methods:</em></p>\n<ul>\n<li><code>[Optimizely sharedInstance].userId</code> is now deprecated. Please use either <code>universalUserId</code> or <code>optimizelyEndUserId</code> instead.</li>\n</ul>\n<p><em>Breaking Changes:</em></p>\n<ul>\n<li><em>Optimizely Plugins:</em> These methods are no longer needed to activate the Optimizely Integrations. The integrations must be activated from the web editor by flipping them to the ON position. Read more about integrations <a href=\"https://help.optimizely.com/hc/en-us/articles/203729580-Introduction-to-Optimizely-Integrations\">here</a>.<ul>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/204963198-Integrating-Optimizely-with-Amplitude-for-iOS-and-Android\"><code>[Optimizely activateAmplitudeIntegration]</code></a> - activate the Amplitude integration via the Integrations tab in the web editor.</li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/209645787-Integrating-Optimizely-with-Localytics-for-iOS-and-Android\"><code>Optimizely activateLocalyticsIntegration]</code></a> - activate the Localytics integration via the Integrations tab in the web editor.</li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/200040025-Integrating-Optimizely-with-Mixpanel-Web-iOS-and-Android-\"><code>[Optimizely activateMixpanelIntegration]</code></a> -  activate the Mixpanel integration via the Integrations tab in the web editor.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-2\">1.3.2</h3>\n<p>November 20, 2015</p>\n<p><strong>Optimizely will no longer support Xcode 6</strong></p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixed a bug with preview mode and visual experiments</li>\n</ul>\n<h3 id=\"1-3-1\">1.3.1</h3>\n<p>November 10, 2015</p>\n<p><strong>Optimizely will no longer support Xcode 6</strong></p>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixed issue when archiving with the SDK</li>\n</ul>\n<h3 id=\"1-3-0\">1.3.0</h3>\n<p>November 6, 2015</p>\n<p><em>Announcements:</em>\n<em>Twitter Fabric Integration.</em> We&#39;re excited to announce our partnership with Fabric, Twitter&#39;s modular mobile platform that makes it easy for developers to install and maintain SDKs within their apps. Find out more <a href=\"https://blog.optimizely.com/2015/10/21/optimizely-twitter-fabric/\">here</a></p>\n<p><em>New Features:</em></p>\n<ul>\n<li><em>Developer Improvements.</em> We&#39;ve added a litany of testing methods to our SDK to help you debug your experiments much more quickly and easily<ul>\n<li>isUserInAudience - Check if the user is in a particular audience</li>\n<li>getExperimentDataById - Get an experiment&#39;s metadata with that experiment&#39;s ID</li>\n<li>resetUserBucketing - Remove a user&#39;s bucketing information for all experiments</li>\n<li>forceVariationOfExperiment - Force a user into a certain experiment variation\nRead more in-depth descriptions <a href=\"/ios/reference/index.html#debugging-your-experiments\">here</a></li>\n</ul>\n</li>\n<li><em>Manual activation.</em> You can now manually specify, in code, when you want your experiments to activate (by default, all active experiments are activated when start Optimizely is called). Some important use cases include setting additional targeting metadata before activating an experiment and only bucketing users who visit a certain activity in your app\nRead more in-depth descriptions <a href=\"/ios/reference/index.html#experiment-activation-modes\">here</a></li>\n<li><em>New notification types:</em><ul>\n<li>OptimizelyFailedToStartNotification</li>\n<li>OptimizelyStartedNotification</li>\n</ul>\n</li>\n<li><em>Code Block Callbacks in Edit Mode.</em> Please note that code block callbacks will only work in edit mode</li>\n</ul>\n<p><em>Bug Fixes:</em></p>\n<ul>\n<li>Fixed bug in language Audience condition</li>\n</ul>\n<h3 id=\"1-2-2\">1.2.2</h3>\n<p>October 12, 2015</p>\n<p><em>Bug Fixes</em></p>\n<ul>\n<li>Fixed more warnings in Xcode 7</li>\n</ul>\n<h3 id=\"1-2-1\">1.2.1</h3>\n<p>October 6, 2015</p>\n<p><em>Bug Fixes</em></p>\n<ul>\n<li>Fixed warnings stemming from Xcode 7 and static libraries</li>\n<li>Re-added armv7s which was removed by default in Xcode 7</li>\n</ul>\n<h3 id=\"1-2-0\">1.2.0</h3>\n<p>October 5, 2015</p>\n<p><em>New Features</em></p>\n<ul>\n<li><em>Audience targeting.</em> Improve your app’s retention by creating audiences of similar users and targeting them with relevant content.</li>\n<li><em>Connection-free changes.</em> Make changes to Live Variables and Code Blocks without connecting your device to Optimizely.</li>\n<li><em>Streamlined goal setting.</em> Save time during instrumentation with a faster and more accurate goal selection experience.</li>\n<li><em>Multi-target goals.</em> Accurately test entirely different variations by connecting multiple view or tap events to a single goal.</li>\n<li><em>Advanced preview and QA modes.</em> Release new features confidently with a rebuilt preview mode that allows you to simulate a live user experience in real time.</li>\n<li><em>Localytics integration.</em> See the impact your Optimizely experiments have on the key business metrics you track using Localytics.</li>\n</ul>\n"}},"articles":{"2-article-test":{"template":"page-sidebar","partial":"_article-summary.html","includeSiblingData":true,"title":"QA Optimizely iOS Experiments","summary":"Learn how to use Optimizely developer tools to QA your Optimizely experiments.\nYou can find examples of how to use each of the QA methods in Optimizely's TutorialApp, which can be [downloaded with the SDK](/ios/getting-started/index.html).  The corresponding guide can be found [here](\"/android/guide/index.html\").","body":"<h1 id=\"qa-optimizely-ios-experiments\">QA Optimizely iOS Experiments</h1>\n<p><em>THIS ARTICLE WILL HELP YOU:</em></p>\n<ul>\n<li>Learn how to use Optimizely developer tools to QA your Optimizely experiments</li>\n<li>Implement code samples of how to use Optimizely’s Experiment Data Object and NSNotifications to ensure your experiment is set up as expected</li>\n<li>You can find examples of how to use each of these methods in Optimizely&#39;s TutorialApp, which can be downloaded with the SDK.  The corresponding guide can be found <a href=\"&quot;/ios/guide/index.html&quot;\">here</a>.</li>\n</ul>\n<h3 id=\"overview\">OVERVIEW</h3>\n<p>So you’ve created your experiment, finished your setup, and you’d like to QA your experiment to make sure it’s working correctly. There are two main ways to QA your experiment, which include: <a href=\"https://help.optimizely.com/hc/en-us/articles/202296994#preview\">Preview Mode</a> and Developer Debugging tools. This article will focus on how to QA your experiment with developer tools.</p>\n<p><em>Preview mode</em></p>\n<p>This lets you see your variation changes as your user would. You can easily enter this from the editor from each variation tab’s settings icon. You can learn more about Preview Mode here.</p>\n<p><em>Developer debugging tools</em></p>\n<p>You can take advantage of Optimizely’s notifications and the data object in order to gain a better understanding of when your experiment is running. These tools will allow you to check that you are creating the experience, targeting the audience, and tracking the goals that you expect.</p>\n<p>TIP:</p>\n<blockquote>\n<p>Enable logging for QA (be sure to disable this feature when your app is live in the app store) <code>[Optimizely sharedInstance].verboseLogging = YES</code>. The logs include a number of useful messages such as: the SDK version, a log for each event that’s triggered, etc.</p>\n</blockquote>\n<p>In the following sections, we&#39;ll provide steps to follow to QA your experiment.</p>\n<p>NOTE:</p>\n<blockquote>\n<p>For information about the APIs that are being described in this article, including <a href=\"/ios/reference/index.html#subscribe-to-nsnotifications\">NSNotifications</a> and <a href=\"/ios/reference/index.html#experiment-data-object\">experiment data object</a>, you can always refer back to our <a href=\"/ios/help/html/index.html\">API documentation</a> for definitions on how these methods work!</p>\n</blockquote>\n<h3 id=\"debugging-your-experiments\">DEBUGGING YOUR EXPERIMENTS</h3>\n<p>In addition to the methods laid out in this article, our Developer Docs provide additional methods for debugging your experiments:</p>\n<ul>\n<li><a href=\"/ios/reference/index.html#subscribe-to-nsnotifications\">Subscribe to NSNotifications</a></li>\n<li><a href=\"/ios/reference/index.html#experiment-data-object\">Experiment Data Object</a></li>\n<li><a href=\"/ios/reference/index.html#audience-information\">Audience Information</a></li>\n<li><a href=\"/ios/reference/index.html#forcing-a-variation\">Forcing a Variation</a></li>\n<li><a href=\"/ios/reference/index.html#resetting-qa-state\">Resetting QA State</a></li>\n</ul>\n<h3 id=\"run-your-app-in-normal-mode\">RUN YOUR APP IN NORMAL MODE</h3>\n<p>There are two modes that you can run in your app with Optimizely:</p>\n<p><em>Edit mode:</em> This mode enables your device to connect to the Optimizely Editor. Your end users will not be able to put the app into this mode.</p>\n<p><em>Normal mode:</em> In this mode, experiments are running as they would to your end users.</p>\n<p>To QA your experiment as a developer, make sure that your app is in Normal mode so that you can see what your users will experience (you will not see the Edit mode status bar in your app).</p>\n<p>TIP:</p>\n<blockquote>\n<p>If your app is in Edit mode (you should see the Edit Mode status bar in your app), disconnect from the Editor.  Do this by running the app in Xcode again or clicking on the Connected to button next to Options, and disconnecting.</p>\n<p>If you are running your app for the first time with the SDK installed, you will see that the app should already be in Normal mode. You can also verify that your app is in normal mode by looking at your console logs (if you have verboseLogging enabled). The Optimizely experiment also has to have been started. You can see whether it&#39;s started by looking at the Start/Pause button in the Editor, or by looking at the experiment on the Home page.</p>\n</blockquote>\n<p>NOTE:</p>\n<blockquote>\n<p>Before pressing Start, you will want to make sure that you either have <a href=\"/ios/reference/index.html#custom-tags\">custom tags</a> set up or a separate project in a staging environment so that your live users do not see your experiment.</p>\n</blockquote>\n<p><img src=\"/assets/img/start_experiment.png\" alt=\"Drawing\" style=\"width: 50%;\"/></p>\n<p><em>CHECK TARGETING CONDITIONS, TRAFFIC ALLOCATION, AND STATUS</em></p>\n<p>An experiment is running when the datafile is successfully downloaded, the user meets the targeting conditions, traffic allocation is met, and the experiment is not locked. An experiment is locked when you modify the same view, variable or code block in multiple active experiments. An experiment can be in one of three states:</p>\n<ul>\n<li><code>OptimizelyExperimentDataStateDisabled</code></li>\n<li><code>OptimizelyExperimentDataStateRunning</code></li>\n<li><code>OptimizelyExperimentDataStateDeactivated</code></li>\n</ul>\n<p>For more details about how an experiment can be in each of these states, refer to our documentation of <a href=\"/ios/articles/1-article-test.html\">how the SDK works</a>.</p>\n<p>For iOS, you can check the experiment state by creating a variable to hold <code>allExperiments</code> array, and setting a breakpoint after in order to see the <em>_state</em> property of the <code>OptimizelyExperimentData</code> object. An experiment will be marked as <code>OptimizelyExperimentDataStateRunning</code> if the experiment is running.</p>\n<p><img src=\"/assets/img/ios/ios_qa_targeting_2.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p>To check the targeting conditions of the current visitor, read the Optimizely data object’s <em>_targetingConditions</em> property, to see what the conditions are currently. Creating a variable and setting a breakpoint, from 1, will allow you to see this.</p>\n<p>TIP:\nIf you don’t see the <em>_targetingConditions</em> and <em>_targetingMet</em> values that you expect, the app may need to be foregrounded or a call to refreshExperiments may need to be made.</p>\n<p>When the application is next brought to the foreground (after being backgrounded), the SDK re-checks targeting conditions, and if they have changed this will be reflected in the <em>_targetingConditions</em> property. You can also force re-checking of targeting conditions by calling <code>[Optimizely refreshExperiments]</code>.</p>\n<p><em>CHECK WHETHER THE VARIATION HAS BEEN VISITED</em></p>\n<p>A visitor is considered part of an experiment when they visit a variation. To check whether a visitor has seen visited an experiment by using the <code>OptimizelyExperimentVisitedNotification</code>. To verify that your experiment is running as expected, you can use this notification to fire when you expect it to.</p>\n<p>The syntax for this notification is shown below:</p>\n<pre><code class=\"lang-obj-c\">[[NSNotificationCenter defaultCenter] addObserver:self\n    selector:@selector(experimentReceivedNotification:)\n    name:OptimizelyExperimentVisitedNotification\n    object:nil];\n</code></pre>\n<p><img src=\"/assets/img/ios/ios_qa_visited_3.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p>Now, once you’ve navigated to the view controller where your variation is, you can view useful experiment data properties such as <em>_visitedEver</em>, <em>_visitedThisSession</em> and <em>_state</em>.</p>\n<p><em>CHECK DIFFERENT VARIATIONS</em></p>\n<p>Typically, if you want to check that different variations are working as expected, you can use Optimizely’s <a href=\"https://help.optimizely.com/hc/en-us/articles/202296994-Get-Started-on-Mobile-Optimization#preview\">Preview functionality</a>. If you want to test out different variations in normal mode, you&#39;ll have to delete the app from the device and re-install it. Optimizely stores which variation a users sees and makes sure they will always see this variation. Deleting the app treats the fresh installation as a new user.</p>\n<p>TIP:</p>\n<blockquote>\n<p>Optimizely’s Traffic Allocation will randomly bucket users into a variation based on the percentages that are set in the Optimizely Editor. When you change a variation’s traffic allocation mid-experiment, all new users will be allocated accordingly from then on.</p>\n<p>However, all users that have entered your experiment prior to the change will be bucketed into the same variation they entered previously, thus altering the results and making it difficult to interpret conversion rate. This is one reason we recommend that people do not alter individual traffic allocation to a single variation.</p>\n</blockquote>\n<p><em>CHECK WHETHER THE GOAL IS FIRING</em></p>\n<p>A goal is tracked for a given experiment only if the experiment has been <em>_visitedEver</em>. To check whether your goals are being triggered as expected when you want them to, you can subscribe to the <code>OptimizelyGoalTriggeredNotification</code>.</p>\n<p>Once you have tapped, viewed, or sent off your custom event goal, the app should stop for the new goal triggered callback method. Backgrounding and foregrounding the app will also send the goal.</p>\n<p>If you check the <code>optlyVisitedExperiments</code> array, you will be able to see a list of experiments for which the goal was fired. An example of how to implement this is below:</p>\n<pre><code class=\"lang-obj-c\">[[NSNotificationCenter defaultCenter] addObserver:self\n    selector:@selector(goalReceivedNotification:)\n    name:OptimizelyGoalTriggeredNotification\n    object:nil];\n</code></pre>\n<p><img src=\"/assets/img/ios/ios_qa_goal_4.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p><em>RUN DIFFERENT VARIATIONS ON MULTIPLE DEVICES</em></p>\n<p>Now that you have your experiment set up as expected, try running your experiment on different devices. To get bucketed into different variations, you can delete the app and run the app again.</p>\n<p><em>EXPERIMENT CHANGE UPDATES IN DATAFILE</em></p>\n<p>When experiment changes are made, the datafile is updated on the Optimizely CDN. Once the datafile is changed, the app downloads the updated datafile within 2 minutes.</p>\n<p>For the datafile to take effect, the app must be foregrounded or refreshExperiments must be called. It can take up to a few minutes for changes to propagate to the datafile.</p>\n<p>To see if the datafile needs to be updated, check the Optimizely data object for the <em>_state</em> property. Subscribe to the <code>OptimizelyNewDataFileLoadedNotification</code> to determine when the datafile has been updated.</p>\n<p>By default, the SDK will try to download a new datafile with your updated experiment data every 2 minutes, which is configurable in your network settings.</p>\n<p>When refreshing the data file, please note that backgrounding and then foregrounding the app will force goal triggers.</p>\n<p>To configure this, do the following:</p>\n<ul>\n<li>Create a method to call when the <code>NSNotification</code> has been received</li>\n<li>Subscribe to <code>OptimizelyNewDataFileLoadedNotification</code> and using your new method as a callback</li>\n<li>In the callback method, creating an <code>OptimizelyExperimentsData</code> object</li>\n<li>Set a breakpoint after this has been created</li>\n</ul>\n<p>Below is an example of this implementation. Note that the data file version has been updated from 1028 to 1031, and in this example, the datafile update happened when the app was backgrounded and then foregrounded.</p>\n<p><img src=\"/assets/img/ios/ios_qa_datafile_5.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p>Once you’re done going through these steps, you’re ready to run your experiment live on your app.</p>\n"},"1-article-test":{"template":"page-sidebar","partial":"_article-summary.html","includeSiblingData":true,"title":"How Optimizely's iOS SDK Works","summary":"Learn about how Optimizely's iOS SDK Order of execution, experiment activation, and goals.\nSpecifically, the article discusses how Optimizely's SDK executes in an app, the order of operations for how an experiment runs,\nand how conversions are counted in Optimizely.","body":"<h1 id=\"how-optimizely-s-ios-sdk-works\">How Optimizely&#39;s iOS SDK Works</h1>\n<p><em>THIS ARTICLE WILL HELP YOU:</em></p>\n<ul>\n<li>Understand <em>how Optimizely&#39;s SDK executes</em> in an app</li>\n<li>Understand the <em>order of operations</em> for how an experiment runs</li>\n<li><em>Use Optimizely&#39;s iOS APIs</em> to provide visibility into what experiments are running</li>\n<li><em>Activate experiments manually</em> based on a user action (SDK versions 1.3 and above)</li>\n<li>Understand <em>how conversions are counted</em> in Optimizely</li>\n</ul>\n<h3 id=\"optimizely-s-ios-sdk-order-of-execution\">OPTIMIZELY&#39;S iOS SDK ORDER OF EXECUTION</h3>\n<p>The following diagram illustrates how experiments are activated by the Optimizely SDK.</p>\n<p><img src=\"/assets/img/ios/optimizely_sdk_execution.png\" alt=\"Drawing\" style=\"width: 100%;\"/></p>\n<p>When your application starts up and the Optimizely SDK is initialized, Optimizely downloads a JSON data file containing all experiment data. This datafile is downloaded with a (configurable) 2 second timeout. If the datafile can’t be downloaded, a cached data file is used. If no data file is found, no experiments are run. While the app is running, a new datafile is fetched by Optimizely every 2 minutes (configurable).</p>\n<p>After downloading the data file, each experiment is evaluated to see if it can be run. First, the SDK checks to see if the experiment passes targeting conditions. If it passes targeting conditions, it is then run through traffic allocation and a variation is chosen. Once this variation is chosen, this is saved and the user will always see this variation. As a last check, the Optimizely SDK checks to see if this experiment conflicts with another experiment. If it does, the experiment becomes locked and will not run. If the experiment passes all those checks, it is now set to running in the application.</p>\n<p>TIP:</p>\n<blockquote>\n<p>An experiment conflicts with another when you modify the same view, variable, or code block in multiple experiments. In this case, one of the experiments will not run. You can identify whether or not a conflict exists by looking at verboseLogging.</p>\n</blockquote>\n<p>When the application resumes or is brought the foreground after being backgrounded, the Optimizely SDK runs through the same process as above, but does not attempt to download a new datafile. This means that some experiments that were running before may now stop, and some experiments that were not running before may start.</p>\n<p>TIP:</p>\n<blockquote>\n<p><code>refreshExperiments</code> allows targeting conditions to be reevaluated while the app is running (and does not require an app to be foregrounded).</p>\n</blockquote>\n<h3 id=\"mobile-experiment-states\">MOBILE EXPERIMENT STATES</h3>\n<p>The above diagram shows how experiments are activated and eventually put into the “running” state. But what does this mean?</p>\n<p>An Optimizely mobile experiment has 3 possible states:</p>\n<ul>\n<li>Disabled</li>\n<li>Running</li>\n<li>Deactivated</li>\n</ul>\n<p><em>Disabled:</em> This means the experiment has been paused from the Optimizely dashboard.</p>\n<p><em>Running:</em> This means the experiment is running and ready to be viewed. This doesn’t necessarily mean it has been viewed.</p>\n<p><em>Deactivated:</em> This means the experiment failed a condition required to run, either targeting, traffic allocation, or it is locked or conflicts with another experiment.</p>\n<p>Once an experiment is running, it is ready to be viewed. But running doesn’t necessarily mean it has been viewed.</p>\n<p>You can use the following APIs on both iOS and Android to see the state of experiments.</p>\n<p>On iOS, you can call:</p>\n<p><code>[[Optimizely sharedInstance] allExperiments]</code></p>\n<ul>\n<li>This returns an array of <code>OptimizelyExperimentData</code> objects that represent every experiment the SDK knows about</li>\n</ul>\n<p><code>[[Optimizely sharedInstance] visitedExperiments]</code></p>\n<ul>\n<li>This returns an array of <code>OptimizelyExpermentData</code> objects that represent every experiment that has been seen and visited by the user across all sessions</li>\n</ul>\n<p><em>When is an experiment marked as viewed?</em></p>\n<p>Once an experiment is running, it is marked as viewed the first time it is seen by an end user. For visual experiments, the first time a visual treatment is shown, the experiment is marked as viewed.</p>\n<p>For programmatic experiments, the first time a live variable or code block from that experiment is accessed, it is marked as viewed.</p>\n<p>The Optimizely SDKs keep track of which experiments have been visited across all sessions, as well as which experiments have been visited in a given session. Simply use the visitedExperiments API to get a list.</p>\n<p>TIP:</p>\n<blockquote>\n<p>You can subscribe to <a href=\"/ios/reference/index.html#subscribe-to-nsnotifications\">NSNotifications</a> to be notified when various Optimizely events occur in the SDK life cycle.</p>\n</blockquote>\n<h3 id=\"manual-activation\">MANUAL ACTIVATION</h3>\n<p>You can manually activate Optimizely for your mobile app. In essence, this will force Optimizely to re-evaluate based on an in-app API call. The two activation modes for mobile experiments are automatic (default) and manual. Manual activation is only available for SDK versions 1.3 and above.</p>\n<p><em>Automatic (Default):</em> By default, Optimizely buckets users and activates the experiment as soon as the app starts and the <code>startOptimizelyWithAPIToken</code> method is called (either synchronously or asynchronously). Experiments are marked as visited when the end user reaches an element that has been modified in the experiment.</p>\n<p><em>Manual:</em> In manual activation mode, developers can specify, via an in-app API call, at which point they want to activate a given experiment. Manual activation allows you to separate the experiment start (which buckets the users and activates the experiment) from <code>startOptimizelyWithAPIToken</code>, which loads the datafile and any remote assets, such as images. Check out the <a href=\"/ios/reference/index.html#manual-activation\">developer documentation</a> on manual activation.</p>\n<p><em>Please note that visitors still must meet Audience targeting conditions for a manually activated experiment to be eligible for that experiment.</em> Manual activation does not bypass Audience conditions.</p>\n<p>Toggle between manual and automatic activation mode from the Options &gt; Activation Mode menu in the Editor:</p>\n<p><img src=\"/assets/img/ios/activation_mode.png\" alt=\"Drawing\" style=\"width: 50%;\"/></p>\n<p>NOTE:</p>\n<blockquote>\n<p>What happens if you try to use manual activation when your experiment is on automatic activation mode, or if you try to manually activate an experiment that doesn’t exist?</p>\n<p>The call will simply not execute and your app will continue running as before, with the control variation as the default experience.</p>\n</blockquote>\n<p><em>Why would you want to use manual activation?</em> We’ve outlined some use cases below.</p>\n<p><em>Use Case #1: Set additional metadata for your audiences before evaluating targeting conditions for an unactivated experiment.</em></p>\n<p>Bucketing only occurs for your audiences when activateExperiment is called and NOT when <code>startOptimizelyWithAPIToken</code> is called, and thus any custom tags you set before the experiment starts will be considered for targeting.\nFor example, you can mark a user as a “VIP” at one point during a session, then use this tag for an experiment later in the same session.\nWith automatic activation mode, you can only target using tags set before the app was started (and thus set in a previous session).</p>\n<p><em>Use Case #2: Bucket only a subset of users who access less frequently used areas of your app.</em></p>\n<p>Bucketing users when the app loads, which is done in automatic mode, may not be the best choice for experiments involving an experience that not all users visit.</p>\n<p>For example, if you want to test a feature deep in your user experience that only 10% of users visit, you wouldn’t necessarily want to bucket all users when you launch your app (as is done with automatic mode), because this could lead to skewed sampling.\nIf you manually activate your experiment only when users reach that experience, you can bucket users at the point where they visit that feature, and run tests on only those users.</p>\n<p><em>Use Case #3: Quick-load assets for consistency.</em></p>\n<p>Remote assets distributed by the Optimizely CDN, such as images you upload to our editor, start loading asynchronously when the app starts. As a result, if any assets fail to load before an experiment is viewed due to slow internet speeds, the user is not showed the variation and is instead shown the control even though that user has been bucketed.</p>\n<p>The variation will be shown to the user the next time he or she opens the app, assuming the assets have loaded before he or she views the experiment, leading to an inconsistent user experience and possibly even skewed results.\nIn manual activation mode, you can activate experiments right when you want to show them, giving the user’s device more time to load assets associated with that experiment.</p>\n<h3 id=\"how-conversions-are-counted\">HOW CONVERSIONS ARE COUNTED</h3>\n<p>There are several types of conversion events and goals that Optimizely captures:</p>\n<ul>\n<li>Tap Goal</li>\n<li>View Goal</li>\n<li>Custom Event Goal</li>\n<li>Revenue Goal</li>\n</ul>\n<p>Optimizely counts conversions for these goals only when an experiment has been previously visited by the user in any session, and the experiment is not paused from the Optimizely dashboard.</p>\n<p>For example, if you make a call to a custom event, but the user hasn’t actually visited that experiment, the conversion will not count.</p>\n<p>Similarly, if a user visited an experiment in their first session (e.g. a sign up flow), but converts in the second session without visiting the experiment again, that conversion will still count towards the experiment.</p>\n<h3 id=\"how-visual-experiments-execute\">HOW VISUAL EXPERIMENTS EXECUTE</h3>\n<p>The Optimizely SDKs let you create visual experiments that you can run in your application without having to re-deploy to the app store! But how does it actually apply those visual treatments?</p>\n<p>On iOS, the Optimizely SDK uses a technique called swizzling. This allows us to apply visual changes to the application based on whatever experiments are currently active in our data file. In particular, Optimizely swizzles the following methods:</p>\n<p><em><code>UIImage</code></em></p>\n<ul>\n<li><code>imageNamed:</code><ul>\n<li>Used to swap out the path of the asset for the original image to the one that we image swapped to</li>\n</ul>\n</li>\n</ul>\n<p><em><code>NSBundle</code></em></p>\n<ul>\n<li><code>pathForResource:ofType:</code><ul>\n<li>Ends up calling <code>pathForResource:InDirectory:</code> with just an empty directory</li>\n</ul>\n</li>\n<li><code>pathForResource:InDirectory:</code><ul>\n<li>Used to register assets so that they can be seen and registered on our MIB editor</li>\n</ul>\n</li>\n</ul>\n<p><em><code>UIWindow</code></em></p>\n<ul>\n<li><code>sendEvent:</code><ul>\n<li>We check to see if there’s a goal attached to the view that got tapped, if so we’ll end up storing a tap event.  In edit mode we send a screenshot whenever the user interacts with the device through a touch</li>\n</ul>\n</li>\n</ul>\n<p><em><code>UIView</code></em></p>\n<ul>\n<li><code>didMoveToWindow:</code><ul>\n<li>We register the view when the view moves into the window</li>\n<li>We unregister the view when the view moves out of the window</li>\n<li>We’ll check to see if there are any visual changes that need to be applied to the view from any active experiments</li>\n</ul>\n</li>\n</ul>\n<p><em><code>UIViewController</code></em></p>\n<ul>\n<li><code>viewWillAppear:</code><ul>\n<li>We’ll check to see if there is a view goal associated with the view that is coming into frame. If there is then we’ll store the view</li>\n</ul>\n</li>\n<li><code>viewDidAppear:</code><ul>\n<li>In edit mode we’ll send a screenshot after the view is loaded</li>\n</ul>\n</li>\n</ul>\n<p><em><code>UICollectionView</code></em></p>\n<ul>\n<li><code>didMoveToWindow:</code><ul>\n<li>UIViewController needs a custom implementation of didMoveToWindow:, because it doesn’t automatically call the super UIView version of this function. All we do is call the UIView version of didMoveToWindow:</li>\n</ul>\n</li>\n<li><code>setDataSource:</code><ul>\n<li>We swizzle the setter for the data source in order to create a data source interceptor. We’ll store the original data source inside our interceptor. This allows us to apply changes to each individual cell</li>\n</ul>\n</li>\n<li><code>dataSource:</code><ul>\n<li>We swizzle the getter for the data source in order to return the original data source from within our interceptor</li>\n</ul>\n</li>\n</ul>\n<p><em><code>UITableView</code></em></p>\n<ul>\n<li><code>setDataSource:</code><ul>\n<li>We swizzle the setter for the data source in order to create a data source interceptor. We’ll store the original data source inside our interceptor. This allows us to apply changes to each individual cell</li>\n</ul>\n</li>\n<li><code>dataSource:</code><ul>\n<li>We swizzle the getter for the data source in order to return the original data source from within our interceptor</li>\n</ul>\n</li>\n</ul>\n"},"index":{"template":"page-sidebar--articles","title":"iOS Articles","includeSiblingData":true,"articles":["1-article-test","2-article-test"],"body":""}},"code-samples":{"index":{"template":"page-sidebar","title":"Code Samples","body":"<h1 id=\"code-samples\">Code Samples</h1>\n<p>In order to help you get up and running quickly, we have provided a number of code samples that you can use.\nBe sure to modify the code appropriately before running in production!</p>\n<h2 id=\"developer-qa\">Developer QA</h2>\n<p>To learn how to use Optimizely&#39;s debug APIs, you can refer to the following <a href=\"https://help.optimizely.com/hc/en-us/articles/205156117-QA-Your-Optimizely-iOS-and-Android-Experiments\">article</a>.</p>\n<h2 id=\"advanced-use-cases\">Advanced Use Cases</h2>\n<h3 id=\"experiment-from-app-to-webview\">Experiment from App to Webview</h3>\n<p>At a high level, in order to run an experiment across your native app and various webviews, you will need to have 2 projects set up: <a href=\"https://help.optimizely.com/hc/en-us/articles/200040095-Implement-the-Optimizely-Snippet\">1 web project</a> and <a href=\"https://help.optimizely.com/hc/en-us/articles/202296994-Get-Started-on-Mobile-Optimization\">1 iOS project</a>.  You will create an iOS experiment on your native app and a separate experiment on your mobile website.  You will follow the steps below in order to get your hybrid app experiment set up:</p>\n<ol>\n<li>Set up your web experiment</li>\n<li>Set up your iOS experiment and configure Optimizely cookies to show the proper experience</li>\n<li><a href=\"../ios/guide/index.html#\\35 -qa\">QA</a> both experiments in your staging/development environment to make sure things work as expected.</li>\n<li><p>Run both experiments by pressing the play button!</p>\n</li>\n<li><p>Set up your web experiment\nCreate a web experiment\nFrom the experiment, extract the experiment_id from the URL &amp; variation_id from the diagnostic report.  We will use this information later.</p>\n</li>\n<li><p>Set up your iOS experiment</p>\n</li>\n</ol>\n<p>For setting up the iOS experiment, you will need to instrument your code with code blocks and set up an experiment as you normally would (you can follow the steps here).</p>\n<p>You will need to set Optimizely cookies before the app loads.  A first party cookie is a cookie whose domain is set to your website (i.e. .yoursite.com). Optimizely sets the first party cookies to the highest level domain available on your site. This ensures that a user will be tracked through all subdomains.</p>\n<p>There are two main things that you will need to do with Optimizely cookies.  Prior to loading your webview:\nSet the Optimizely buckets cookie with the proper experiment_id and variation_id (from the diagnostic report)\nPull the optimizelyEndUserId cookie from the first time the webview loads and be sure to load the same optimizelyEndUserId in order to ensure that conversions are tracked properly.</p>\n<pre><code class=\"lang-obj-c\">OptimizelyCodeBlocksKeyWithBlockNames(myHybridCodeBlocksKey,\n                                    @&quot;Hybrid_Web_View_1&quot;,\n                                    @&quot;Hybrid_Web_View_2&quot;);\n\n@implementation MyViewController\n\n- (void) someFunction {\n\n    // This line defines Code Blocks &quot;Hybrid_Web_View_1&quot;, &quot;Hybrid_Web_View_2&quot;, and a\n    // default block that is executed in the case that the experiment is\n    // not activated.\n    [Optimizely codeBlocksWithKey:myHybridCodeBlocksKey\n                       blockOne:^{\n        // This block is executed when myHybridCodeBlocksKey -&gt; Hybrid_Web_View_1\n         [cookieProperties setObject:@&quot;optimizelyBuckets&quot; forKey:NSHTTPCookieName];\n    [cookieProperties setObject:@&quot;%7B%&lt;EXPERIMENT_ID&gt;%22%3A%&lt;VARIATION_1_ID&gt;%22%7D&quot; forKey:NSHTTPCookieValue];\n    [cookieProperties setObject:@&quot;.&lt;YOUR_DOMAIN&gt;.com&quot; forKey:NSHTTPCookieDomain];\n    [cookieProperties setObject:@&quot;.&lt;YOUR_DOMAIN&gt;.com&quot; forKey:NSHTTPCookieOriginURL];\n    [cookieProperties setObject:@&quot;/&quot; forKey:NSHTTPCookiePath];\n    [cookieProperties setObject:@&quot;0&quot; forKey:NSHTTPCookieVersion];\n\n    // set expiration to 10 years from now like on web\n    [cookieProperties setObject:[[NSDate date] dateByAddingTimeInterval:344453720] forKey:NSHTTPCookieExpires];\n    NSHTTPCookie *newCookie = [NSHTTPCookie cookieWithProperties:cookieProperties];\n    [[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookie:newCookie];\n    NSString *urlAddress = @&quot;http://&lt;YOUR_DOMAIN&gt;.com&quot;;\n\n    }\n                       blockTwo:^{\n        // This block is executed when myHybridCodeBlocksKey -&gt; Hybrid_Web_View_2\n        ...\n    }\n                   defaultBlock:^{\n          [Optimizely codeBlocksWithKey:myHybridCodeBlocksKey\n                       blockOne:^{\n        // This block is executed when myHybridCodeBlocksKey -&gt; Hybrid_Web_View_1\n         [cookieProperties setObject:@&quot;optimizelyBuckets&quot; forKey:NSHTTPCookieName];\n    [cookieProperties setObject:@&quot;%7B%&lt;EXPERIMENT_ID&gt;%22%3A%&lt;ORIGINAL_VARIATION_ID&gt;%22%7D&quot; forKey:NSHTTPCookieValue];\n    [cookieProperties setObject:@&quot;.&lt;YOUR_DOMAIN&gt;.com&quot; forKey:NSHTTPCookieDomain];\n    [cookieProperties setObject:@&quot;.&lt;YOUR_DOMAIN&gt;.com&quot; forKey:NSHTTPCookieOriginURL];\n    [cookieProperties setObject:@&quot;/&quot; forKey:NSHTTPCookiePath];\n    [cookieProperties setObject:@&quot;0&quot; forKey:NSHTTPCookieVersion];\n\n    // set expiration to 10 years from now like on web\n    [cookieProperties setObject:[[NSDate date] dateByAddingTimeInterval:344453720] forKey:NSHTTPCookieExpires];\n    NSHTTPCookie *newCookie = [NSHTTPCookie cookieWithProperties:cookieProperties];\n    [[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookie:newCookie];\n    NSString *urlAddress = @&quot;http://&lt;YOUR_DOMAIN&gt;.com&quot;;\n\n\n\n    }];\n}\n// This block is executed by default\n        //Create a URL object.\n        NSURL *url = [NSURL URLWithString:urlAddress];\n        //URL Request Object\n        NSURLRequest *requestObj = [NSURLRequest requestWithURL:url];\n        //Load the request in the UIWebView.\n        [self.testWebView loadRequest:requestObj];\n\n// Extract the optimizelyEndUserId for future use (and be sure to set the same user id going forward).  Optimizely will generate a unique optimizelyEndUserId for each user.\n\n    NSHTTPCookie *cookie;\n    NSHTTPCookieStorage *cookieJar = [NSHTTPCookieStorage sharedHTTPCookieStorage];\n    for (cookie in [cookieJar cookies]) {\n            if ([[cookie name] isEqualToString:@&quot;optimizelyEndUserId&quot;]) {\n               NSString *optly_user_id_val = [cookie value];\n\n           }\n\n    }\n\n\n@end\n</code></pre>\n<h2 id=\"helper-functions\">Helper Functions</h2>\n<p>This section will include helper functions that you can use for different experiments.</p>\n<h3 id=\"show-variation-after-x-action\">Show variation after X action</h3>\n<p>In this example, if you want to test out the number of times to show a user a certain experience, you can set up the experiment in the following way:</p>\n<pre><code class=\"lang-objective-c\">if (number_of_days == 3) {\n  Optimizely dummyLiveVariable = 0\n   [Optimizely trackEvent:@&quot;number_of_days_3&quot;];\n}\n\nif (number_of_days == 5) {\n   Optimizely dummyLiveVariable = 1\n   [Optimizely trackEvent:@&quot;number_of_days_5&quot;];\n}\n</code></pre>\n"}},"getting-started":{"index":{"template":"page-sidebar","title":"Optimizely iOS SDK Guide","body":"<h1 id=\"getting-started-with-optimizely-s-ios-sdk\">Getting started with Optimizely&#39;s iOS SDK</h1>\n<p>The following SDK Install Steps will allow you to install the SDK and run experiments with Optimizely&#39;s Visual Editor.</p>\n<h2 id=\"sdk-download\">SDK Download</h2>\n<p>You can download the iOS SDK through Cocoapods, download it manually from GitHub, or install it through Fabric:</p>\n<p><a href=\"http://developers.optimizely.com/ios/getting-started/index.html#using-cocoapods\"><img src=\"http://img.shields.io/cocoapods/v/Optimizely-iOS-SDK.svg?style=flat\" alt=\"SDK Version\"></a></p>\n<p><a href=\"https://fabric.io/kits/ios/optimizely\"><img src=\"/assets/img/mobile/fabric_button.png\" style=\"width: 150px; height: 58px;\"/></a></p>\n<p><a href=\"http://github.com/optimizely/Optimizely-iOS-SDK/zipball/master\">ZIP</a> | <a href=\"http://github.com/optimizely/Optimizely-iOS-SDK/tarball/master\">TAR</a> | <a href=\"http://github.com/optimizely/Optimizely-iOS-SDK\">GitHub</a></p>\n<h5 id=\"-ios-sdk-install-video-\"><em>iOS SDK Install Video</em></h5>\n<p><iframe src=\"//fast.wistia.net/embed/iframe/5apoabzheh\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"720\" height=\"450\"></iframe></p>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\n<h2 id=\"create-an-ios-project\">1. Create an iOS Project</h2>\n\n<p>To create an iOS project, select &quot;Create New Project&quot; in the <a href=\"https://www.optimizely.com/dashboard\">Optimizely Dashboard</a>:</p>\n<p>   <img src=\"/assets/img/ios/create-project.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n<p><a name=\"project-code\"></a>Once you&#39;ve created a project, please take a look at the <code>Settings</code> tab to find your project ID and API key which you will use during installation:</p>\n<p><img src=\"/assets/img/ios/project-code.png\" alt=\"Project Code Dialog\"></p>\n<h2 id=\"sdk-integration\">2. SDK Integration</h2>\n\n<p>To use Optimizely&#39;s iOS SDK you must first integrate the SDK into your app. You can either install the Optimizely SDK using <a href=\"#using-cocoapods\">CocoaPods</a> (recommended) or via <a href=\"#manual-installation\">Manual Installation</a>.  Our SDK supports iOS 7.0 and above.</p>\n<h3 id=\"using-cocoapods\">Using CocoaPods</h3>\n<ol>\n<li><p>Your Xcode project must be set up for CocoaPods. Refer to <a href=\"http://cocoapods.org/#getstarted\">CocoaPods Getting Started</a> if you haven&#39;t yet configured your project to work with CocoaPods.</p>\n</li>\n<li><p>Our SDK only supports iOS 7.0 and above, so please make sure your <code>Podfile</code> specifies a <a href=\"http://guides.cocoapods.org/syntax/podfile.html#platform\">deployment target</a> of iOS 7.0 (or above). Then, add Optimizely to your <code>Podfile</code>:</p>\n<pre><code class=\"lang-ruby\"> platform :ios, &#39;7.0&#39;\n # Other Pods\n pod &#39;Optimizely-iOS-SDK&#39;\n</code></pre>\n</li>\n</ol>\n<ol>\n<li><p>Run <code>pod install</code> from the command line.  This will add and install the Optimizely iOS SDK in your generated CocoaPods workspace.</p>\n<p><em>Note: By default CocoaPods installs to the first build target in the project.</em></p>\n</li>\n</ol>\n<h3 id=\"manual-installation\">Manual Installation</h3>\n<p>For new installations, please follow all steps. For upgrades, please follow steps 1 and 2.</p>\n<ol>\n<li><p>Clone the Optimizely SDK using <code>git clone https://github.com/optimizely/Optimizely-iOS-SDK</code></p>\n</li>\n<li><p>Drag <code>Optimizely.framework</code> from the SDK repository into your project. Check &quot;Copy items into destination group&#39;s folder&quot; and make sure the appropriate targets are checked.</p>\n</li>\n<li><p>Open the &quot;Build Phases&quot; tab for the app&#39;s target. Under &quot;Link Binary with Libraries,&quot; add the required frameworks if they&#39;re not already included:</p>\n<ul>\n<li>AudioToolbox.framework</li>\n<li>CFNetwork.framework</li>\n<li>Foundation.framework</li>\n<li>libicucore.tbd (libicucore.dylib for XCode 7.0 and below)</li>\n<li>libsqlite3.dylib</li>\n<li>MobileCoreServices.framework</li>\n<li>Security.framework</li>\n<li>SystemConfiguration.framework</li>\n<li>UIKit.framework\n<br  /></li>\n</ul>\n</li>\n<li><a name=\"objc\"></a>Switch to the &quot;Build Settings&quot; tab. Add <code>-ObjC</code> to the &quot;Other Linker Flags&quot; build setting.</li>\n</ol>\n<h2 id=\"add-your-api-token\">3. Add Your API token</h2>\n\n<h3 id=\"using-objective-c\">Using Objective-C</h3>\n<ol>\n<li><p>Now, you&#39;re ready to write some code!  Include this file at the top of your <code>AppDelegate</code> class implementation. This is usually found in a file called <code>AppDelegate.m</code> in the Project Navigator.</p>\n<pre><code class=\"lang-obj-c\"> #import &lt;Optimizely/Optimizely.h&gt;\n</code></pre>\n</li>\n<li><p>Add the following to the beginning of <code>application:didFinishLaunchingWithOptions:</code> in your\napp delegate. The code can be copied from your <code>Project Code</code>, which you can find by selecting the appropriate iOS Project in your <a href=\"https://www.optimizely.com/dashboard\">Optimizely Dashboard</a>.  For more details, you can refer back to <a href=\"#accountcreation\">Step 1: Create an iOS project</a>.</p>\n<pre><code class=\"lang-obj-c\"> // You can find the following code snippet in your project code.\n\n [Optimizely startOptimizelyWithAPIToken:YOUR_API_TOKEN launchOptions:launchOptions];\n\n // The rest of your initialization code...\n</code></pre>\n<p><em>Note: We recommend putting this code at the beginning of your <code>application:didFinishLaunchingWithOptions:</code> function.</em></p>\n</li>\n<li><p><a name=\"urlscheme\"></a> In order to enter Edit Mode (which will allow your app to be detected by Optimizely&#39;s Editor), you&#39;ll have to define a URL scheme for Optimizely.</p>\n<ol>\n<li><p>Add <code>[Optimizely handleOpenURL:]</code> to <code>application:openURL</code> in your app delegate.  This will notify Optimizely when the application has been loaded from a URL:</p>\n<pre><code class=\"lang-obj-c\">   - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation{\n      if ([Optimizely handleOpenURL:url]) {\n         return YES;\n      }\n      return NO;\n   }\n</code></pre>\n</li>\n<li><p><a name=\"urlschemeInfo\"></a> In the project editor, click on &quot;Targets&quot; -&gt; Your app name -&gt; &quot;Info&quot; tab.</p>\n</li>\n<li>Locate the section called &quot;URL Types&quot; and click the plus icon (+) to expand the section.</li>\n<li><p>Paste the following into the field called &quot;Identifer&quot;:</p>\n<pre><code class=\"lang-obj-c\">   com.optimizely\n</code></pre>\n</li>\n<li><p>Add <code>optly{PROJECT_ID}</code> to &quot;URL Schemes.&quot;  Your Project ID is available at the bottom of the <a href=\"#project-code\">Project Code</a> dialog box. For instance, if your Project ID is <code>123456</code>, your URL Scheme would be <code>optly123456</code>.\nOnce completed, your <code>URL Scheme</code> should look like this:\n<img src=\"/assets/img/ios/project-plist.png\" alt=\"Drawing\" style=\"width: 100%; padding-bottom:10px;\"/></p>\n</li>\n<li><p><a name=\"urllinkgenerate\"></a>Once you run your app in DEBUG mode with the SDK installed, you should see the image below in your <a href=\"https://www.optimizely.com/dashboard\">Optimizely Dashboard</a>.  Once the SDK is detected, the Create Experiment button will appear, and you can continue to Step 4 to create your experiment.</p>\n<p>  <img src=\"/assets/img/ios/sdk-detected.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"using-swift\">Using Swift</h3>\n<ol>\n<li><p>Now, you&#39;re ready to write some code!  Include this file at the top of your <code>AppDelegate</code> class implementation. This is usually found in a file called <code>AppDelegate.swift</code> in the Project Navigator.</p>\n<pre><code class=\"lang-swift\"> import Optimizely\n</code></pre>\n</li>\n<li><p>Add the following to the beginning of <code>application(_:didFinishLaunchingWithOptions:)</code> in your\napp delegate. The code can be copied from your <code>Project Code</code>, which you can find by selecting the appropriate iOS Project in your <a href=\"https://www.optimizely.com/dashboard\">Optimizely Dashboard</a>.  For more details, you can refer back to <a href=\"#accountcreation\">Step 1: Create an iOS project</a>.</p>\n<pre><code class=\"lang-swift\"> // You can find the following code snippet in your project code.\n\n Optimizely.startOptimizelyWithAPIToken(YOUR_API_TOKEN, launchOptions:launchOptions);\n\n // The rest of your initialization code...\n</code></pre>\n<p><em>Note: We recommend putting this code at the beginning of your <code>application(_:didFinishLaunchingWithOptions:)</code> function.</em></p>\n</li>\n<li><p><a name=\"urlscheme\"></a> In order to enter Edit Mode (which will allow your app to be detected by Optimizely&#39;s Editor), you&#39;ll have to define a URL scheme for Optimizely.</p>\n<ol>\n<li><p>Add <code>Optimizely.handleOpenURL(_:)</code> to <code>application(_:openURL:)</code> in your app delegate.  This will notify Optimizely when the application has been loaded from a URL:</p>\n<pre><code class=\"lang-swift\">  func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject) → Bool {\n      if Optimizely.handleOpenURL(url) {\n          return true\n      }\n      return false\n  }\n</code></pre>\n</li>\n<li><p><a name=\"urlschemeInfo\"></a> In the project editor, click on &quot;Targets&quot; -&gt; Your app name -&gt; &quot;Info&quot; tab.</p>\n</li>\n<li>Locate the section called &quot;URL Types&quot; and click the plus icon (+) to expand the section.</li>\n<li><p>Paste the following into the field called &quot;Identifer&quot;:</p>\n<pre><code class=\"lang-swift\">   com.optimizely\n</code></pre>\n</li>\n<li><p>Add <code>optly{PROJECT_ID}</code> to &quot;URL Schemes.&quot;  Your Project ID is available at the bottom of the <a href=\"#project-code\">Project Code</a> dialog box. For instance, if your Project ID is <code>123456</code>, your URL Scheme would be <code>optly123456</code>.\nOnce completed, your <code>URL Scheme</code> should look like this:\n<img src=\"/assets/img/ios/project-plist.png\" alt=\"Drawing\" style=\"width: 100%; padding-bottom:10px;\"/></p>\n</li>\n<li><p><a name=\"urllinkgenerate\"></a>Once you run your app in DEBUG mode with the SDK installed, you should see the image below in your <a href=\"https://www.optimizely.com/dashboard\">Optimizely Dashboard</a>.  Once the SDK is detected, the Create Experiment button will appear, and you can continue to Step 4 to create your experiment.</p>\n<p>  <img src=\"/assets/img/ios/sdk-detected.png\" alt=\"Drawing\" style=\"width: 80%;\"/></p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"create-an-experiment\">4. Create an Experiment</h2>\nAfter creating an iOS project and installing the SDK, reference <a href=\"https://help.optimizely.com/hc/en-us/articles/202296994\">this guide in our Knowledge Base</a>, which will walk you through how to set up an experiment.\n\n<h2 id=\"qa\">5. QA</h2>\n\n<h3 id=\"preview-mode\">Preview Mode</h3>\n<p>Preview mode allows you to view your app in a different variations for a given experiment in order to check that your app and the experiment are both running smoothly. To enter preview mode, connect your device to the editor, open the <code>Preview</code> menu, and click <code>Launch Preview</code></p>\n<p><img src=\"/assets/img/mobile/launch-preview.png\" style=\"width: 60%;\" alt=\"Enter Preview Mode\" /></p>\n<p>Your app will restart and you will see the Optimizely preview menu icon displayed over your app content.\n The icon may be repositioned by dragging it. Tapping the icon will reveal the Preview Menu which allows you to switch variations, view the goals that have been triggered so far, and see the code blocks and live variables that are included in the experiment.</p>\n<p><img src=\"/assets/img/ios/preview-menu.gif\" style=\"width: 40%;\" alt=\"Preview Mode Demo\" /></p>\n<p>Now that you&#39;ve created an experiment and successfully installed the Optimizely iOS SDK, below is a checklist to go through prior to releasing your app to the app store with the SDK:</p>\n<ol>\n<li><p>In order to set up your app such that you can QA experiments (beyond using Preview), we recommend either having a separate <a href=\"#accountcreation\">Project</a> for development and production or inserting <a href=\"#customtags\">Custom Tags</a>, that are only set for certain QA devices.  If you decide to go with setting up 2 separate projects, we recommend setting up an <code>#ifdef</code> to ensure that only one project code snippet is defined at any given time.</p>\n</li>\n<li><p>Were you able to connect to Optimizely&#39;s Visual Editor?  If you ran into issues, you can try out this <a href=\"../faqs/index.html#visualeditorchange\">troubleshooting tip</a>.</p>\n</li>\n<li><p><a href=\"#urlscheme\">Configure your app</a> so that non-technical members of your team can set up and run experiments using the visual editor on a physical device without the need of XCode.  You can try downloading the development build on your device and try opening the <a href=\"#urllinkgenerate\">link</a> to make sure that this is set up properly.</p>\n</li>\n<li><p>(Optional) If you have a separate project for development and production, you can run your experiments in your development environment to check that results are updating and that you are seeing the different variations.</p>\n<ul>\n<li>A useful debugging tool is to enable logging (be sure to disable this feature when your app is live in the app store) <code>[Optimizely sharedInstance].verboseLogging = YES</code>  For each event that is triggered, you will see a log statement.  Be sure to check that verboseLogging is <em>not</em> enabled in production.</li>\n<li>You will want to make sure that each experiment does not make changes to the same element (otherwise only one of the experiments will run).</li>\n<li>Optimizely tracks unique visitors, so that we make sure that the same user sees the same experience.  If you would like to check that you are getting a random experience, you will need to delete the app to be counted as a new visitor.</li>\n<li>By default, Optimizely sends network calls every 2 minutes or upon backgrounding. (You can find more details about modifying the SDK network settings <a href=\"#networksettings\">here</a>). In order to check that your event data is being updated in Optimizely&#39;s dashboard as expected, you can either:<ol>\n<li>Trigger events in the app and keep the app foregrounded for 2 minutes</li>\n<li>Background the app so that events are sent to our servers.\n<br  /></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Once you&#39;ve checked all these steps, you&#39;re ready to release to the app store!  To learn more about how to use Optimizely&#39;s editor and get additional testing ideas, you can check out our articles in <a href=\"https://help.optimizely.com/hc/en-us/sections/200666084-Mobile-Optimization\">Optiverse</a>.</li>\n</ol>\n<h3 id=\"programmatically-enable-preview-mode\">Programmatically Enable Preview Mode</h3>\n<p>While preview mode can be enabled from the dashboard it can also be enabled from code.  This allows you to preview variations across all of your experiments without needing to connect to the editor.  Preview mode has UI that allows you easily switch variations and view event logs.</p>\n<pre><code class=\"lang-obj-c\">[Optimizely enablePreview];\n[Optimizely startOptimizelyWithAPIToken:YOUR_API_TOKEN launchOptions:launchOptions];\n</code></pre>\n<h2 id=\"advanced-setup\">Advanced Setup</h2>\n<p>Once you have run your first few visual editor experiments or tried out Optimizely&#39;s SDK, you may find you would like to include programmatic experiments, additional tracking calls, or analytics integrations.  For advanced setup, below are a subset of advanced features we recommend utilizing prior to releasing to the App Store:</p>\n<ol>\n<li><a href=\"../reference/index.html#register-live-variables\">Live Variables</a></li>\n<li><a href=\"../reference/index.html#code-blocks\">Code Blocks</a></li>\n<li><a href=\"../reference/index.html#custom-tags\">Custom Tags</a></li>\n<li><a href=\"../reference/index.html#track-event\">Track Event</a> (for key metrics you would like to track in your app)</li>\n<li><a href=\"../reference/index.html#revenue-tracking\">Revenue Tracking</a></li>\n<li><a href=\"../reference/index.html#analytics-integrations\">Analytics Integration</a></li>\n</ol>\n<p>For a comprehensive list of all additional methods available in the SDK you can refer to the <a href=\"../reference/index.html\">Reference</a> section or the <a href=\"http://developers.optimizely.com/ios/help/html/index.html\">Apple Docs</a>.</p>\n"}},"introduction":{"index":{"template":"page-sidebar","title":"Optimizely iOS SDK","body":"<h1 id=\"optimizely-ios-sdk\">Optimizely iOS SDK</h1>\n<p><em>The iOS SDK allows you to create and run experiments in your iOS app.</em></p>\n<p>Install the SDK within minutes to start A/B testing in your app.</p>\n<p>Once the app with the Optimizely SDK is submitted to the App Store, you can run experiments and collect data (and even create new experiments) without re-submitting to the App Store.  After you install the SDK in your app, you will be able to log into <a href=\"https://app.optimizely.com\">Optimizely&#39;s web application</a>.</p>\n<p>As a developer, you can use Optimizely&#39;s iOS SDK for:</p>\n<ul>\n<li>A/B testing</li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/206101447\">Phased rollouts</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/202296994-Creating-an-iOS-experiment#goals\">Event tracking</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/202296994-Creating-an-iOS-experiment#targeting\">Extensive targeting</a></li>\n</ul>\n<p>There are three types of changes you can make in Optimizely, one of which (Visual Editor) requires no coding once the SDK is installed. You can make visual changes in our Visual Editor, modify Live Variable values, and control Code Blocks.</p>\n<p><em>Visual Editor</em></p>\n<ul>\n<li>Does not require code to configure and start experiments</li>\n<li>Allows you to modify properties of existing elements in between app releases (e.g. text, color, etc.)</li>\n<li>Start experiments and immediately push changes to your live app without requiring App Store review</li>\n</ul>\n<p><em>Live Variables</em></p>\n<ul>\n<li>Requires Live Variables to already have been identified prior to App Store submission</li>\n<li>Optimizely allows you to change variable values in between releases</li>\n</ul>\n<p><em>Code Blocks</em></p>\n<ul>\n<li>Requires new code/features to be tested have already been submitted to App Store and approved</li>\n<li>Can perform phased roll-outs of new features for targeted group or percentage of your users directly from Optimizely</li>\n<li>Optimizely acts as the switch enabling you to intelligently activate your features/code and analyze the impact the new changes have made</li>\n</ul>\n<p>For more details, check out the following articles:</p>\n<ul>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/205014107-How-Optimizely-s-SDKs-Work-SDK-Order-of-execution-experiment-activation-and-goals\">How Optimizely&#39;s SDKs Work</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/205156117-QA-Your-Optimizely-iOS-and-Android-Experiments\">QA Your Optimizely Experiments</a></li>\n</ul>\n<p><em>Here are some resources to help you get started!</em></p>\n<p>Plan Your Testing Strategy</p>\n<ul>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/201940160?utm_medium=product&amp;utm_source=mobile&amp;utm_campaign=dashboard_empty_002\">Optimization Essentials</a>: Learn how to move the metrics that matter</li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/202248294?utm_medium=product&amp;utm_source=mobile&amp;utm_campaign=dashboard_empty_003\">Mobile Testing Ideas</a>: Try these low-effort, high-impact experiment ideas</li>\n</ul>\n<p>Get Ready, Get Set, Test!</p>\n<ul>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/202296994?utm_medium=product&amp;utm_source=mobile&amp;utm_campaign=dashboard_empty_001#steps\">Getting Started</a>: Five simple steps to creating your first experiment</li>\n</ul>\n<p>Any questions or feedback?  E-mail us at <a href=\"mailto:mobile-support@optimizely.com\">mobile-support@optimizely.com</a>.</p>\n<p><a class=\"button button--highlight anchor--middle display--block width--200 text--center\" href=\"../getting-started/index.html\">\nGet Started\n</a></p>\n"}}},"javascript":{"code-samples":{"variation-code":{"0-intro":{"partial":"_inline.html","title":"Variation code","anchor":"variation-code","body":"<p>These code samples can be used within your experiments&#39; <a href=\"https://help.optimizely.com/hc/en-us/articles/200039835-The-Code-Editor-Edit-Code-and-Variation-Code#edit_code\">variation code</a>.</p>\n"},"1-access-data":{"partial":"_inline.html","title":"Access data on page","anchor":"access-data-variation-code","js":"/*\n * Example showing how to reference a variable defined natively on the page from inside Optimizely.\n */\n\n // Variation code example injecting the 'visitorName' property of the 'exampleObject' in the h3 elements\n $('h3').text('Hello,' + window.exampleObject['visitorName']);","body":"<p>This is an example using JavaScript to access an object defined outside of the Optimizely snippet.  Please note that the variable must be declared above the snippet, so it is defined before Optimizely evaluates Audience conditions or executes experiment code.</p>\n"}},"technology-integrations":{"0-intro":{"partial":"_inline.html","title":"Integrations","anchor":"technology-integrations","body":"<p>You can find code-samples for creating integrations with Optimizely in the <a href=\"http://developers.optimizely.com/integrations/\">integrations</a> section.</p>\n"}},"single-page-applications":{"1-ajax-complete":{"partial":"_inline.html","title":"AJAX complete","anchor":"single-page-apps-ajax-complete","js":"/*\n *  Usage\n *     Apply variation code when an AJAX request is completed. In this example, we also require the request URL contain the sub-string \"/shopping-cart\".\n *\n *  @param {Function} handler - A function to execute when the ajaxComplete event is triggered.\n *\n *  e.g. window.$(document).ajaxComplete(handler)\n */\n\n // Usage example\n window.$(document).ajaxComplete(function(event, xhr, settings) {\n   if (settings.url.indexOf('/shopping-cart') > -1) {\n     //apply variation code\n   }\n });","body":"<p>This JavaScript will apply variation code whenever an AJAX request is complete.  In this example, we also require that the request URL contain the sub-string &quot;/shopping-cart&quot;.  Please see <a href=\"http://api.jquery.com/ajaxcomplete/\">the official jQuery documentation</a> for more details on this method.</p>\n<p>Please note that the .ajaxComplete() method is not included in the trimmed version of jQuery loaded with Optimizely by default. A library defining this method must be loaded before the snippet to use this code.</p>\n"},"0-intro":{"partial":"_inline.html","title":"Single page apps","anchor":"single-page-apps","body":"<p>On traditional websites, when visitors click links, the links generally lead to a new URL and load an entirely new page. In <a href=\"https://help.optimizely.com/hc/en-us/articles/203326524-AngularJS-Backbone-js-React-and-other-Single-Page-Applications\">Single Page Applications</a>, the whole page doesn&#39;t reload; instead, certain content is changed, loaded, and swapped out in the current URL. Since Optimizely generally loads once per page load we&#39;ve created these code samples to help accommodate the behavior of Single Page Applications.</p>\n"}},"results":{"3-results":{"partial":"_inline.html","type":"GET","endpoint":"experiments/1234/results","title":"Get results","anchor":"results-stats","response":null,"body":"<p>Finally, you&#39;ll want to <a href=\"/rest/reference/index.html#get-stats\">get the results</a> for each active experiment.  The response contains the results for every <code>variation_id</code> and <code>goal_id</code> that has been defined for that experiment.</p>\n"},"1-connect":{"partial":"_inline.html","type":"GET","endpoint":"projects/","title":"Connect a project","anchor":"results-connect","response":"[\n  {\n    \"project_id\": 1234,\n    \"project_name\": \"My project\"\n  },\n  {\n    \"project_id\": 1235,\n    \"project_name\": \"My other project\"\n  }\n]","body":"<p>First, you&#39;ll need to <a href=\"/rest/reference/index.html#authentication\">authenticate</a> with our REST API and choose which project to retrieve results for.  You can <a href=\"/rest/reference/index.html#list-projects\">list out all the projects</a> in a user&#39;s account using the example request here.</p>\n"},"0-intro":{"partial":"_inline.html","title":"Experiment results (pre-Stats-Engine)","anchor":"results","body":"<p>To illustrate how to <a href=\"/rest/reference/index.html#get-results\">get experiment results</a> via the REST API, as served prior\nto the launch of the <a href=\"https://help.optimizely.com/hc/en-us/articles/200039895\">Optimizely Stats Engine</a>, we&#39;ve built a\nbasic web application that gets the top-level results for the active experiments in a project.  This code sample walks\nthrough all of the REST API calls that are used by the web application.</p>\n<p>You can download the full source code from the link below.</p>\n<p><a class=\"btn btn-primary\" target=\"_blank\" href=\"https://github.com/optimizely/optimizely-api-samples/tree/master/results_api_sample\">Download source code</a></p>\n<p>The application uses jQuery to make the API calls, as described in our <a href=\"#ajax\">AJAX code sample</a>.</p>\n"},"2-list":{"partial":"_inline.html","type":"GET","endpoint":"projects/1234/experiments","title":"List experiments","anchor":"results-list","response":"[\n  {\n    \"id\": 15,\n    \"project_id\": 1234,\n    // ... (other fields omitted)\n    \"variation_ids\": [115, 210, 215],\n    \"edit_url\": \"https://mysite.com/products/\",\n    \"status\": \"Not started\"\n  },\n  {\n    \"id\": 16,\n    \"project_id\": 1234,\n    // ... (other fields omitted)\n    \"variation_ids\": [216, 217, 218],\n    \"edit_url\": \"https://mysite.com/cart/\",\n    \"status\": \"Running\"\n  },\n]","body":"<p>Next, you&#39;ll want to <a href=\"/rest/reference/index.html#list-experiments\">list out all of the experiments</a> for the selected project.  You can tell which experiments are active based on the <code>status</code> field.</p>\n"}},"mutually-exclusive":{"01-mutually-exclusive-projectjs":{"partial":"_inline.html","title":"Tagging Experiment Names (Requires ProjectJS)","anchor":"mutually-exclusive-projectjs","js":"\n/*\n * Usage\n *\n * Place this code in your project JS.\n * This code allows you to run mutually exclusive experiments by tagging experiment names.\n * Experiment naming convention includes [ME], [ME] holdout,\n * [Group_X] where X can be any letter, [Group_X_ME], and [Group_X] holdout\n *\n * See http://developers.optimizely.com/samples/#mutually-exclusive for more information\n * about running mutually exclusive experiments.\n *\n */\n\nfunction getParameterByName(e){e=e.replace(/[\\[]/,\"\\\\[\").replace(/[\\]]/,\"\\\\]\");var o=new RegExp(\"[\\\\?&]\"+e+\"=([^&#]*)\"),n=o.exec(location.search);return null===n?\"\":decodeURIComponent(n[1].replace(/\\+/g,\" \"))}function getRunningExperiments(){var e=[];for(var o in DATA.experiments){var n=DATA.experiments[o];n.enabled&&-1===window.location.search.indexOf(\"x\"+o)&&e.push(o)}return window.running=e,e}function getRunningExclusiveExperiments(e){var o=[];for(var n in DATA.experiments){var r=DATA.experiments[n];if(r.enabled&&-1===window.location.search.indexOf(\"x\"+n)){var t=DATA.experiments[n].name.toLowerCase().indexOf(\"[Group_\".toLowerCase()),i=DATA.experiments[n].name.toLowerCase().indexOf(\"[ME]\".toLowerCase());t>-1&&e||i>-1&&e?o.push(n):-1!=t||-1!=i||e||o.push(n)}}return e?window.running_exclusive=o:window.running_non_exclusive=o,o}function expArrayToJSON(e,o,n){var r={};if(n)for(var t in e)t!=o&&e[t].name.toLowerCase().indexOf(\"[EXCLUSIVE]\".toLowerCase())>-1&&(r[t]=\"0\");else for(var t in e)t!=o&&(r[t]=\"0\");return r}function log(e){window.log_arr=window.log_arr||[],window.log_arr.push(e)}function groupFlow(e,o){for(var n in o.groups){var r=o.groups[n];if(r.holdout!==!1&&Math.floor(100*Math.random())>95)e.push(r.holdout);else{var t=Math.floor(Math.random()*(r.exps.length+r.me.length));t<r.exps.length?e=e.concat(r.exps):e.push(r.me[t-r.exps.length])}}return e}function pickExperiment(e){var o=location.hostname.split(\".\");o=\".\"+o[o.length-2]+\".\"+o[o.length-1];var n={allExp:getRunningExclusiveExperiments(!0)},r={allExp:getRunningExclusiveExperiments(!1)},t=[];if(n=sortGroups(n),n.allExp.indexOf(e)>-1||r.allExp.indexOf(e)>-1)t.push(e);else if(void 0!==n.me&&void 0!==n.me.holdout&&Math.floor(100*Math.random())>95)t.push(n.me.holdout);else if(void 0===n.groups)t.push(n.me.exps[Math.floor(Math.random()*n.me.exps.length)]);else if(void 0===n.me)t=groupFlow(t,n);else{var i=n.allExp.length-n.me.exps.length;Math.floor(Math.random()*n.allExp.length)<i?t=groupFlow(t,n):t.push(n.me.exps[Math.floor(Math.random()*n.me.exps.length)])}return t=t.concat(r.allExp),docCookies.setItem(\"optimizelyExp\",t,1728e8,\"/\",o),t}function sortGroups(e){for(var o=0;o<e.allExp.length;o++){var n=DATA.experiments[e.allExp[o]],r=n.name.toLowerCase();r.indexOf(\"group_\")>-1?(void 0===e.groups&&(e.groups={}),void 0===e.groups[r.charAt(7)]&&(e.groups[r.charAt(7)]={holdout:!1,me:[],exps:[]}),r.indexOf(\"holdout\")>-1?e.groups[r.charAt(7)].holdout=e.allExp[o]:r.indexOf(\"_me\")>-1?e.groups[r.charAt(7)].me.push(e.allExp[o]):e.groups[r.charAt(7)].exps.push(e.allExp[o])):(void 0===e.me&&(e.me={holdout:!1,exps:[]}),r.indexOf(\"holdout\")>-1?e.me.holdout=e.allExp[o]:e.me.exps.push(e.allExp[o]))}return e}function updateBuckets(e){window.optimizely=window.optimizely||[],log(\"Mutual exclusion chose experiment \"+e);for(var o in DATA.experiments)-1===e.indexOf(o)&&-1===window.location.search.indexOf(\"x\"+o)?(DATA.experiments[o].enabled=!1,log(\"Disable experiment \"+o)):console.log(\"Active - \"+o+\": \"+DATA.experiments[o].name)}var docCookies={getItem:function(e){return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\"+encodeURIComponent(e).replace(/[\\-\\.\\+\\*]/g,\"\\\\$&\")+\"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"),\"$1\"))||null},setItem:function(e,o,n,r,t,i){if(!e||/^(?:expires|max\\-age|path|domain|secure)$/i.test(e))return!1;var p=\"\";if(n)switch(n.constructor){case Number:p=1/0===n?\"; expires=Fri, 31 Dec 9999 23:59:59 GMT\":\"; max-age=\"+n;break;case String:p=\"; expires=\"+n;break;case Date:p=\"; expires=\"+n.toUTCString()}return document.cookie=encodeURIComponent(e)+\"=\"+encodeURIComponent(o)+p+(t?\"; domain=\"+t:\"\")+(r?\"; path=\"+r:\"\")+(i?\"; secure\":\"\"),!0},removeItem:function(e,o,n){return e&&this.hasItem(e)?(document.cookie=encodeURIComponent(e)+\"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\"+(n?\"; domain=\"+n:\"\")+(o?\"; path=\"+o:\"\"),!0):!1},hasItem:function(e){return new RegExp(\"(?:^|;\\\\s*)\"+encodeURIComponent(e).replace(/[\\-\\.\\+\\*]/g,\"\\\\$&\")+\"\\\\s*\\\\=\").test(document.cookie)},keys:function(){for(var e=document.cookie.replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g,\"\").split(/\\s*(?:\\=[^;]*)?;\\s*/),o=0;o<e.length;o++)e[o]=decodeURIComponent(e[o]);return e}};if(window.print_log=function(){window.log_arr=window.log_arr||[],console.log(window.log_arr.join(\"\\n \"))},\"undefined\"!=typeof DATA){var force_exp=getParameterByName(\"optimizely_exclusive_force\"),exp=docCookies.getItem(\"optimizelyExp\");if(null!==exp&&exp.indexOf(\",\")>-1&&\"\"==force_exp){exp=exp.split(\",\");for(var i=0;i<exp.length;i++)if(!DATA.experiments.hasOwnProperty(exp[i])||!DATA.experiments[exp[i]].enabled)var exp=pickExperiment(force_exp)}else if(!exp||!DATA.experiments.hasOwnProperty(exp)||!DATA.experiments[exp].enabled||\"\"!=force_exp)var exp=pickExperiment(force_exp);window.opt_expid=exp,updateBuckets(exp)};","body":"<p>This code allows you to bucket users into different experiments that would otherwise all run simultaneously. Implementing mutually exclusive code does REDUCE the amount of users exposed to each experiment tagged with a mutually exclusive tag.</p>\n<p>An informational slide deck can be found at: <a href=\"https://docs.google.com/presentation/d/1k4DlrxCcz35AXo1qq2O9xEhN8rD5XYN4aMc4QHWNOPE/edit?usp=sharing\">https://docs.google.com/presentation/d/1k4DlrxCcz35AXo1qq2O9xEhN8rD5XYN4aMc4QHWNOPE/edit?usp=sharing</a></p>\n<p>Execution flow for the code:</p>\n<ul>\n<li>First evaluate whether none of the experiments will be picked. There is a 5% chance for this condition and its called a global holdout as designated by the &#39;[ME] holdout&#39;.</li>\n<li>Next a random number picks whether the group or ME flow phase is picked.</li>\n<li>If the group flow is picked, a flow within each group picks either one group ME experiment marked [Group_A_ME] or all group experiments not marked with an ME [Group_A].</li>\n<li>There is a 5% chance within the group flow to pick a holdout experiment if it exists.</li>\n<li>If the ME flow is picked, one experiment marked with an [ME] is selected.</li>\n</ul>\n<p>Helpful Tips:</p>\n<ul>\n<li>Use the same url targeting and audiences in experiments that are in the same group.</li>\n<li>Tag mutually exclusive experiments within each group with an ME in the tag: [Group_X_ME].</li>\n<li>Tag experiments that are run sitewide that affect other experiments with [ME] to disallow any group experiments from running.</li>\n<li>Run a holdout experiment in group tags and me tags to maintain a baseline: [Group_X] holdout or [ME] holdout.</li>\n<li>You can run a setup with just [ME] tags or just [Group_X] tags.</li>\n<li>You aren&#39;t forced to run any of the tags for the code to work as expected.</li>\n</ul>\n<p>If you don&#39;t currently have ProjectJS in your account, you can upgrade! Get more information at: <a href=\"https://help.optimizely.com/hc/en-us/articles/200040055#switching\">https://help.optimizely.com/hc/en-us/articles/200040055#switching</a></p>\n"},"0-intro":{"partial":"_inline.html","title":"Mutually Exclusive","anchor":"mutually-exclusive","body":"<p>These code samples are for mutually exclusive experiments.</p>\n"}},"introduction":{"0-intro":{"partial":"_inline.html","title":"Introduction","anchor":"introduction","body":"<p>In order to help you get up and running quickly, we have provided a number of code samples that you can use.\nBe sure to modify the code appropriately before running in production!</p>\n<h4 id=\"table-of-contents\">Table of Contents</h4>\n<ul>\n<li><p><em>Event tracking:</em> To track events that are not provided out of the box by Optimizely (e.g. purchase data or offline conversions), check out our section on <a href=\"#advanced-goal-tracking\">Events</a> which explains all of our available tracking APIs.</p>\n</li>\n<li><p><em>Custom JS conditions:</em> If you expose first or third party data on the client, then you can use Optimizely&#39;s <a href=\"#custom-js\">custom JS conditions</a> to port data into different audiences.</p>\n</li>\n<li><p><em>Advanced use cases:</em> These <a href=\"#advanced-use-cases\">advanced use cases</a> will help you push the limits of what Optimizely is capable of doing within Project, Experiment, and Variation JavaScript.</p>\n</li>\n<li><p><em>Conditional activation:</em> Sometimes you&#39;ll want to trigger an Optimizely experiment dynamically, after some part of the page or screen has loaded. Read our <a href=\"#conditional\">Conditional activation</a> section for more information on how to control when Optimizely activates.</p>\n</li>\n<li><p><em>Helper functions:</em> Many times, it is necessary to use getter and setter methods within Optimizely to better interact with your website. This list of <a href=\"#helpers\">helper functions</a> are frequently used in Project, Experiment, and Variation JavaScript.</p>\n</li>\n<li><p><em>Mutually Exclusive:</em> In addition to normal experiments, you can <a href=\"#mutually-exclusive\">mutually exclusive</a> experiments.</p>\n</li>\n<li><p><em>Single page apps:</em> On traditional websites, when visitors click links, the links generally lead to a new URL and load an entirely new page. In Single Page Applications, the whole page doesn&#39;t reload; instead, certain content is changed, loaded, and swapped out in the current URL. Check out our <a href=\"#single-page-apps\">single page app</a> section to help accommodate the behavior of Single Page Applications.</p>\n</li>\n<li><p><em>Integrations:</em> Whether you&#39;re looking to create a custom integration with an analytics platform or if you&#39;re looking to do WordPress headline testing with Optimizely, these <a href=\"#technology-integrations\">integration code samples</a> will help you navigate these processes.</p>\n</li>\n<li><p><em>Variation code:</em> If you would like to write your own variation code instead of using the Optimizely visual editor, check out our <a href=\"#variation-code\">Variation code</a> section that explains how to format Optimizely variations with example code.</p>\n</li>\n</ul>\n"}},"helpers":{"20-redirect-diff-domain":{"partial":"_inline.html","title":"Redirect- Same path different domain","anchor":"helpers-diff-domain","js":"\n/*\n *  Usage\n *    This JavaScript will redirect a visitor to the same path on a different domain.  Make sure NOT to include the protocol when passing in the NEW_DOMAIN.\n *\n *  @param {String} newDomain - Change \"[NEW_DOMAIN]\" to the new domain, NOT including the protocol.\n */\n\n/* _optimizely_redirect=http://custom_new_domain */\nvar newDomain = \"[NEW_DOMAIN]\";\nvar _optly = {redir: document.createElement(\"a\")};\n_optly.redir.href = window.location.href;\n_optly.redir.hostname = newDomain;\nwindow.location.replace(_optly.redir.href);","body":"<p>This JavaScript will redirect a visitor to a new domain, preserving the rest of the URL.</p>\n"},"18-redirect-add-query":{"partial":"_inline.html","title":"Redirect - Query parameter","anchor":"helpers-add-query-param","js":"\n/*\n *  Usage\n *    This JavaScript will add a query parameter you specify to the visitor's current URL.\n *\n *  @param {String} newQuery - Parameter key-value pair. Replace [PARAM_NAME] and [PARAM_VALUE] with your values.\n */\n\n/* _optimizely_redirect=http://custom_add_query_param */\nvar newQuery = \"[PARAM_NAME]=[PARAM_VALUE]\";\nvar _optly = {redir: document.createElement(\"a\")};\n_optly.redir = {protocol: \"https:\" == document.location.protocol ? \"https://\" : \"http://\",\n                domain: window.location.hostname,\n                pathname: window.location.pathname\n               };\n_optly.cur = window.location.search;\nif (_optly.cur) {\n  _optly.redir.query = _optly.cur + \"&\" + newQuery;\n} else {\n  _optly.redir.query = \"?\" + newQuery;\n}\n_optly.redir.href = _optly.redir.protocol + _optly.redir.domain + _optly.redir.pathname + _optly.redir.query;\nwindow.location.replace(_optly.redir.href);","body":"<p>This JavaScript will redirect a visitor to a new URL after appending a query parameter you specify.</p>\n<p>Please exclude the query parameter as an Audience condition to prevent it from getting added multiple times.</p>\n"},"06-dynamic-content-clicks":{"partial":"_inline.html","title":"Track clicks on dynamic content","anchor":"helpers-dynamic--content-clicks","js":"/*\n *  Usage\n *    Track clicks on elements loaded after DOM ready.  The .delegate() method allows you to select all current and future elements that match the selector passed in as the first argument.\n *\n *  @param {String} selector - Provide the element selector.\n *  @param {String} eventName - Provide the custom event name.\n */\n\n var selector = [YOUR_SELECTOR];\n var eventName = [YOUR_EVENT_NAME];\n\n $('html').delegate(selector, 'mousedown touchend', function() {\n   window['optimizely'] = window['optimizely'] || [];\n   window.optimizely.push([\"trackEvent\", eventName]);\n });","body":"<p>This JavaScript will let you track clicks on elements loaded after DOM ready as a custom event in Optimizely.  See our article on <a href=\"https://help.optimizely.com/hc/en-us/articles/200039925\">Custom Event Goals</a> to learn more about tracking custom events.</p>\n"},"04-external-js":{"partial":"_inline.html","title":"Load external JavaScript","anchor":"helpers-external-js","js":"/*\n * Usage\n *    This function will append an external JavaScript to the head of the document.\n *\n *  @param {String} location - The location of the file you'd like to load.\n *  @param {Function} callback - [OPTIONAL] A function to call when the script has completed downloading.\n *\n */\n\n var loadScript = function(location, callback){\n   var fileRef = document.createElement('script');\n   fileRef.setAttribute('type','text/javascript');\n\n   if (callback) {\n     if (fileRef.readyState) {  // IE\n       fileRef.onreadystatechange = function() {\n         if (fileRef.readyState == 'loaded' || fileRef.readyState == 'complete') {\n           fileRef.onreadystatechange = null;\n           callback();\n         }\n       };\n     } else {  // Non-IE\n       fileRef.onload = function(){\n         callback();\n       };\n     }\n   }\n\n   fileRef.setAttribute('src', location);\n   document.head.appendChild(fileRef);\n };\n\n loadScript('http://www.example.com/test.js', function() {\n   // CALLBACK - code that does something with the data returned by loading the script\n });","body":"<p>This function will append an external JavaScript to the head of the document.  You can optionally provide a callback function as well.</p>\n"},"02-set-cookie":{"partial":"_inline.html","title":"Set cookie","anchor":"helpers-set-cookie","js":"/*\n * Usage\n *    This function will set a cookie on the visitor's browser.\n *\n *  @param {String} c_name - The name of the cookie.\n *  @param {String} value - The value of the cookie.\n *  @param {Float} exdays - The number of days the cookie should last.\n *  @param {String} c_domain - The domain on which this cookie should be set and can be read.\n\n *\n */\n\n var setCookie = function(c_name,value,exdays,c_domain) {\n   c_domain = (typeof c_domain === \"undefined\") ? \"\" : \"domain=\" + c_domain + \";\";\n   var exdate=new Date();\n   exdate.setDate(exdate.getDate() + exdays);\n   var c_value=escape(value) + ((exdays==null) ? \"\" : \"; expires=\"+exdate.toUTCString());\n   document.cookie=c_name + \"=\" + c_value + \";\" + c_domain + \"path=/\";\n }","body":"<p>This function sets a cookie and accepts the cookie&#39;s name, value, domain and duration in days as arguments.</p>\n"},"0-intro":{"partial":"_inline.html","title":"Helper functions","anchor":"helpers","body":"<p>Below are some helper functions you might find useful to run more customized Optimizely experiments. These code samples are typically used in the <a href=\"https://help.optimizely.com/hc/en-us/articles/200039835-The-Code-Editor-Edit-Code-and-Experiment-JS-CSS\">Edit Code box or Experiment JS</a>, unless otherwise noted.</p>\n"},"01-read-cookie":{"partial":"_inline.html","title":"Read cookie","anchor":"helpers-read-cookie","js":"/*\n * Usage\n *    This function will return the value of the cookie name passed in as the argument.\n *\n *  @param {String} name - The name of the cookie.\n */\n\n var getCookie = function(name) {\n   var match = document.cookie.match(name+'=([^;]*)');\n   return match ? match[1] : undefined;\n };","body":"<p>This function reads a cookie from the visitor&#39;s browser and returns the value.</p>\n"},"03-set-interval":{"partial":"_inline.html","title":"Poll for element","anchor":"helpers-poll-for-element","js":"/*\n * Usage\n *    This function is a recursive setTimeout of 50ms that polls for an element matching the selector in the if statement.\n *  @param {String} selector - The CSS path for the selector that you're polling for.\n */\n\n var pollForElement = function(selector) {\n   if ($(selector).length > 0) {\n   // code to run once element is found on page\n   }\n   else {\n     setTimeout(pollForElement, 50);\n   }\n };","body":"<p>This function polls for an element on the page every 50ms that matches a specified selector.  This is useful when you want to modify an element that is not injected into the DOM until shortly after document ready.</p>\n"},"05-get-parameter":{"partial":"_inline.html","title":"Get query parameter value","anchor":"helpers-get-parameter","js":"/*\n * Usage\n *    This function takes a query parameter name and returns its value.\n *\n *  @param {String} name - The name of the query parameter, whose value you want returned.\n */\n\n var getQueryParam = function(name) {\n   var match = window.location.search.match(name + '=([^&]*)');\n   return match ? match[1] : undefined;\n }\n\n // example showing the function called, with the return value inserted in the first h1 element\n $('h1:eq(0)').text(getQueryParam('myParam'));","body":"<p>This function will return the value of a query parameter.  This is useful if you&#39;d like to render a query parameter value on the page itself.</p>\n<p>For example, you may store a visitor&#39;s search term in a query parameter.  You can use this function to render their search term on the page, providing a personalized experience.</p>\n"},"07-sticky-nav":{"partial":"_inline.html","title":"Sticky navigation bar","anchor":"helpers-sticky-nav","js":"/*\n *  Usage\n *     Pass in the ID of an element whose position you want fixed once the visitor scrolls past the element's initial position.  If the visitor scrolls up again, the element will take on its original position.\n *\n *  @param {String} id - The CSS ID of the element you want to have fixed position.\n *\n */\n\n var makeSticky = function(id) {\n   var menuOffset = document.getElementById(id).offsetTop;\n   var docScroll = $(document).scrollTop();\n   $(document).bind('ready scroll', function() {\n     docScroll = $(document).scrollTop();\n     if(docScroll >= menuOffset) {\n       $('#'+id).css({'position':'fixed', 'top':'0', 'z-index': '1000'});\n     } else {\n       $('#'+id).css({'position':'initial','z-index':'0'});\n     }\n   });\n }\n\n // Usage example\n makeSticky('mainNavBar');","body":"<p>This JavaScript will make one element&#39;s position fixed once the visitor scrolls below its original position.</p>\n"},"19-redirect-new-path":{"partial":"_inline.html","title":"Redirect - New path","anchor":"helpers-new-path","js":"\n/*\n *  Usage\n *    This JavaScript will redirect a visitor to a new path.\n *\n *  @param {String} newPath - Replace \"/[NEW_PATH]\" with your new path, but keep the '/'.\n */\n\n/* _optimizely_redirect=http://custom_new_path */\nvar newPath = \"/[NEW_PATH]\";\nvar _optly = {redir: document.createElement(\"a\")};\n_optly.redir = {protocol: \"https:\" == document.location.protocol ? \"https://\" : \"http://\",\n                domain: window.location.hostname,\n                query: window.location.search\n               };\n_optly.redir.href = _optly.redir.protocol + _optly.redir.domain + newPath + _optly.redir.query;\nwindow.location.replace(_optly.redir.href);","body":"<p>This JavaScript will redirect a visitor to a new path, preserving the rest of the URL.</p>\n"},"21-redirect-keep-hash":{"partial":"_inline.html","title":"Redirect - Hash parameter","anchor":"helpers-keep-hash","js":"\n/*\n *  Usage\n *    This JavaScript will redirect a visitor to the URL you pass in while preserving all hash parameters.  Be sure to include the protocol in the [REDIRECT_URL]\n *\n *  @param {String} redirectUrl - Replace \"[REDIRECT_URL]\" with the new URL.\n */\n\n/* _optimizely_redirect=http://custom_keep_hash */\nvar redirectUrl = \"[REDIRECT_URL]\";\nvar _optly = {redir:document.createElement(\"a\")};\n_optly.redir.href = redirectUrl;  //\n_optly.cur = window.location.search;\nif (_optly.cur) {\n  _optly.redir.search = _optly.redir.search ? _optly.cur + \"&\" + _optly.redir.search.slice(1) : _optly.cur;\n}\nif (window.location.hash) {\n  _optly.redir.hash = window.location.hash;\n}\nwindow.location.replace(_optly.redir.href);","body":"<p>This JavaScript will redirect a visitor to a new URL while preserving the hash parameters.</p>\n"}},"conditional":{"6-angular-page-change":{"partial":"_inline.html","title":"Function - Angular page change","anchor":"conditional-activation-angular-page-change","js":"/*\n * Condition: Activate when an Angular.js application successfully changes location\n * Type: Callback function\n */\n\n function(activate, options) {\n   var scope = window.angular.element('body').scope();\n   scope.$on('$locationChangeSuccess', function(event, next, current) {\n     if (next.indexOf('/productPage') != -1) {\n       if (!options.isActive) {\n         activate();\n       }\n     }\n   });\n }","body":"<p>To activate an experiment when an Angular.js location change happens, setup an event listener on the <code>$locationChangeSuccess</code> event and activate the experiment if the page change meets the right criteria.</p>\n<p>Note: Not all Angular.js implementations are the same and thus this exact implementation may not work correctly on all websites. This is just an example of how to leverage built in Angular.js functions to activate an experiment at the right time.</p>\n"},"4-button-click":{"partial":"_inline.html","title":"Function - Button click","anchor":"conditional-activation-button-click","js":"/*\n * Condition: Activate when a button is clicked\n * Type: Callback function\n */\n\n function(activate, options) {\n   $('html').delegate('#btn', 'mousedown', function() {\n     activate();\n   });\n }","body":"<p>To activate an experiment when a button is clicked on, bind a <code>click</code> or <code>mousedown</code> event to that element using jQuery and activate the experiment when that event fires.</p>\n"},"2-js-variable":{"partial":"_inline.html","title":"Polling - JavaScript variable","anchor":"conditional-activation-js-variable","js":"/*\n * Condition: Activate when the Omniture eVar 33 contains 'product'\n * Type: Polling\n */\n\n window.s.eVar33.indexOf('product') != -1","body":"<p>To activate an experiment based on the value of a JavaScript variable, simply enter the condition to check.</p>\n"},"0-intro":{"partial":"_inline.html","title":"Conditional activation","anchor":"conditional","js":"\n/*\n * Usage Option #1 - Polling\n *   Optimizely will poll for the code condition to be true if the JavaScript\n *   entered does not evaluate to a function type.\n *\n *  Note: Optimizely will evaluate this code in a try/catch block, meaning\n *  if your expression errors, it will be evaluated as false\n */\n\n [Code whose last line evaluates to true/false, just like custom JS targeting]\n\n\n/*\n * Usage Option #2 - Callback Function\n *   Optimizely will call the function entered immediately if the JavaScript entered\n *   does evaluate to a function type.\n *\n * @param {Function} activate - Activate this experiment\n * @param {Object=}  options {\n *                     isActive : {Boolean} - Indicates if this experiment is active\n *                     experimentId : {Integer} - This experiment's Id\n *                   }\n *\n *  Note: Optimizely will call this function immediately when the snippet loads, so make\n *  sure any functions referenced are defined at that time.\n */\n\n function(activate, options) {\n   // Do logic and call `activate()` when appropriate\n }","body":"<p><a href=\"https://help.optimizely.com/hc/en-us/articles/200040225-Activation-Mode-Activating-an-experiment-dynamically-after-a-page-has-loaded#conditional\">Conditional activation mode</a> is a flexible and powerful way to activate an experiment. There are two ways to use it: with <strong>polling</strong>, you enter a condition and Optimizely activates the experiment once that condition is true. With a <strong>callback</strong>, you enter a function and trigger a callback once your code is ready for the experiment to activate. These methods are described in more detail below, and we&#39;ve also highlighted several examples using each method.</p>\n<p>Based on the code you enter, Optimizely will automatically determine if it should be polled for or executed as a function. See the examples for detailed usage definitions.</p>\n<h4 id=\"polling\">Polling</h4>\n<p>If the code entered <strong>does not</strong> evaluate to a function type, it will be checked every 50ms and the experiment will be activated when it evaluates to true. Optimizely checks this code in a try/catch block, so a condition which results in an error will be assumed to be false and polling will continue.</p>\n<h4 id=\"callback-function\">Callback Function</h4>\n<p>If the code entered <strong>is</strong> a function, Optimizely will assume it is of the form shown here and call it immediately, passing an <code>activate</code> function and an <code>options</code> object. Rather than returning a value, your code should call <code>activate()</code> when it is ready, leveraging <code>options.isActive</code> and <code>options.experimentId</code> if needed. Note that because this function is called immediately when the Optimizely snippet loads, any functions or variables referenced here should be available/defined at the time they are used.</p>\n<p><strong>Note:</strong> No matter which method is used, remember that this is only an activation condition. Visitors must still meet URL and Audience targeting to actually be bucketed into the experiment.</p>\n"},"1-meta-tag":{"partial":"_inline.html","title":"Polling - Meta tag data","anchor":"conditional-activation-meta-tag","html":"<meta name=\"keywords\" content=\"movies,games,videos,photos\"/>\n","js":"/*\n * Condition: Activate when the description meta tag contains 'sports', 'games', or 'puzzles'\n * Type: Polling\n */\n\n (/sports|games|puzzles/).test($('meta[name=keywords]').attr('content'))","body":"<p>To activate an experiment based on the value of a meta tag, select the contents of the meta tag with jQuery and check them for your value.</p>\n"},"3-dom-element":{"partial":"_inline.html","title":"Polling - DOM element","anchor":"conditional-activation-dom-element","js":"/*\n * Condition: Activate when the green button DOM element appears\n * Type: Polling\n */\n\n $('button.green').length > 0","body":"<p>To activate an experiment based on the existence of a DOM element, simply select that element with jQuery and check the length of the result.</p>\n"},"5-ajax-complete":{"partial":"_inline.html","title":"Function - AJAX response","anchor":"conditional-activation-ajax-complete","js":"/*\n * Condition: Activate when an AJAX call contains the element that should be changed\n * Type: Callback function\n */\n\n function(activate, options) {\n   $(document).ajaxComplete(function(event, xhr, settings) {\n     if (xhr.responseText.indexOf('rightRailModule') != -1) {\n       activate();\n     }\n   });\n }","body":"<p>To activate an experiment after an AJAX call returns, leverage jQuery&#39;s <code>ajaxComplete</code> function to listen to completed AJAX requests. If the response contains or corresponds to the element that should be changed, activate the experiment.</p>\n<p>Note: Optimizely&#39;s default (trimmed) version of jQuery does not contain the <code>ajaxComplete</code> function. To use this function, you can include the full version of jQuery in your Optimizely snippet (Project Settings -&gt; Project Code Settings) or reference your own version of jQuery which loads above the Optimizely snippet via <code>window.$</code>.</p>\n<p>Additionally, <code>$.ajaxComplete</code> can be disabled on your site if the AJAX setup is called with <code>global</code> option set to <code>false</code>, preventing this event from firing. See <a href=\"http://api.jquery.com/ajaxcomplete/\">jQuery&#39;s documentation</a> for more information.</p>\n"},"7-dom-mutation":{"partial":"_inline.html","title":"Function - DOM mutation activation","anchor":"conditional-activation-dom-mutation","js":"/*\n * Condition: Activate when the dom selector changes on the page\n * Type: Callback Function\n *\n * Place the following code in your Project Javascript and call the function below in your experiment's\n * conditional activation code box:\n *\n * window.activateOnDOMMutation('#element', window['optimizely'].push([\"activate\", EXPERIMENT_ID]), true);\n * @param '#element': DOM Selector of element you'd like to watch\n * @param 'window['optimizely'].push([\"activate\", EXPERIMENT_ID])': Replace EXPERIMENT_ID with the current\n * experiment's ID\n * @param 'true': True re-activates the experiment on the DOM selector changing or being added to the DOM.\n * False activates the experiment only the first time the selector is added or updated.\n */\n\n(function(win) {\n    'use strict';\n\n    var listeners = [],\n        doc = win.document,\n        MutationObserver = win.MutationObserver || win.WebKitMutationObserver,\n        observer;\n\n    function waitForElement(selector, repeat, fn) {\n\n        // Store the selector and callback to be monitored\n        listeners.push({\n            selector: selector,\n            fn: fn,\n            repeat: repeat,\n        });\n        if (!observer) {\n            // Watch for changes in the document\n            observer = new MutationObserver(check);\n            observer.observe($(document), {\n                childList: true,\n                subtree: true\n            });\n        }\n        // Check if the element is currently in the DOM\n        check();\n    }\n\n    function check() {\n        // Check the DOM for elements matching a stored selector\n        for (var i = 0, len = listeners.length, listener, elements; i < len; i++) {\n            listener = listeners[i];\n              // Query for elements matching the specified selector\n              elements = $(listener.selector);\n              for (var j = 0, jLen = elements.length, element; j < jLen; j++) {\n                 element = elements[j];\n                if (!element.ready || listener.repeat) {\n                     // Invoke the callback with the element\n                      listener.fn.call(element, element);\n                  }\n             }\n        }\n    }\n\n    function activateOnDOMMutation(selector, activate, repeat) {\n      repeat = repeat === undefined ? false : repeat;\n      if (window.MutationObserver || window.WebKitMutationObserver) {\n        waitForElement(selector, repeat, function(element) {\n           activate();\n        });\n      } else {\n        // this solution does not handle older browsers\n      }\n    }\n\n    // Expose functions\n    win.waitForElement = waitForElement;\n    win.activateOnDOMMutation = activateOnDOMMutation;\n\n})(this);","body":"<p>Note: This activation mode requires that you have Project Javascript enabled on your account. If you don&#39;t currently have ProjectJS in your account, you can upgrade! Get more information at: <a href=\"https://help.optimizely.com/hc/en-us/articles/200040055#switching\">https://help.optimizely.com/hc/en-us/articles/200040055#switching</a></p>\n<p>To activate an experiment based on a DOM element either changing or appearing on the page, simply make the following call in your experiment&#39;s conditional activation code box:</p>\n<pre><code class=\"lang-js\">function(activate, options) {\n  window.activateOnDOMMutation(&#39;#element:not(.changed)&#39;, activate, true);\n}\n</code></pre>\n<p>The first part of the call, <code>#element:not(.changed)</code>, is a DOM element selector that you would like to monitor. Any time this element appears on the page or is changed, the experiment will be activated either once or multiple times depending on the last parameter. You can use any DOM selector that you can use with jQuery. If you are change the selected element or its children in variation code you will create an infinite loop. You can prevent this by excluding selectors with an added class as shown in the code example. You would add the &quot;.changed&quot; class in experiment code.</p>\n<p>The second part of the call, <code>activate</code>, activates the experiment with the given ID.</p>\n<p>The last parameter, <code>true</code>, tells the DOM Mutation call whether you want to re-activate the experiment every time the selector changes or is added to the page. Adding &#39;false&#39; here will only activate the experiment once. This is useful when you are appending content to the page and you don&#39;t want to append every time the DOM selector changes.</p>\n"}},"audiences":{"2-create":{"partial":"_inline.html","title":"Create an audience","endpoint":"projects/43523/audiences/","anchor":"audiences-create","type":"POST","request":{"name":"Truck Shoppers","description":"(Imported from ______)"},"response":"{\n  \"name\": \"Truck Shoppers\",\n  \"description\": \"(Imported from ______)\",\n  \"project_id\": 43523,\n  \"id\": 85094\n}","body":"<p>Let&#39;s say you&#39;ve chosen project ID 43523. You can send a POST request to the <code>projects/43523/audiences</code> entry point to create an audience in that project.</p>\n<p>The response will include a unique <code>id</code> for the audience you created. You&#39;ll use this ID to assign visitors to the audience.</p>\n"},"0-intro":{"partial":"_inline.html","title":"Audiences","anchor":"audiences","body":"<p>If you have data about the visitors to a site, you can use our platform to group those visitors into <a href=\"https://help.optimizely.com/hc/en-us/articles/200039685-Audiences-Choose-which-visitors-to-include\">Optimizely Audiences</a>. This makes it easy to target content to different audiences and segment experiment results.</p>\n<p>In this example, we&#39;ll show how a data management platform could connect to Optimizely to create audiences and assign visitors to them on the fly. In this case, we&#39;ll use the REST API to create a &quot;Truck Shoppers&quot; audience, and then we&#39;ll use the JavaScript API to assign visitors to it whenever their cookie indicates they&#39;re in the market for a truck.</p>\n"},"1-connect":{"partial":"_inline.html","type":"GET","endpoint":"projects/","title":"Connect a project","anchor":"audiences-connect","response":"[\n  {\n    \"project_id\": 1234,\n    \"project_name\": \"My project\"\n  },\n  {\n    \"project_id\": 1235,\n    \"project_name\": \"My other project\"\n  }\n]","body":"<p>First, you&#39;ll need to <a href=\"/rest/reference/index.html#authentication\">authenticate</a> with our REST API. This will let you create audiences in the right account.</p>\n<p>You&#39;ll also need to choose a project to create the audiences in. If you&#39;re building an integration, you could ask for a <code>project_id</code> directly from the user.</p>\n<p>Alternatively, you can <a href=\"/rest/reference/index.html#list-projects\">list out all the projects</a> in a user&#39;s account and have them pick from a drop-down, as the example at right shows.</p>\n"},"3-assign":{"partial":"_inline.html","title":"Assign visitors","anchor":"audiences-assign","js":"window['optimizely'] = window['optimizely'] || [];\nwindow['optimizely'].push([\"addToAudience\", 85094]);","body":"<p>Now that you&#39;ve created the audience, you can assign visitors to it programmatically using our <a href=\"/javascript\">Javascript API</a>.</p>\n<p>Use the <code>addToAudience</code> call with the audience&#39;s <code>id</code> as the first argument.</p>\n<p>This call needs to happen <strong>before</strong> the Optimizely snippet loads, otherwise visitors won&#39;t see experiments targeted to that audience.</p>\n"}},"ajax":{"2-calling":{"partial":"_inline.html","title":"Calling the API","anchor":"calling-the-api","js":"OptimizelyAPI.prototype.call = function(type, endpoint, data, callback) {\n\n  var self = this;\n\n  var options = {\n    url: \"https://www.optimizelyapis.com/experiment/v1/\" + endpoint,\n    type: type,\n    headers: {\"Token\": this.token},\n    contentType: 'application/json',\n    success: function(response) {\n      self.outstandingRequests -= 1;\n      callback(response);\n    }\n  }\n\n  if (data) {\n    options.data = JSON.stringify(data);\n    options.dataType = 'json';\n  }\n\n  this.outstandingRequests += 1;\n  $.ajax(options);\n\n}","body":"<p>To call the API, we use jQuery&#39;s <code>$.ajax</code> function, which sends an asynchronous request based on a set of <code>options</code>.</p>\n<p>Our function takes four arguments:</p>\n<ul>\n<li><p>The request <code>type</code>, like GET or POST</p>\n</li>\n<li><p>The <code>endpoint</code> to hit, like <code>projects/27</code></p>\n</li>\n<li><p>The <code>data</code> to send along with a POST or PUT request</p>\n</li>\n<li><p>A <code>callback</code> function to run when the operation is done. The callback should take one argument, the <code>response</code>.</p>\n</li>\n</ul>\n<p>We construct the URL by appending the endpoint to the base API link, and we authenticate by adding the token in the headers section.</p>\n<p>To send data, we set content type to JSON and encode the array as a JSON string to send over the wire.</p>\n"},"0-intro":{"partial":"_inline.html","title":"API Calls with AJAX","anchor":"ajax","body":"<p>Often, you&#39;ll want to connect to Optimizely using AJAX, as we did when creating our WordPress plug-in.</p>\n<p>In this sample, we&#39;ll show how you can send AJAX calls using jQuery. We&#39;ll define a <code>OptimizelyAPI</code> class that handles all the authentication and encoding for API requests.</p>\n<p>You can see this connection in action in our WordPress sample below. To download it for use in your own projects, click the button below.</p>\n<p><a class=\"btn btn-primary\" target=\"_blank\" href=\"https://github.com/optimizely/optimizely-api-samples/blob/master/ajax_example/optimizely.js\">Download source code</a></p>\n"},"1-initialization":{"partial":"_inline.html","title":"Initialization","anchor":"initialization","js":"OptimizelyAPI = function(token) {\n  this.outstandingRequests = 0;\n  this.token = token;\n}\n\noptly = new OptimizelyAPI(\"abcdefghijklmnop:12345\");","body":"<p>The <code>OptimizelyAPI</code> class provides a connection to the API via JavaScript and lets you make authenticated calls without repeating yourself.</p>\n<p>We store the API <code>token</code> in each instance of the object, and we can connect to multiple different accounts by creating new instances of the <code>OptimizelyAPI</code> class.</p>\n<p>Finally, we keep track of how many requests are outstanding so we can tell when all the calls are complete.</p>\n"},"3-request_types":{"partial":"_inline.html","title":"Request types","anchor":"ajax-request-types","js":"OptimizelyAPI.prototype.get = function(endpoint, callback) {\n  this.call('GET', endpoint, \"\", callback);\n}\n\nOptimizelyAPI.prototype.delete = function(endpoint, callback) {\n  this.call('DELETE', endpoint, \"\", callback);\n}\n\nOptimizelyAPI.prototype.post = function(endpoint, data, callback) {\n  this.call('POST', endpoint, data, callback);\n}\n\nOptimizelyAPI.prototype.put = function(endpoint, data, callback) {\n  this.call('PUT', endpoint, data, callback);\n}","body":"<p>Using our <code>call</code> function, we can define convenience functions for each of the major types of call we&#39;ll need.</p>\n"}},"advanced-use-cases":{"3-browserTab-test":{"partial":"_inline.html","title":"Change page title","anchor":"advanced-use-cases-browserTab-test","js":"\n/*\n * Usage\n *   The following code will modify the title of the browser tab on the \"blur\" event and change it back to the original on the \"focus\" event.\n *\n */\n\n // store the original tab title\n var origTitle = document.title;\n\n // function to change title when focusing on tab\n function oldTitle() {\n   document.title = origTitle;\n }\n\n // function to change title when un-focusing on tab\n function newTitle() {\n   document.title = 'HELLO WORLD';\n }\n\n // bind functions to blur and focus events\n window.onblur = newTitle;\n window.onfocus = oldTitle;","body":"<p>This JavaScript will modify the text of the browser tab when a visitor focuses and unfocuses on the tab.  You can display one title when a visitor is focused on the tab and a different title when they toggle to a different tab or window.</p>\n"},"0-intro":{"partial":"_inline.html","title":"Advanced use cases","anchor":"advanced-use-cases","body":"<p>These code samples can be used within <a href=\"https://help.optimizely.com/hc/en-us/articles/200039855-Experiment-JavaScript-and-CSS-Run-JavaScript-and-CSS-across-all-variations#experiment_javascript\">Experiment JS</a> or <a href=\"https://help.optimizely.com/hc/en-us/articles/200039835-The-Code-Editor-Edit-Code-and-Variation-Code#edit_code\">Variation JS</a> to help satisfy advanced use cases within Optimizely.</p>\n"},"2-code-eval-limit":{"partial":"_inline.html","title":"Execute code for X visits","anchor":"advanced-use-cases-code-eval-limit","js":"\n/*\n * Usage\n *   The following allows you to set a limit on the number of times a Code Block will execute for any given visitor.\n */\n\n // the number of times the code should execute for a given visitor\n var limit = 3;\n // the number of days the evaluation limit should last\n var days = 180;\n // name of the cookie we use as the counter\n var cookieName = 'counterCookie';\n\n // function to fetch cookie values\n var getCookie = function(name) {\n   var match = document.cookie.match(name+'=([^;]*)');\n   return match ? match[1] : undefined;\n };\n\n // function to create cookies\n  var setCookie = function(c_name,value,exdays,c_domain) {\n    c_domain = (typeof c_domain === \"undefined\") ? \"\" : \"domain=\" + c_domain + \";\";\n    var exdate=new Date();\n    exdate.setDate(exdate.getDate() + exdays);\n    var c_value=escape(value) + ((exdays==null) ? \"\" : \"; expires=\"+exdate.toUTCString());\n    document.cookie=c_name + \"=\" + c_value + \";\" + c_domain + \"path=/\";\n  }\n\n // logic that counts and limits number of times code can evaluate for given visitor\n if (!getCookie(cookieName)) {\n   setCookie(cookieName, 1, days, window.location.hostname);\n } else {\n   var numberPops = parseInt(getCookie(cookieName)) + 1;\n   setCookie(cookieName, numberPops, days, window.location.hostname);\n }\n\n if (getCookie(cookieName) <= limit) {\n  // INSERT code to evaluate HERE\n }","body":"<p>This JavaScript will let you execute code a certain number of times within an experiment.</p>\n<p>For example, you might want to only show a pop up to visitors on their first 3 visits.  In this case, you place this code in either the Experiment JS or Variation code.</p>\n"},"6-get-conversion-info":{"partial":"_inline.html","title":"Get offline conversion parameters","anchor":"advanced-use-cases-get-conversion-info","js":"/*\n * Usage\n *    Loops through the Optimizely Data Object to return the information necessary to construct the off-line conversions URL.\n *\n */\n\n // grab the endUserID from the Optimizely Cookie\n var endUserId = document.cookie.match('optimizelyEndUserId=([^;]*)')[1];\n\n for (var i=0; i < optimizely.activeExperiments.length; i++) {\n   var experimentID = optimizely.activeExperiments[i];\n   var variationID = optimizely.variationIdsMap[experimentID];\n   var variationName = optimizely.variationNamesMap[experimentID];\n   // code to pass this data to your backend should go here\n }","body":"<p>This JavaScript loops through the Optimizely Data Object to return the information necessary to construct the off-line conversions URL.  Please note this code is only valid on pages where an experiment is currently running.</p>\n"}},"advanced-targeting":{"5-screen-sizes":{"partial":"_inline.html","title":"Target visitors based on screen size","anchor":"screen-sizes","js":"/*\n * Usage\n *  Specifies window size (in pixels) to target visitors.\n */\n\n //target desktop viewports\n //matches CSS media queries for height/width or max/min-height or -width\n window.innerWidth > 1400 && window.innerHeight > 800\n\n //target mobile phones\n //matches CSS media queries using device-height and device-width\n screen.width >= 320 && screen.width <= 480 && screen.height <= 640","body":"<p>The first condition will ensure that the experiment only runs if the screen width is greater than 1400 pixels and the height is greater than 800 pixels. The second condition will ensure the experiment only runs if the viewport width is between 320 and 480 pixels and the height is less than or equal to 640 pixels.</p>\n"},"1-access-data-in-Optly":{"partial":"_inline.html","title":"Access data on page","anchor":"advanced-targeting-data-access","js":"/*\n * Usage\n *    Example showing how to reference a variable defined natively on the page from inside Optimizely.\n *\n */\n\n // Audience condition example checking the 'category' property of the 'exampleObject'\n window.exampleObject['category'] == 'shirts';","body":"<p>This is an example using JavaScript to access an object defined outside of the Optimizely snippet.  Please note that the variable must be declared above the snippet, so it is defined before Optimizely evaluates Audience conditions or executes experiment code.</p>\n"},"0-intro":{"partial":"_inline.html","title":"Custom JS conditions","anchor":"custom-js","body":"<p>These code samples can be used within the <a href=\"https://help.optimizely.com/hc/en-us/articles/200040845-Custom-JavaScript-audience-targeting\">Custom JS Audience Condition</a>. Keep in mind that the JavaScript within this condition must evaluate to a boolean value on the last line of the code.</p>\n"},"4-meta-values":{"partial":"_inline.html","title":"Target pages based on meta values","anchor":"meta-values","js":"/*\n * Usage\n * Replace \"desired_value\" with the name of the meta value you're testing for.\n */\n\n $('meta[name=\"desired_value\"]').length > 0","body":"<p>The following condition will only run an experiment when a certain meta value is present on the page.</p>\n"},"6-user-agent":{"partial":"_inline.html","title":"Target specific user agents","anchor":"user-agent","js":"/*\n * Usage\n *  Targets visitors based on user-agent.\n */\n\n window.navigator.userAgent.indexOf(\"Chrome\") !== -1","body":"<p>The following condition will only run for visitors who are using the Google Chrome web browser.</p>\n"}},"advanced-goal-tracking":{"1-scroll-depth-milestones":{"partial":"_inline.html","title":"Scroll depth","anchor":"advanced-goal-tracking-scroll-depth-milestones","js":"/*\n * Usage\n *    This function fires custom events at different scroll depth milestones.\n */\n\n  // Variables to prevent continuous firing of custom events\n\n  var scrollTwentyFive = true;\n  var scrollFifty = true;\n  var scrollSeventyFive = true;\n  var scrollOneHundred = true;\n\n  // Create the scrollPercentage\n\n  $(window).bind('scroll', function() {\n      window.scrollPercent = ($(window).scrollTop() / ($(document).height() - $(window).height())) * 100;\n\n      // Conditional code we'll use to fire events based on scrollPercentage.\n\n      if (window.scrollPercent >= 25 && scrollTwentyFive) {\n          window['optimizely'] = window['optimizely'] || [];\n          window.optimizely.push([\"trackEvent\", \"scroll25\"]);\n          scrollTwentyFive = false;\n      }\n\n      if (window.scrollPercent >= 50 && scrollFifty) {\n          window['optimizely'] = window['optimizely'] || [];\n          window.optimizely.push([\"trackEvent\", \"scroll50\"]);\n          scrollFifty = false;\n      }\n\n      if (window.scrollPercent >= 75 && scrollSeventyFive) {\n          window['optimizely'] = window['optimizely'] || [];\n          window.optimizely.push([\"trackEvent\", \"scroll75\"]);\n          scrollSeventyFive = false;\n      }\n\n      if (window.scrollPercent >= 100 && scrollOneHundred) {\n          window['optimizely'] = window['optimizely'] || [];\n          window.optimizely.push([\"trackEvent\", \"scroll100\"]);\n          scrollOneHundred = false;\n      }\n\n  });","body":"<p>This function checks after each scroll event to see if a visitor has achieved certain scroll depth milestones. In the case of this example, custom events will be fired off when a visitor scrolls 25%, 50%, 75%, and 100% of the way down the page. Within the goals menu, you&#39;ll need to create custom event goals that correspond to the events below (e.g. &quot;scroll25&quot; for scrolling 25% of the way down the page).</p>\n<p>NOTE: This code uses jQuery&#39;s .scrollTop() method which is not included in Optimizely&#39;s trimmed version of jQuery. To use this code within your Optimizely experiment, you must either include the full version of jQuery in <a href=\"https://help.optimizely.com/hc/en-us/articles/202480860-Project-Settings-JavaScript-jQuery#jS\">Project Settings</a> or use a native version of jQuery on the page.</p>\n"},"0-intro":{"partial":"_inline.html","title":"Event tracking","anchor":"advanced-goal-tracking","body":"<p>These code samples can be used to track goals after specific user actions. The majority of these code samples should be used in <a href=\"https://help.optimizely.com/hc/en-us/articles/202480860-Project-Settings-Implementation-JavaScript-jQuery-and-Privacy#project_javascript\">Project JS</a>, <a href=\"https://help.optimizely.com/hc/en-us/articles/200039855-Experiment-JavaScript-and-CSS-Run-JavaScript-and-CSS-across-all-variations#experiment_javascript\">Experiment JS</a>, or <a href=\"https://help.optimizely.com/hc/en-us/articles/200039835-The-Code-Editor-Edit-Code-and-Variation-Code#edit_code\">Variation JS</a>.</p>\n"}},"index":{"template":"page-sidebar--wider","title":"Code Samples","includeSiblingData":true,"sections":["introduction","advanced-goal-tracking","advanced-targeting","advanced-use-cases","conditional","helpers","mutually-exclusive","single-page-applications","technology-integrations","variation-code"],"body":""},"stats":{"0-intro":{"partial":"_inline.html","title":"Experiment results (Stats Engine)","anchor":"stats","body":"<p>To illustrate how to <a href=\"/rest/reference/index.html#get-stats\">get experiment results</a> as provided by the\n<a href=\"https://help.optimizely.com/hc/en-us/articles/200039895\">Optimizely Stats Engine</a> via the REST API, we&#39;ve built a\nweb application that polls for statistical significance and, when it finds that an experiment has reached significance\nfor the first time, uses the <a href=\"https://www.twilio.com/api\">Twilio API</a> to make a phone call to a predefined number,\ninforming the recipient that the experiment has reached significance.</p>\n<p><a class=\"btn btn-primary\" target=\"_blank\" href=\"https://github.com/optimizely/optimizely-api-samples/tree/master/stats_api_phone_home\">Visit our README</a>\nto learn more and download the source code.</p>\n"}},"user-lists":{"0-intro":{"partial":"_inline.html","title":"User lists","anchor":"user-lists","body":"<p>You can use the <a href=\"/rest/reference/index.html#lists\">Optimizely REST API</a> to upload\n<a href=\"https://help.optimizely.com/hc/en-us/articles/206197347-User-List-Targeting-Create-audiences-based-on-lists-of-data\">user lists</a>\nto Optimizely, which you can use to target experiments and segment results.</p>\n<p>To illustrate this functionality, we&#39;ve built a sample script that queries for records in a Salesforce account and\nuploads a user list to Optimizely based on that data, allowing you to, for instance, target an\nexperiment to customers who are in a particular industry according to your Salesforce data.</p>\n<p><a class=\"btn btn-primary\" target=\"_blank\" href=\"https://github.com/optimizely/optimizely-api-samples/tree/master/salesforce_list_targeting\">Visit our README</a>\nto learn more and download the source code.</p>\n"}}},"personalization":{"index":{"template":"page-sidebar","title":"Optimizely Personalization Developer's Guide","body":"<h1 id=\"personalization-developer-s-guide\">Personalization Developer&#39;s Guide</h1>\n<p><a href=\"http://www.optimizely.com/personalization\">Optimizely Personalization</a> extends the Optimizely developer platform with new capabilities like behavioral targeting, audience discovery, and customer profiles. It also introduces a new code editor for custom JavaScript and CSS with important differences in how code is written and executed. The sections below describe these changes and explain how you can use a new set of JavaScript APIs for instrumenting behavior and developing experiences.</p>\n<div class=\"attention attention--warning push--bottom\"><b>Note:</b> The documentation below only applies to <a href=\"http://www.optimizely.com/personalization\" target=\"_blank\">Optimizely Personalization</a>. In the future, many of these APIs will also be available for use in Optimizely Testing.</div>\n\n<h2 id=\"implementation\">Implementation</h2>\n<p>The first step to getting started with Optimizely Personalization is tracking the key pages, events, and tags on your site. See <a href=\"https://help.optimizely.com/hc/en-us/articles/210306928\">The Six Core Concepts of Optimizely Personalization</a> for a high-level introduction to how these pieces work together. While much of this implementation is possible in the visual editor, we also provide a set of JavaScript APIs for defining pages, tracking events, and adding tags on each for full flexibility.</p>\n<p>These APIs are similar to the <a href=\"/javascript/reference/index.html#track-event\">tracking calls in Optimizely Testing</a>, but they use a new format for pushing data. To call these new APIs, you call <code>optimizely.push</code> with an object containing a <code>type</code> property and additional parameters. See the sections below for detailed examples.</p>\n<p>Some legacy API calls like <code>trackEvent</code> will automatically trigger a new API call in this format. You don&#39;t need to reimplement event tracking if you&#39;ve already set it up, but you can use the new API format to track additional tags for behavioral targeting (see below).</p>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Legacy format\nwindow.optimizely.push([&#39;trackEvent&#39;, &#39;watchedVideo&#39;]);\n\n// New format\nwindow.optimizely.push({\n  type: &quot;event&quot;,\n  eventName: &quot;watchedVideo&quot;,\n  tags: { // Additional metadata for targeting (optional)\n    title: &quot;Funny Cats&quot;,\n    duration: 30,\n  }\n});\n</code></pre>\n<h3 id=\"events\">Events</h3>\n<p>The <code>event</code> method captures visitor behavior and additional data. You can track clicks and pageviews in Optimizely\nwithout code, but this API call supports tracking other behaviors like watching a video. These events can be used for measuring the results of a campaign, or for defining an audience based on behavior. <a href=\"https://help.optimizely.com/Get_Started/Six_core_concepts_of_Optimizely_Personalization#events\">Learn more about events.</a></p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>type</code>: &quot;event&quot;</li>\n<li><code>eventName</code> (string): The &quot;API name&quot; for an event created in Optimizely, e.g. <code>add_to_cart</code></li>\n<li><code>tags</code> (object): A single-level JSON object with metadata about an event, e.g. the product being purchased.<ul>\n<li><code>revenue</code> (integer): A special tag that denotes a revenue-generating event. Revenue should be an integer equal to 100 times the value. For example, a purchase of $79.99 or €79.99 would be <code>7999</code>. Revenue should only be attached to the final purchase to prevent double-counting, and if you&#39;ve already tracked events using the legacy <code>trackEvent</code> method you should not re-instrument it again.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Basic tracking\nwindow.optimizely.push({\n  type: &quot;event&quot;,\n  eventName: &quot;watchedVideo&quot;\n});\n\n// Tracking revenue\nwindow.optimizely.push({\n  type: &quot;event&quot;,\n  eventName: &quot;purchase&quot;,\n  tags: {\n    revenue: 5000,\n  }\n});\n\n// Additional metadata\nwindow.optimizely.push({\n  type: &quot;event&quot;,\n  eventName: &quot;purchase&quot;,\n  tags: {\n    revenue: 10000,\n    quantity: 2,\n    category: &quot;Shoes&quot;,\n    subcategory: &quot;Sneakers&quot;,\n  }\n});\n</code></pre>\n<h3 id=\"pages\">Pages</h3>\n<p>The <code>page</code> method tracks the visitor&#39;s current context on a website. This context is used for both analytics (&quot;track the number of views to the checkout page&quot;) and targeting (&quot;run this experiment on the checkout page&quot;). <a href=\"https://help.optimizely.com/hc/en-us/articles/210306928#pages\">Learn more about pages.</a></p>\n<p>Specifically, pushing a page has two effects:</p>\n<ul>\n<li>Optimizely will track a pageview event for this page, incrementing the count of views to that page in analytics and recording the event in the user&#39;s behavioral profile</li>\n<li>Any campaigns targeted to this page will be activated</li>\n</ul>\n<p>Pages can be created visually in Optimizely with URL targeting, but this API call allows you to manually activate a page. This allows full flexibility for sites with dynamic content or challenging URL patterns.</p>\n<p>Page information is reset whenever the browser reloads.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>type</code>: &quot;page&quot;</li>\n<li><code>pageName</code> (string): The &quot;API name&quot; for a page created in Optimizely, e.g. <code>product_detail</code>. Choose the &quot;manual activation&quot; option in page creation to see or change this name.</li>\n<li><code>tags</code> (object): A single-level JSON object with metadata about the content on the page, e.g. the product being purchased.</li>\n</ul>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">window.optimizely = window.optimizely || [];\n\n// Basic page tracking\nwindow.optimizely.push({\n  type: &quot;page&quot;,\n  pageName: &quot;checkout_stage_1&quot;\n});\n\n// Page tracking with tags\nwindow.optimizely.push({\n  type: &quot;page&quot;,\n  pageName: &quot;product_detail&quot;,\n  tags: {\n    category: &quot;Kitchen&quot;,\n    subcategory: &quot;Blenders&quot;,\n    price: 64999,\n    sku: &quot;113757&quot;\n  }\n});\n</code></pre>\n<h3 id=\"tags\">Tags</h3>\n<p>Tags are contextual metadata about pages and events. They identify what a user is looking at, clicking on, or interacting with. For example, you can use tags to describe a product being purchased, an article being read, or a flight being booked. <a href=\"https://help.optimizely.com/hc/en-us/articles/210306928#tags\">Learn more about tags.</a></p>\n<p>There are three ways to capture this context:</p>\n<ul>\n<li>Directly on an <a href=\"#events\">event</a>, using the <code>tags</code> property.</li>\n<li>Directly on a <a href=\"#pages\">page</a>, using the <code>tags</code> property. These tags will be sent along with any event that happens on that page.</li>\n<li>Finally, you can use this <code>tags</code> method directly to add context without activating a page and tracking a pageview. This is equivalent to the previous option, but it can be used when pages are already being activated using URL targeting.</li>\n</ul>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>type</code>: &quot;tags&quot;</li>\n<li><code>tags</code> (object): A single-level JSON object with metadata about an event, e.g. the product being purchased.</li>\n</ul>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Tracking the current product\nwindow.optimizely.push({\n  type: &quot;tags&quot;,\n  tags: {\n    category: &quot;Kitchen&quot;,\n    subcategory: &quot;Blenders&quot;,\n    price: 64999,\n    sku: &quot;113757&quot;\n  }\n});\n</code></pre>\n<h3 id=\"users\">Users</h3>\n<p>The <code>user</code> method captures attributes of a user and stores them in a profile that persists across sessions and syncs across devices. These attributes are persisted in the browser&#39;s local storage and can be used for targeting and analysis.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>type</code>: &quot;user&quot;</li>\n<li><code>attributes</code> (object): Metadata about a user, e.g. their home state. Attributes can be used for discovering and targeting audiences.</li>\n</ul>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">window.optimizely = window.optimizely || [];\n\n// Attach extra information to an anonymous visitor\nwindow.optimizely.push({\n  type: &quot;user&quot;,\n  attributes: {\n    frequentFlyerStatus: &quot;Gold&quot;,\n    frequentFlyerMiles: 25600\n  }\n});\n\n// To remove an attribute value, set it to null\nwindow.optimizely.push({\n  type: &quot;user&quot;,\n  attributes: {\n    frequentFlyerStatus: null\n  }\n});\n</code></pre>\n<h2 id=\"developing-experiences\">Developing experiences</h2>\n<p>Optimizely Personalization allows you to build experiences using a visual editor or make more sophisticated changes by writing your own custom code. To give you full control over the execution of that code, we&#39;ve changed the timing of when code is applied and added new utility functions for adjusting that timing.</p>\n<h3 id=\"timing\">Timing</h3>\n<p>The execution model for JavaScript has been revamped in Optimizely Personalization, so developers familiar with our Testing product should be careful copying over existing code. There are two key differences:</p>\n<p><em>Custom code and visual changes are separated</em>. When you make a change in the visual editor, you won&#39;t see the corresponding jQuery in the code box. Instead, the change is stored in a JSON data structure and applied at runtime. Each visual change is applied when the selector it applies to is ready.</p>\n<p><em>Custom code runs immediately</em>. Because visual and code changes are mixed together, Optimizely Testing polls for each line separately and tries to run it when elements were ready. In Personalization, we&#39;ve removed this behavior so that your code runs exactly as written, <em>often before the DOM is ready</em>.</p>\n<p>Please note this means that some code that works in Optimizely Testing may <em>not</em> work in Personalization. For example, the following code would have no effect if the Optimizely snippet is in the head tag because the body element doesn&#39;t exist at the time when the code runs:</p>\n<pre><code class=\"lang-js\">$(&quot;body&quot;).css(&quot;background-color&quot;, &quot;red&quot;);\n</code></pre>\n<p>To delay running the code until the whole page is loaded, you can use jQuery&#39;s <code>document.ready</code> function or one of the <a href=\"#utilities\">utility functions</a> below:</p>\n<pre><code class=\"lang-js\">// Change the background when the DOM is ready (may cause flashing)\n$(document).ready(function() {\n  $(&quot;body&quot;).css(&quot;background-color&quot;, &quot;red&quot;);\n});\n\n// Change the background as soon as the body element loads (no flash)\nvar utils = window.optimizely.get(&#39;utils&#39;);\nutils.waitForElement(&#39;body&#39;).then(function(){\n   $(&quot;body&quot;).css(&quot;background-color&quot;, &quot;red&quot;);\n});\n</code></pre>\n<p>You could also use the CSS option under Custom Code to make the same change without worrying about timing. CSS changes are applied by appending a <code>style</code> tag to the end of the <code>body</code> tag.</p>\n<pre><code class=\"lang-css\">body {\n  background-color: red;\n}\n</code></pre>\n<p>Finally, there are several different places where you can write custom code. Changes are applied synchronously in the following order:</p>\n<ol>\n<li>Project JS <a href=\"https://help.optimizely.com/hc/en-us/articles/202480860-Project-Settings-JavaScript-jQuery#project_javascript\">(learn more)</a></li>\n<li>Campaign JS</li>\n<li>Campaign CSS</li>\n<li>Experience JS</li>\n<li>Experience CSS</li>\n<li>Visual editor changes</li>\n</ol>\n<p><em>Note:</em> Personalization campaigns and Testing experiments can execute in parallel. Be careful assuming any dependencies between them or optimizing the same element in multiple campaigns/experiments.</p>\n<h3 id=\"utilities\">Utilities</h3>\n<p>In addition to updating the <code>push</code> API, Optimizely Personalization also exposes a new function, <code>window.optimizely.get()</code>. This function allows you to access several useful properties and utilities within the context of custom code. Please note that unlike <code>push</code>, <code>get</code> may only be used after the Optimizely snippet has loaded. While this will always be the case within custom code, it should be considered when using <code>get</code> within external scripts.</p>\n<p>For example, if you have <a href=\"https://help.optimizely.com/hc/en-us/articles/202480860-Project-Settings-JavaScript-jQuery#jS\">jQuery bundled</a> in the Optimizely snippet, you can access it directly by getting <code>jquery</code>:</p>\n<pre><code class=\"lang-js\">var $ = window.optimizely.get(&#39;jquery&#39;);\n</code></pre>\n<p>If no jQuery is bundled into the client, the default return value is <code>window.jQuery</code>.</p>\n<pre><code class=\"lang-js\">var utils = window.optimizely.get(&#39;utils&#39;);\n</code></pre>\n<h4 id=\"waitForElement\" class=\"subLink\">waitForElement</h4>\n\n<p>This utility returns a <code>Promise</code> that will be resolved as soon as an element appears in the DOM matching the supplied selector.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>selector</code> (string): CSS selector, ex. &quot;.product-item&quot;</li>\n</ul>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<p>An <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">ES6-style Promise</a> that will be resolved with the matching element.</p>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Retrieve the utils library\nvar utils = window.optimizely.get(&#39;utils&#39;);\n\n// Wait for the footer element to appear in the DOM, then change the color\nutils.waitForElement(&#39;.footer&#39;).then(function(footerElement){\n  footerElement.style.color = &#39;black&#39;;\n});\n</code></pre>\n<h4 id=\"observeSelector\" class=\"subLink\">observeSelector</h4>\n\n<p>This utility provides a subset of the functionality of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\">MutationObserver</a>, allowing you to run a function whenever a DOM selector changes. Given a CSS selector and a callback, this function will invoke the supplied callback whenever a new element appears in the DOM matching the supplied selector.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>selector</code> (string): CSS selector, ex &quot;.product-item&quot;</li>\n<li><code>callback</code> (function): A function that accepts an <code>HTMLDomElement</code> as its first parameter</li>\n<li><code>options</code> (object):<ul>\n<li><code>timeout</code> (string|null): Number of milliseconds to try before canceling. If null, continues indefinitely</li>\n<li><code>once</code> (boolean): If true, the callback will be invoked for the first match only</li>\n<li><code>onTimeout</code> (function): Function to execute on timeout</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<p>A function that can be executed to cancel observation</p>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Retrieve the utils library\nvar utils = window.optimizely.get(&#39;utils&#39;);\n\n// Modify elements displaying product prices whenever they appear on the page\nvar cancelProductPriceObserver = utils.observeSelector(&#39;.productPrice&#39;, function(priceElement) {\n  priceElement.style.fontSize = &#39;30px&#39;;\n  priceElement.style.color = &#39;red&#39;;\n});\n</code></pre>\n<h4 id=\"poll\" class=\"subLink\">poll</h4>\n\n<p>This is a convenience wrapper for <code>setInterval</code>.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>callback</code> (function): Function to be executed on the interval specified by <code>delay</code></li>\n<li><code>delay</code> (number): Milliseconds to wait in between each callback invocation</li>\n</ul>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<p>A function that can be executed to cancel polling.</p>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Retrieve the utils library\nvar utils = window.optimizely.get(&#39;utils&#39;);\n\n// Wait until the element we want to modify is in the DOM\nutils.waitForElement(&#39;#pre-header-shipping-cont&#39;).then(function(headerElement) {\n\n  // 10 minutes in ms\n  var timeRemaining = 60000;\n\n  // Create a reservation countdown timer that expires after 10 minutes\n  // We want to instill some urgency in our customers so that they buy buy buy\n  var cancelPolling = utils.poll(function() {\n    timeRemaining = timeRemaining - 1000;\n\n    // Update message based on how much time is remaining\n    if (timeRemaining &gt; 0) {\n      var date = new Date(timeRemaining);\n      headerElement.innerHTML = &#39;You have &#39; + date.getMinutes() + &#39;:&#39; + date.getSeconds() + &#39; before your reservation expires.&#39;;\n    } else {\n      headerElement.innerHTML = &#39;Your reservation has expired&#39;;\n      cancelPolling();\n    }\n  }, 1000);\n});\n</code></pre>\n<h4 id=\"waitUntil\" class=\"subLink\">waitUntil</h4>\n\n<p>This utility accepts a function that returns a boolean value and returns a <code>Promise</code> that resolves when the supplied function returns <code>true</code>.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>conditionFunction</code> (function): A function that will be executed periodically and returns a boolean value</li>\n</ul>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<p>An <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">ES6-style Promise</a></p>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Retrieve the utils library\nvar utils = window.optimizely.get(&#39;utils&#39;);\n\n// We have infinite scroll enabled on the site. Wait until more than 200 products have been shown\n// to prompt the user to try out our filter by color feature\nutils.waitUntil(function() {\n  var productsShownOnThePage = document.querySelectorAll(&#39;.product-listing&#39;);\n  return productsShownOnThePage &amp;&amp; productsShownOnThePage.length &gt; 200;\n}).then(function() {\n  alert(&#39;Not finding what you\\&#39;re looking for? Try narrowing down your search using our new filter by color feature&#39;);\n});\n</code></pre>\n<h3 id=\"listeners\">Listeners</h3>\n<p>As Optimizely runs on your site, you can hook into the snippet&#39;s execution and run your own code at different points by using the <code>addListener</code> API. Looking for other listeners? Contact us at <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>type</code>: &quot;addListener&quot;</li>\n<li><code>filter</code> (object): The events to listen for<ul>\n<li><code>type</code> (string)</li>\n<li><code>name</code> (string)</li>\n</ul>\n</li>\n<li><code>handler</code> (function): A callback to run when an event fires. The function takes a single <code>data</code> object that varies based on the event.</li>\n</ul>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">\nwindow.optimizely = window.optimizely || [];\n\nwindow.optimizely.push({\n  type: &#39;addListener&#39;,\n  filter: {\n    type: &#39;lifecycle&#39;,\n    name: &#39;viewActivated&#39;,\n  },\n  handler: function(data) {\n    console.log(&#39;Page&#39;, data.name, &#39;was activated.&#39;);\n  },\n});\n</code></pre>\n<h4 id=\"layerDecided\" class=\"subLink\">Campaign Decision</h4>\n\n<p>This listener fires whenever a decision is made for a campaign. This means that Optimizely has chosen an audience/experience to display.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>type</code>: &quot;lifecycle&quot;</li>\n<li><code>name</code>: &quot;layerDecided&quot;</li>\n</ul>\n<h5 id=\"-callback-parameters-\"><em>Callback Parameters</em></h5>\n<ul>\n<li><code>data</code>: (object)<ul>\n<li><code>layer</code>: (object) Details about the campaign</li>\n<li><code>decisionTicket</code>: (object) Metadata used to make the decision</li>\n<li><code>decision</code>: (object) The audience and variation ID that were decided</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"viewActivated\" class=\"subLink\">Page Activation</h4>\n\n<p>This listener fires whenever a page is activated, either due to URL targeting or manual activation.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>type</code>: &quot;lifecycle&quot;</li>\n<li><code>name</code>: &quot;viewActivated&quot;</li>\n</ul>\n<h5 id=\"-callback-parameters-\"><em>Callback Parameters</em></h5>\n<ul>\n<li><code>data</code>: (object)<ul>\n<li><code>id</code> (integer)</li>\n<li><code>name</code> (string): The user-friendly name, like &quot;Homepage&quot;</li>\n<li><code>apiName</code> (string): The API name for the page, used for manual activation</li>\n<li><code>category</code> (string): The category, like &quot;homepage&quot;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"behavior\">Behavior</h3>\n<h4 id=\"query\" class=\"subLink\">query</h4>\n\n<p>This API function runs a behavioral query over the <a href=\"https://help.optimizely.com/Get_Started/Six_core_concepts_of_Optimizely_Personalization#events\">events</a> that have taken place on this device.</p>\n<p>Currently, the API only considers events that took place before the most recent activation of the Optimizely snippet.  You must reload the page if you want to query over events that took place on the current page load.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>query</code> (object): A <a href=\"/behavior/#query-objects\">behavioral query object</a></li>\n</ul>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<p>Depending on which clauses are included in the specified query object, this API will return one of the following types of values:</p>\n<ul>\n<li>A simple value like a number, a boolean, a string, or any other value that may have been specified in a tag.  May be <code>undefined</code> if the specified tag was not set on the filtered event.</li>\n<li>A list containing multiple simple values.</li>\n<li>An <a href=\"/behavior/#event-objects\">event object</a>.</li>\n<li>A list containing multiple events.</li>\n</ul>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">var behavior = window.optimizely.get(&#39;behavior&#39;);\n\n// Return a list of page names, sorted by viewing frequency.\nbehavior.query({\n  &quot;version&quot;: &quot;0.2&quot;,\n  &quot;filter&quot;: {\n    &quot;field&quot;: [&quot;type&quot;],\n    &quot;value&quot;: &quot;pageview&quot;\n  },\n  &quot;pick&quot;: {\n    &quot;field&quot;: [&quot;name&quot;]\n  },\n  &quot;sort&quot;: [\n    {\n      &quot;field&quot;: [&quot;frequency&quot;],\n      &quot;direction&quot;: &quot;descending&quot;\n    }\n  ]\n});\n</code></pre>\n<h3 id=\"customer-profiles\">Customer Profiles</h3>\n<h4 id=\"getAttributeValue\" class=\"subLink\">getAttributeValue</h4>\n\n<p>This API function returns the current customer&#39;s value for a <a href=\"https://help.optimizely.com/hc/en-us/articles/216497887\">content-enabled</a> profile attribute.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>datasourceId</code> (number): Required</li>\n<li><code>attributeId</code> (number): Required if <code>attributeName</code> is not provided</li>\n<li><code>attributeName</code> (string): Required if <code>attributeId</code> is not provided.  Does not work if descriptive names are <a href=\"https://help.optimizely.com/hc/en-us/articles/208997878-Project-Settings-Privacy#masking_descriptive_names\">masked</a> in the Optimizely client</li>\n</ul>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<p>The uploaded attribute value, or <code>undefined</code> if any of the following are true:</p>\n<ul>\n<li>A customer profile still needs to be <a href=\"https://help.optimizely.com/hc/en-us/articles/216307487#upload\">uploaded</a> for the current user.</li>\n<li>A profile has been uploaded, but it does not include the desired attribute.</li>\n<li>The Optimizely client is waiting for fresh data from the DCP service.</li>\n</ul>\n<h5 id=\"-throws-\"><em>Throws</em></h5>\n<p>If any of the following are true:</p>\n<ul>\n<li>The specified attribute does not exist</li>\n<li>The attribute is not content-enabled</li>\n<li>The attribute is specified by name even though names are <a href=\"https://help.optimizely.com/hc/en-us/articles/208997878-Project-Settings-Privacy#masking_descriptive_names\">masked</a> in the Optimizely client</li>\n</ul>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Retrieve the dcp library\nvar dcp = window.optimizely.get(&#39;dcp&#39;);\n\n// Specify a content-enabled attribute by ID.\ndcp.getAttributeValue({datasourceId: 123, attributeId: 456});\n\n// Specify a content-enabled attribute by name.\ndcp.getAttributeValue({datasourceId: 123, attributeName: &#39;Preferred Locale&#39;});\n</code></pre>\n<h4 id=\"waitForAttributeValue\" class=\"subLink\">waitForAttributeValue</h4>\n\n<p>This API function returns a <code>Promise</code> that will be resolved as soon as Optimizely receives the current customer&#39;s value for a <a href=\"https://help.optimizely.com/hc/en-us/articles/216497887\">content-enabled</a> profile attribute.</p>\n<h5 id=\"-parameters-\"><em>Parameters</em></h5>\n<ul>\n<li><code>datasourceId</code> (number): Required</li>\n<li><code>attributeId</code> (number): Required if <code>attributeName</code> is not provided</li>\n<li><code>attributeName</code> (string): Required if <code>attributeId</code> is not provided.  Does not work if descriptive names are <a href=\"https://help.optimizely.com/hc/en-us/articles/208997878-Project-Settings-Privacy#masking_descriptive_names\">masked</a> in the Optimizely client</li>\n</ul>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<p>An <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">ES6-style Promise</a> that\nwill be resolved with the uploaded attribute value, or with <code>undefined</code> if any of the following are true:</p>\n<ul>\n<li>A customer profile still needs to be <a href=\"https://help.optimizely.com/hc/en-us/articles/216307487#upload\">uploaded</a> for the current user.</li>\n<li>A profile has been uploaded, but it does not include the desired attribute.</li>\n</ul>\n<p>If your campaign does not <a href=\"https://help.optimizely.com/hc/en-us/articles/216497887#campaign\">target a DCP Audience</a>,\nthen it is possible that profile data will not be fetched and the Promise will not be resolved.</p>\n<h5 id=\"-throws-\"><em>Throws</em></h5>\n<p>If any of the following are true:</p>\n<ul>\n<li>The specified attribute does not exist</li>\n<li>The attribute is not content-enabled</li>\n<li>The attribute is specified by name even though names are <a href=\"https://help.optimizely.com/hc/en-us/articles/208997878-Project-Settings-Privacy#masking_descriptive_names\">masked</a> in the Optimizely client</li>\n</ul>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Retrieve the dcp library\nvar dcp = window.optimizely.get(&#39;dcp&#39;);\n\n// Specify a content-enabled attribute by ID.\ndcp.waitForAttributeValue({datasourceId: 123, attributeId: 456}).then(\n  function (attributeValue) {\n  }\n);\n\n// Specify a content-enabled attribute by name.\ndcp.waitForAttributeValue({datasourceId: 123, attributeName: &#39;Preferred Locale&#39;}).then(\n  function (attributeValue) {\n  }\n);\n</code></pre>\n<h2 id=\"reading-data-and-state\">Reading data and state</h2>\n<p><code>optimizely.get</code> can also be used to get read-only information about the current visitor, sessions, and running campaigns.</p>\n<h3 id=\"data\">Data</h3>\n<p>Returns an object exposing static data fields.</p>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Retrieve the data object\nvar staticData = window.optimizely.get(&#39;data&#39;);\n</code></pre>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<ul>\n<li><code>Object</code>:<ul>\n<li><code>accountId</code> (string)</li>\n<li><code>projectId</code> (string)</li>\n<li><code>revision</code> (string)</li>\n<li><code>dcpServiceId</code> (string|null)</li>\n<li><code>audiences</code> (object) Object mapping Audience ID to:<ul>\n<li><code>id</code> (string): The audience id</li>\n<li><code>name</code> (string)</li>\n<li><code>conditions</code> (array): Conditions the visitor must have to be in the audience</li>\n</ul>\n</li>\n<li><code>campaigns</code> (object) Object mapping Campaign ID to:<ul>\n<li><code>id</code> (string): The campaign id</li>\n<li><code>name</code> (string)</li>\n<li><code>policy</code> (string): ordered (personalization) or random (A/B test)</li>\n<li><code>holdback</code> (BasisPoints): 0 - 100</li>\n<li><code>weightDistributions</code> (object|null): Traffic allocation among the experiments in the campaign</li>\n<li><code>activation</code> (object|null)</li>\n<li><code>changes</code> (array|null): An array of changes</li>\n<li><code>commitId</code> (string|null)</li>\n<li><code>experiments</code> (array): An array of the experiments in the campaign</li>\n<li><code>integrationSettings</code> (object)</li>\n<li><code>viewIds</code> (array): An array of view ids (strings) associated with the campaign</li>\n</ul>\n</li>\n<li><code>events</code> (object) Object mapping Event ID to:<ul>\n<li><code>id</code> (string): The event id</li>\n<li><code>name</code> (string|null): The event name</li>\n<li><code>apiName</code> (string)</li>\n<li><code>category</code> (string): added to cart, saved, shared, searched, purchased, converted, signed up, subscribed, other</li>\n<li><code>eventType</code> (string): click, custom, engagement, or pageview</li>\n<li><code>eventFilter</code> (object|null): Filter type of string or target selector</li>\n<li><code>viewId</code> (string|null)</li>\n</ul>\n</li>\n<li><code>pages</code> (object) Object mapping Page ID to:<ul>\n<li><code>id</code> (string): The page id</li>\n<li><code>name</code> (string|null): The page name</li>\n<li><code>apiName</code> (string)</li>\n<li><code>category</code> (string): article, cart, category, checkout, home, landing page, pricing, product detail, search results, other</li>\n<li><code>staticConditions</code> (array)</li>\n<li><code>tags</code> (array)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"session\">Session</h3>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Retrieve the session object\nvar sessionData = window.optimizely.get(&#39;session&#39;);\n</code></pre>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<ul>\n<li><code>Object</code>:<ul>\n<li><code>lastSessionTimestamp</code> (number|0)</li>\n<li><code>sessionId</code> (string|null)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"visitor-id\">Visitor ID</h3>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Retrieve the visitor ID data object\nvar visitorIdData = window.optimizely.get(&#39;visitor_id&#39;);\n</code></pre>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<ul>\n<li><code>Object</code>:<ul>\n<li><code>randomId</code> (string|null): If no UUID is available, Optimizely will generate a random visitor id</li>\n<li><code>UUID</code> (string|null): Your unique identifier for a user (universally unique identifier)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"visitor\">Visitor</h3>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Retrieve the visitor profile\nvar visitorProfile = window.optimizely.get(&#39;visitor&#39;);\n$(&quot;#username&quot;).text(visitorProfile.custom.userName);\n</code></pre>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<ul>\n<li><code>Object</code>:<ul>\n<li><code>IP</code> (string): The visitor&#39;s IP address</li>\n<li><code>browserId</code> (string)</li>\n<li><code>browserVersion</code> (string)</li>\n<li><code>campaign</code> (string|null): The campaign the visitor is in</li>\n<li><code>cookies</code> (object): The visitor&#39;s optimizely cookies</li>\n<li><code>currentTimestamp</code> (number)</li>\n<li><code>dcpData</code> (object): Indicates personalized content delivered via named or unnamed DCP attributes</li>\n<li><code>defaultBehavior</code> (object): Includes default values for a variety of properties, such as average events per session, most viewed page, average revenue per order last 60 days, etc.</li>\n<li><code>device</code> (string): The visitor&#39;s device (e.g., desktop, laptop, etc.)</li>\n<li><code>events</code> (array)</li>\n<li><code>first_session</code> (boolean): True if it is the visitor&#39;s first session</li>\n<li><code>language</code> (string)</li>\n<li><code>lists</code> (object)</li>\n<li><code>location</code> (object): Includes fields for city, continent, country, and region</li>\n<li><code>queryParams</code> (array)</li>\n<li><code>referrer</code> (string|null)</li>\n<li><code>source_type</code> (string|null)</li>\n<li><code>visitorId</code> (string|null): The visitor&#39;s randomly generated Optimizely ID</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"state\">State</h3>\n<p>Returns a module exposing several functions to access information about the current visitor&#39;s state</p>\n<h5 id=\"-usage-\"><em>Usage</em></h5>\n<pre><code class=\"lang-js\">// Access the state module\nvar stateModule = window.optimizely.get(&#39;state&#39;);\n\n// Use the state module to access the campaign states\nvar campaignStates = stateModule.getCampaignStates();\n</code></pre>\n<h4 id=\"getCampaignStates\" class=\"subLink\">getCampaignStates()</h4>\n\n<p>Returns a map of campaign states, indexed by campaign id.</p>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<ul>\n<li><code>Object</code> Object mapping Campaign ID to:<ul>\n<li><code>id</code> (string)</li>\n<li><code>campaignName</code> (string)</li>\n<li><code>audiences</code> (array)</li>\n<li><code>experiment</code> (object|null)</li>\n<li><code>variation</code> (object|null)</li>\n<li><code>reason</code> (string|null): Reason why experiment or variation id is null</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"getPageStates\" class=\"subLink\">getPageStates()</h4>\n\n<p>Returns a map of page states, indexed by page id.</p>\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<ul>\n<li><code>Object</code> Object mapping Page ID to:<ul>\n<li><code>id</code> (string)</li>\n<li><code>apiName</code> (string)</li>\n<li><code>category</code> (string): article, cart, category, checkout, home, landing page, pricing, product detail, search results, other</li>\n<li><code>isActive</code> (boolean)</li>\n<li><code>metadata</code> (object)</li>\n<li><code>name</code> (string)</li>\n<li><code>staticConditions</code> (array)</li>\n<li><code>tags</code> (array)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"getActivationId\" class=\"subLink\">getActivationId()</h4>\n\n<h5 id=\"-returns-\"><em>Returns</em></h5>\n<ul>\n<li>string: current activation ID</li>\n</ul>\n<h2 id=\"debugging\">Debugging</h2>\n<h3 id=\"logging\">Logging</h3>\n<p>You can tell Optimizely to output its log to the browser&#39;s console log by using the query parameter <code>optimizely_log={level}</code>. For example, you can follow the high-level execution by adding <code>?optimizely_log=info</code>. The following levels are supported, and the default is off:</p>\n<ul>\n<li><strong>OFF</strong>: No logging</li>\n<li><strong>ERROR</strong>: Errors only</li>\n<li><strong>WARN</strong>: Warnings and errors</li>\n<li><strong>INFO</strong>: High-level information on campaigns, audiences, and event tracking</li>\n<li><strong>DEBUG</strong>: Detailed logging for debugging purposes</li>\n<li><strong>ALL</strong>: All logs</li>\n</ul>\n<h3 id=\"campaign-activation\">Campaign Activation</h3>\n<p>You can use the <a href=\"#logging\">logging output</a> to see which campaigns are activating for a given a visitor, and which experience they will see.</p>\n<p>First, enable logging by adding <code>?optimizely_log=info</code> to a URL on your site. Then, open your browser&#39;s console to see the logging output. To make the log more readable, it may help to filter within the console log to &quot;Optly /&quot; so that other messages are hidden.</p>\n<p><img src=\"/assets/img/js/init.png\" alt=\"\"></p>\n<p>The first few lines cover the initialization of the Optimizely client, including data like the active campaigns, events, and pages. You can use this section to confirm that the right data is being compiled into the snippet. Some of the terminology is slightly different from the user interface:</p>\n<ul>\n<li>Experiences within a campaign are listed as <code>experiments</code> within a layer, each of which has a single <code>variation</code> with a set of <code>actions</code>.</li>\n<li><code>actions</code> are the set of changes that apply for a specific experience on a particular page</li>\n</ul>\n<p>To debug a specific campaign, you can search within the console (Cmd-F) for that campaign&#39;s ID. You can find the ID in the URL of the Optimizely interface. A campaign with the URL <code>https://app.optimizely.com/p13n/3563611614/layers/3558430129</code> has the ID <code>3558430129</code>. Searching for this ID will show all log events related to that campaign. For example:</p>\n<p><img src=\"/assets/img/js/decision-no.png\" alt=\"\"></p>\n<p>In this example, the output is telling us that the visitor did not match any of the audiences in the campaign. Therefore, they weren&#39;t eligible for any experiences and no changes were applied.</p>\n<p>Now let&#39;s add the visitor to a campaign audience to apply a change:</p>\n<p><img src=\"/assets/img/js/full-screen.png\" alt=\"\"></p>\n<p>In this example, the output tells us that the visitor was in the Campaign &quot;Homepage Offers&quot;. Let&#39;s take a closer look at some of the entries in the log:</p>\n<p><img src=\"/assets/img/js/recording-decision.png\" alt=\"\"></p>\n<p>If we click on the Objects in the log to inspect them, we can see some of the details about the &quot;decision ticket&quot; (the information Optimizely uses in order to make a decision of which experience to show, if any) on the left of the arrow &quot;-&gt;&quot; and the &quot;decision&quot; (the selected experiment/variation, if any, and whether the visitor is in the layer holdback) on the right hand side. In particular note the &quot;audienceIds&quot; property of the decision ticket which shows the IDs of the audiences the visitor was in at the time of the decision (in this case &quot;4055203664&quot;).</p>\n<p><img src=\"/assets/img/js/tracking-decision.png\" alt=\"\"></p>\n<p>Next we can see that Optimizely created a log event to track the decision. By inspecting the log event we can see that it has properties &quot;decisionTicket&quot; and &quot;decision&quot; corresponding to the objects we inspected above, as well as information about the client version, a guid and timestamp to track the event in Optimizely&#39;s logs, and others (event properties subject to change).</p>\n<p><img src=\"/assets/img/js/action-executing.png\" alt=\"\"></p>\n<p>In addition to recording and tracking the decision, Optimizely applies the actions (changes) corresponding to the current view. By clicking on the Object to inspect, we can see that the action is associated with the current campaign (layerId) and selected experiment/variation (from the decision), and consists of a &quot;changeSet&quot; (list of changes), each of which describes a change to apply. The change detail above shows that the first change in the set is an &quot;attribute&quot; change which changes the &quot;html&quot; (innerHTML) of the &quot;.hero__title&quot; element to the string &quot;Stylish new looks for p13n-ers&quot;. If there is an error applying this change, it will be logged here as well.</p>\n<h3 id=\"events-and-tags\">Events and Tags</h3>\n<p>To debug event tracking and visual tags, you can use the network tab to observe requests to Optimizely&#39;s log endpoint. For example, in Google Chrome, you can open the Developer Tools and then reload the page. When you click on the Network tab, you&#39;ll see all the network requests on that page. You can filter these requests to show only those made by Optimizely for tracking purposes by filtering to <code>p13nlog</code>. When you trigger an event, e.g. by clicking a button, you&#39;ll see it fire here. For example:</p>\n<p><img src=\"/assets/img/js/event.png\" alt=\"\"></p>\n<p>In this example, we&#39;ve triggered the Share button on the Product Detail Page. The <code>eventName</code> shows the API name of the event, and the <code>type</code> corresponds to the category in the Optimizely interface. For pages, <code>eventType = &#39;view-activated&#39;</code> and the <code>eventName</code> will be the ID of the page.</p>\n<p>The <code>eventFeatures</code> show tags that were captured on the page. In this case, we can see tags picking up the product&#39;s category, subcategory, title, and price. <code>eventMetrics</code> show tags that are used as metrics on the results page, like revenue for a custom event. Finally, the <code>layerStates</code> show which campaigns the event will be attributed to.</p>\n"}},"getting-started":{"index":{"template":"page-sidebar","title":"Optimizely JS API Guide","body":"<h1 id=\"getting-started-with-optimizely-s-js-api\">Getting started with Optimizely&#39;s JS API</h1>\n<p>Follow the steps below to get started using Optimizely&#39;s JavaScript API. If you&#39;re already an Optimizely customer and have active experiments running on your web site, jump straight to <a href=\"#read\">4. Read from the Optimizely Data Object</a>.</p>\n<h3 id=\"1-create-an-optimizely-account\">1. Create an Optimizely account</h3>\n<p>If you don&#39;t have an Optimizely account already, just sign up for a <a href=\"https://www.optimizely.com/?modal=devsignup\">free developer account</a>. This account will give you access to core Optimizely features and API access, but with limited traffic allocation. No credit card is required, but you can always upgrade your account to a paid plan later.</p>\n<h3 id=\"2-implement-the-optimizely-snippet\">2. Implement the Optimizely Snippet</h3>\n<p>If you are not already running Optimizely, you&#39;ll need to add the Optimizely Snippet to the head section of your web page. See <a href=\"https://help.optimizely.com/hc/en-us/articles/200040095\">Implementing the Optimizely Snippet</a> for detailed instructions on how to add the Optimizely Snippet for your project.</p>\n<h3 id=\"3-start-an-experiment\">3. Start an experiment</h3>\n<p>To see the Optimizely JavaScript API in action, you should have at least one experiment running on your web page. The article <a href=\"https://help.optimizely.com/hc/en-us/articles/200159574\">Get Started on Web Optimization</a> contains detailed instructions on how to setup and run an experiment.</p>\n<p><a name=\"read\"></a></p>\n<h3 id=\"4-read-from-the-data-object\">4. Read from the Data Object</h3>\n<p>The <a href=\"/javascript/reference#the-data-object\">Optimizely Data Object</a> is a read-only data object that contains information about the current visitor. You can use the Data Object to retrieve the state of and details about Optimizely experiments, variations, and goals for that visitor. For example, you can read which experiments and variations a visitor has seen and pass this information to your internal database.</p>\n<p>To access the Data Object, open your browser console and type <code>window.optimizely.data</code>:</p>\n<p><img src=\"../../../assets/img/data-object.gif\" border=\"1\"></p>\n<p>For example, you can see what experiments are active for the current visitor in the object below:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.state.activeExperiments\n</code></pre>\n<h3 id=\"5-make-an-api-call\">5. Make an API call</h3>\n<p>In addition to reading from the Data Object, you can also <a href=\"/javascript/reference#api-function-calls\">make API calls</a> to write data and modify the behavior of Optimizely. The API function calls expose many of Optimizely&#39;s decisions and actions so you can take control.</p>\n<p>One example is starting experiments manually rather than upon page load, which is useful for testing dynamic web pages. Your application can tell Optimizely when to activate these &quot;manual activation mode&quot; experiments with the <a href=\"/javascript/reference#activate\">activate</a> API function. Another example is using the <a href=\"/javascript/reference#bucket-visitor\">bucketVisitor</a> API function to assign visitors to a specific variation if you wanted to incorporate inputs that Optimizely&#39;s traffic allocation algorithm does not. To see a full list of API calls you can make with the JavaScript API, see <a href=\"/javascript/reference#api-function-calls\">API Function Calls</a>.</p>\n<p>If you have any questions about using the JavaScript API, please reach out to <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>.</p>\n"}},"introduction":{"index":{"template":"page-sidebar","title":"Optimizely JS API","body":"<h1 id=\"optimizely-on-the-web\">Optimizely on the Web</h1>\n<p><em>The Optimizely JavaScript API provides a way for developers to modify the default behavior of Optimizely on web pages.</em></p>\n<p>The <a href=\"https://help.optimizely.com/hc/en-us/articles/200040095\">Optimizely Snippet</a> is a JavaScript file that contains all the logic needed to run Optimizely experiments on a web page. Using the JavaScript API, you can modify the default behavior of the Optimizely Snippet to target activation based on specific page content or events, query the state of activation, bucketing, or conversion for use in custom analytics packages, and force visitors into specific variations, among other capabilities.</p>\n<p>Refer to the <a href=\"/javascript/reference\">API reference</a> to see the full capabilities of the JavaScript API. If you&#39;re using the JavaScript API for the first time, go to <a href=\"/javascript/guide\">Getting started</a> which walks through how to access Optimizely data in a web browser and make API function calls.</p>\n<p>If you have any questions about using the JavaScript API, please reach out to <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>.</p>\n<p><a class=\"button button--highlight anchor--middle display--block width--200 text--center\" href=\"../guide/index.html\">\nGet Started\n</a></p>\n"}},"reference":{"index":{"template":"page-sidebar","title":"Optimizely JS API Reference","body":"<h1 id=\"optimizely-js-api-reference\">Optimizely JS API Reference</h1>\n<p>Below is a full reference for the JavaScript API, including the <a href=\"#the-data-object\">Data Object</a> and <a href=\"#api-function-calls\">API Function Calls</a>.</p>\n<h2 id=\"the-data-object\">The Data Object</h2>\n<p>The <code>window[&#39;optimizely&#39;].data</code> object contains read-only information about the current user and the running experiments.</p>\n<p><a name=\"custom-tags-data\"></a></p>\n<h3 id=\"custom-tags\">Custom Tags</h3>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.customTags\n</code></pre>\n<p>This is an object that contains all the key-value pairs you&#39;ve sent to Optimizely using the <a href=\"#custom-tag\">custom tag function</a>.</p>\n<h3 id=\"experiments\">Experiments</h3>\n<h4 id=\"the-experiments-object\">The Experiments Object</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.experiments\n</code></pre>\n<p>This is an object with information about all the experiments for this project file. The keys of <code>window[&#39;optimizely&#39;].data.experiments</code> are the experiment ids, which can be found in the diagnostic report for your experiment.</p>\n<h4 id=\"experiment-code\">Experiment Code</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.experiments[experimentId].code\n</code></pre>\n<p>This contains the experiment&#39;s global JavaScript code, if any.</p>\n<h4 id=\"experiment-manual-mode\">Experiment Manual Mode</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.experiments[experimentId].manual\n</code></pre>\n<p>This is a boolean indicating whether the experiment is a manual experiment or not.</p>\n<h4 id=\"experiment-name\">Experiment Name</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.experiments[experimentId].name\n</code></pre>\n<p>This is the experiment&#39;s name.</p>\n<h4 id=\"experiment-section-ids\">Experiment Section Ids</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.experiments[experimentId].section_ids\n</code></pre>\n<p>This contains the section ids for the experiment, if it is a multivariate experiment.</p>\n<h4 id=\"experiment-variation-ids\">Experiment Variation Ids</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.experiments[experimentId].variation_ids\n</code></pre>\n<p>This is an array of variation ids for the variations of this experiment.</p>\n<h3 id=\"sections\">Sections</h3>\n<h4 id=\"the-sections-object\">The Sections Object</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.sections\n</code></pre>\n<p>This object contains information about all the project file&#39;s sections, indexed by their section id. The section ids can be found in the diagnostic report. Only <a href=\"https://www.optimizely.com/resources/multivariate-test-vs-ab-test\">multivariate experiments</a> contain sections.</p>\n<h4 id=\"section-name\">Section Name</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.sections[variationId].name\n</code></pre>\n<p>This contains the section&#39;s name.</p>\n<h4 id=\"section-variation-ids\">Section Variation Ids</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.sections[variationId].variation_ids\n</code></pre>\n<p>This is an array containing the variation ids for this section.</p>\n<h3 id=\"state\">State</h3>\n<h4 id=\"the-state-object\">The State Object</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.state\n</code></pre>\n<p>This object contains information about the current state of Optimizely, such as the active variations and the visitor&#39;s bucket map.</p>\n<h4 id=\"active-experiments\">Active Experiments</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.state.activeExperiments\n</code></pre>\n<p>This is an array of experiment ids for all the active experiments.</p>\n<h4 id=\"redirect-experiment\">Redirect Experiment</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.state.redirectExperiment\n</code></pre>\n<p>This is an object that is defined when a redirect variation ran on the previous page. If no Optimizely redirect occurred this object is <code>undefined</code>. When a redirect variation did occur the object contains:</p>\n<ul>\n<li>The <code>experimentId</code> of the redirect experiment</li>\n<li>The <code>variationId</code> of the redirect variation a user is bucketed in</li>\n<li>The original <code>referrer</code> value from the previous page</li>\n</ul>\n<h4 id=\"variation-map\">Variation Map</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.state.variationMap\n</code></pre>\n<p>This is a hash table whose keys are the experiment ids of experiments running for the visitor (including inactive experiments for which the user has been bucketed), and whose values are the variation indexes for those experiments.</p>\n<h4 id=\"variation-ids-map\">Variation Ids Map</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.state.variationIdsMap\n</code></pre>\n<p>This is a hash table whose keys are the experiment ids of experiments running for the visitor (including inactive experiments for which the user has been bucketed), and whose values are the variation ids for those experiments.</p>\n<h4 id=\"variation-names-map\">Variation Names Map</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.state.variationNamesMap\n</code></pre>\n<p>This is a hash table whose keys are the experiment ids of experiments running for the visitor (including inactive experiments for which the user has been bucketed), and whose values are the variation names for those experiments.</p>\n<h3 id=\"variations\">Variations</h3>\n<h4 id=\"the-variation-object\">The Variation Object</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.variations\n</code></pre>\n<p>This is an object with information about all the project file&#39;s variations, indexed by their variation id. The variation ids can be found in the diagnostic report.</p>\n<h4 id=\"variation-name\">Variation Name</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.variations[variationId].name\n</code></pre>\n<p>This contains the variation&#39;s name.</p>\n<h4 id=\"variation-map\">Variation Map</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.variations[variationId].code\n</code></pre>\n<p>This contains the variation&#39;s JavaScript code..</p>\n<h3 id=\"visitor\">Visitor</h3>\n<h4 id=\"the-visitor-object\">The Visitor Object</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.visitor\n</code></pre>\n<p>This contains helpful information about the visitor to Optimizely.</p>\n<h4 id=\"visitor-audiences\">Visitor Audiences</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.audiences\n</code></pre>\n<p>This is an object with audienceId as the key, and a boolean representing whether the visitor is in the audience (true if the visitor is in the audience) as the value. Not all audiences will be listed, in particular those audiences which are not used in any condition and are not enabled for segmentation.</p>\n<h4 id=\"visitor-browser\">Visitor Browser</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.visitor.browser\n</code></pre>\n<p>This is a string containing information about the browser type that the visitor is using. Options include &quot;Firefox&quot;, &quot;Google Chrome&quot;, &quot;Internet Explorer&quot;, &quot;Opera&quot;, and &quot;Safari&quot;. If Optimizely does not recognize the browser, this will be an empty string.</p>\n<h4 id=\"visitor-dimension-values\">Visitor Dimension Values</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.visitor.dimensions\n</code></pre>\n<p>An object with dimensionId as the key, and a string for the dimension value (if any) as the value. If a visitor has no value for a dimension, it will not appear in this object.</p>\n<h4 id=\"visitor-location\">Visitor Location</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.visitor.location\nwindow[&#39;optimizely&#39;].data.visitor.location.city\nwindow[&#39;optimizely&#39;].data.visitor.location.region\nwindow[&#39;optimizely&#39;].data.visitor.location.country\n</code></pre>\n<p>For Enterprise customers only, this is an object containing information about the visitor&#39;s location. You will need to include an Audience with geo-targeting enabled or an Audience with segmentation turned on with geo-targeting enabled for this API call to return location values. Specifically, this object contains the names of the visitor&#39;s city, region, and country, if detected.</p>\n<p>Region can also be a territory, such as Canadian province, Indian state, or German state. For US states and Canadian provinces, the string will be the standard two-letter abbreviation of the state, e.g. &quot;NH&quot; for New Hampshire, &quot;DC&quot; for the District of Columbia, and &quot;ON&quot; for Ontario. In some cases, the region string could refer to different places. For example, &quot;MN&quot; could be Minnesota, the US state, or Manipur, the Indian state. The region information should be used in conjunction with the country information, in order to be sure the region is for the correct country.</p>\n<p>The country value is a two-letter abbreviation of the visitor&#39;s country, if one is detected. For example, &quot;US&quot; is the United States, &quot;CA&quot; is Canada, &quot;MX&quot; is Mexico, &quot;DE&quot; is Germany, &quot;JP&quot; is Japan, &quot;GB&quot; is Great Britain, and &quot;RU&quot; is Russia.</p>\n<h4 id=\"visitor-referrer\">Visitor Referrer</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.visitor.referrer\n</code></pre>\n<p>This is a string listing the visitor&#39;s referring URL, if any. This is functionally equivalent to document.referer.</p>\n<h4 id=\"visitor-os\">Visitor OS</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.visitor.os\n</code></pre>\n<p>This is a string listing the visitor&#39;s operating system. If the operating system is unknown, this string is the empty string.</p>\n<h4 id=\"visitor-third-party-data\">Visitor Third Party Data</h4>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.thirdParty\n</code></pre>\n<p>This object contains information about the visitor sourced from third-party integrations. The content of this object depends on which integrations you have enabled in Optimizely. For example, if you have enabled the <a target=\"_blank\" href=\"http://optimizely.com/partners/technology/demandbase\">Demandbase integration</a> you can access Demandbase&#39;s visitor attributes as follows:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.thirdParty.demandbase.company_name\nwindow[&#39;optimizely&#39;].data.thirdParty.demandbase.industry\nwindow[&#39;optimizely&#39;].data.thirdParty.demandbase.sub_industry\n...\n</code></pre>\n<p>More generally, to access the third-party attribute <code>attributeID</code> from an integration <code>integrationID</code>, use the format below:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].data.thirdParty.integrationID.attributeID\n</code></pre>\n<p>Since third-party data is not guaranteed to be present on every page view, ensure that your code correctly handles reference errors.  For example, to access the <code>industry</code> field from the Demandbase integration, we recommend the code below:</p>\n<pre><code class=\"lang-javascript\">var demandbase = window[&#39;optimizely&#39;].data.thirdParty.demandbase || {};\nvar industry = demandbase.industry || &#39;&#39;;\nif (industry) {\n  // do something\n}\n</code></pre>\n<p>For more information on how to enable third-party integrations and what visitor attributes you have access to, see <a target=\"_blank\" href=\"http://help.optimizely.com/hc/en-us/articles/203729580\">Introduction to Optimizely Integrations</a>.</p>\n<h2 id=\"api-function-calls\">API Function Calls</h2>\n<p>Before ever making an Optimizely function call you should use the following asynchronous instantiation line. The purpose of this line is to ensure that the Optimizely code has already been loaded or, if it has not been loaded, to queue the function calls in a JavaScript array. This is similar to Google Analytics&#39; asynchronous function calls. The following is the code you should use:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\n</code></pre>\n<p>Optimizely function calls can be made using JavaScript or a query parameter, <code>optimizely_function_name=value</code>. The JavaScript API is used when the function should be called as part of your application, such as when activating a manual activation mode experiment. The query parameters are used most often for testing and debugging purposes. A common example is to opt a visitor out of Optimizely tracking by loading the URL with the query parameter <code>optimizely_opt_out=true</code>. The URL might look like this:</p>\n<pre><code class=\"lang-text\">http://www.example.com/page.html?optimizely_opt_out=true\n</code></pre>\n<p><a name=\"activate\"></a></p>\n<h3 id=\"activate\">Activate</h3>\n<p>Activate manual activation mode experiments. When you call &quot;activate&quot;, all experiments that have manual activation mode configured are run if the visitor meets the experiment&#39;s targeting conditions.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;activate&quot;]);\n</code></pre>\n<p>You can activate an experiment setup with any activation type by including the <code>experimentID</code> in the activation call. The visitor must still meet all experiment targeting conditions.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;activate&quot;, experimentId]);\n</code></pre>\n<h3 id=\"activate-sitecatalyst\">Activate SiteCatalyst</h3>\n<p>Integrate with SiteCatalyst. You must call &quot;activateSiteCatalyst&quot; after the &quot;s_code.js&quot; file has loaded.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push(&quot;activateSiteCatalyst&quot;);\n</code></pre>\n<p>The <code>sVariable</code> parameter contains all of the tracking tags to be sent to SiteCatalyst for a given visitor. Some sites use custom SiteCatalyst implementations with special <code>sVariable</code>s. If you wish to specify an <code>sVariable</code>, use:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;activateSiteCatalyst&quot;, {&quot;sVariable&quot;: mySVar}]);\n</code></pre>\n<p>The <code>sVariable</code> parameter is optional. By default, Optimizely will use the variable &quot;s&quot; as the SiteCatalyst variable. <a href=\"https://help.optimizely.com/hc/en-us/articles/200039985\">Learn More</a>.</p>\n<p><a name=\"audiences\"></a></p>\n<h3 id=\"audiences\">Audiences</h3>\n<p>Manually assign visitors to audiences. Optimizely will assign users to an audience when they match that audience&#39;s conditions, but you can use these calls to override the built-in behavior. This is especially useful for audiences created through our <a href=\"{{site.paths.rest}}#audiences\">REST API</a>, which don&#39;t have conditions and require manual assignment.</p>\n<p>To add a visitor to an audience, use:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&#39;addToAudience&#39;, audienceId]);\n</code></pre>\n<p>To remove a visitor from an audience, use:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].push([&#39;removeFromAudience&#39;, audienceId]);\n</code></pre>\n<p>If the audience has segmentation enabled, this will not impact any past conversions, and visitors you remove will still count towards the audience&#39;s unique visitor count if their visit was already logged.</p>\n<p>To remove a visitor from all audiences, use:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].push([&#39;removeFromAllAudiences&#39;]);\n</code></pre>\n<p><a name=\"bucket-visitor\"></a></p>\n<h3 id=\"bucket-visitor\">Bucket Visitor</h3>\n<p>Assign a visitor to a specific variation, thus overriding Optimizely&#39;s random assignment mechanism. You must call &quot;bucketVisitor&quot; prior to loading the Optimizely snippet. It&#39;s also important to note that bucketing a visitor via the API will add the user as a visitor to the experiment regardless of whether or not they match any of the <a href=\"https://help.optimizely.com/hc/en-us/articles/200039685\">targeting conditions</a> for the experiment. The <code>experimentId</code> and <code>variationId</code>s can be found in an experiment&#39;s <a href=\"https://help.optimizely.com/hc/en-us/articles/200039745\">Diagnostic Report</a>.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;bucketVisitor&quot;, experimentId, variationId]);\n</code></pre>\n<p>To prevent a pageview event from being fired when this call is made, set the third parameter to true.</p>\n<pre><code class=\"lang-javascript\">var doNotSendPageviewTracking = true;\nwindow[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;bucketVisitor&quot;, experimentId, variationId, doNotSendPageviewTracking]);\n</code></pre>\n<p>Other ways to call this API:</p>\n<pre><code class=\"lang-javascript\">// Multivariate experiments should bucket for each section:\nwindow[&#39;optimizely&#39;].push([&quot;bucketVisitor&quot;, experimentId, variationIdOfSection1]);\nwindow[&#39;optimizely&#39;].push([&quot;bucketVisitor&quot;, experimentId, variationIdOfSection2]);\n\n// You can also use the variation index:\nwindow[&#39;optimizely&#39;].push([&quot;bucketVisitor&quot;, experimentId, variationIndex]);\n</code></pre>\n<p>The <code>variationIndex</code> is a 0-based index of the variation in the editor (0 being the original page, 1 being the first variation, and so on).</p>\n<p><a name=\"custom-tag\"></a></p>\n<h3 id=\"custom-tag\">Custom Tag</h3>\n<p>You can use custom tags to target based on information you have about a visitor. You must call &quot;customTag&quot; prior to loading the Optimizely snippet.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;customTag&quot;, tagKey, tagValue]);\n</code></pre>\n<p>You can also set multiple tags simultaneously:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].push([&quot;customTag&quot;, {\n  firstKey: firstValue,\n  secondKey: secondValue\n}]);\n</code></pre>\n<p>If you set multiple values for the same tag key, the last value set before the Optimizely snippet loads will be used. You can check what values are actually set by checking the <a href=\"#custom-tags-data\">custom tags field on the data object</a> after the Optimizely snippet loads.</p>\n<p>Note that for targeting purposes, values are all compared as strings.</p>\n<h3 id=\"delay-pageview-tracking\">Delay Pageview Tracking</h3>\n<p>Delay pageview tracking by a specified number of milliseconds.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;delayPageviewTracking&quot;, 1000]);\n</code></pre>\n<p><a name=\"dimensions\"></a></p>\n<h3 id=\"dimensions\">Dimensions</h3>\n<p>Dimensions have replaced <a href=\"#segments\">Visitor Segments added through the API</a>. You can assign dimension values to your visitors through this API, and those values will be available for segmentation on the results page or targeting with an audience.</p>\n<p>To set a dimension value for a visitor:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].push([&#39;setDimensionValue&#39;, dimensionId, &#39;value&#39;]);\n</code></pre>\n<p>&#39;value&#39; will be coerced to a string, and limited to 20 characters (encoded).</p>\n<p>To delete an existing value, remove the value argument or supply <code>null</code>. Deleting a value will prevent Optimizely from counting future conversions toward that dimension value. It will not impact any past conversions, and visitors you remove will still count towards that value&#39;s unique visitor count if their visit was already logged.</p>\n<h3 id=\"disable\">Disable</h3>\n<p>Disable Optimizely entirely. You must call &quot;disable&quot; prior to loading the Optimizely snippet.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;disable&quot;]);\n</code></pre>\n<p>You can also disable just Optimizely tracking calls from being made:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].push([&quot;disable&quot;, &quot;tracking&quot;]);\n</code></pre>\n<h3 id=\"log\">Log</h3>\n<p>Tell Optimizely to output its log to the browser&#39;s console log.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;log&quot;]);\n</code></pre>\n<p>You can also do this by using the query parameter <code>optimizely_log=true</code>.</p>\n<h3 id=\"set-cookie-expiration\">Set Cookie Expiration</h3>\n<p>Specify the number of days before the Optimizely visitor cookies will be set to expire. You must call &quot;setCookieExpiration&quot; prior to loading the Optimizely snippet. The minimum number of days that can be set is 90 (approximately 3 months). For more information on how Optimizely uses cookies, visit our <a href=\"https://help.optimizely.com/hc/en-us/articles/200040335\">Learning Center</a>.</p>\n<p>Note: Some Optimizely cookies are re-set every time a visitor comes to the site, which means the expiration period set with this API call will be used each time the cookie is set.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;setCookieExpiration&quot;, 365]);\n</code></pre>\n<p>In the example above, the Optimizely visitor cookies will expire in 1 year.</p>\n<h3 id=\"set-cookie-domain\">Set Cookie Domain</h3>\n<p>Instruct Optimizely to set its cookies on a specific subdomain instead of the default domain. You must call &quot;setCookieDomain&quot; prior to loading the Optimizely snippet. By default, Optimizely sets its cookies on the domain, in order to work across subdomains.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;setCookieDomain&quot;, &quot;www.example.com&quot;]);\n</code></pre>\n<p>In this example, the cookies Optimizely sets will be available only on &quot;.www.example.com&quot;, (&quot;www.example.com&quot; and all of its subdomains), rather than on &quot;.example.com&quot;, which is the default.</p>\n<h3 id=\"skip-pageview-tracking\">Skip Pageview Tracking</h3>\n<p>Skip pageview tracking.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow.optimizely.push([&quot;skipPageTracking&quot;]);\n</code></pre>\n<h3 id=\"third-party-cookie-opt-out\">Third Party Cookie Opt Out</h3>\n<p>Disable Optimizely&#39;s 3rd party cookies. You must call &quot;optOutThirdPartyCookies&quot; prior to loading the Optimizely snippet. This will prevent cross-domain visitor bucketing and measurement. For more information on Optimizely&#39;s use of cookies, please see our <a href=\"https://help.optimizely.com/hc/en-us/articles/200040335\">Knowledge Base</a>.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;optOutThirdPartyCookies&quot;]);\n</code></pre>\n<h3 id=\"track-element\">Track Element</h3>\n<p>Track clicks on elements matching &quot;selector&quot; with the event &quot;eventName&quot;. You can call bindTrackElement before or after the Optimizely JavaScript snippet:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;bindTrackElement&quot;, &quot;selector&quot;,\n   &quot;eventName&quot;]);\n</code></pre>\n<p>or from within variation code or global JavaScript:</p>\n<pre><code class=\"lang-javascript\">optimizely.push([&quot;bindTrackElement&quot;, &quot;selector&quot;, &quot;eventName&quot;]);\n</code></pre>\n<h3 id=\"track-event\">Track Event</h3>\n<h4 id=\"basic-tracking\">Basic Tracking</h4>\n<p>Track custom events in Optimizely. The event &quot;eventName&quot; will be tracked and associated with the current visitor.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;trackEvent&quot;, &quot;eventName&quot;]);\n</code></pre>\n<h4 id=\"revenue-tracking\">Revenue Tracking</h4>\n<p>Track revenue-generating events. The event &quot;eventName&quot; will be tracked and associated with a revenue of <code>valueInCents</code>.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;trackEvent&quot;, &quot;eventName&quot;, {&quot;revenue&quot;: valueInCents}]);\n</code></pre>\n<p><code>valueInCents</code> should be an integer equal to 100 times the value in dollars (or another currency if you prefer). For example, if you wish to track a purchase of $23.95, you would call:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].push([&quot;trackEvent&quot;, &quot;purchase&quot;, {&quot;revenue&quot;: 2395}]);\n</code></pre>\n<h3 id=\"universal-user-id-beta-a-name-uuid-a-\">Universal User ID (Beta)<a name=\"uuid\"></a></h3>\n<p>Set a unique identifier (defined by you) to be used by Optimizely for bucketing and tracking identifiable users (e.g. logged in users) across different different devices and/or platforms. Once set, Optimizely will bucket visitors in all new and future experiments using the UUID to ensure that visitors will see the same variation across devices (e.g. Android phone to tablet). You can ensure this behavior and ensure consistent counting and bucketing across devices by using our Audiences feature to target users with a UUID. We store this identifier in a cookie and continue to use it until a new one is set.</p>\n<p>Optimizely will track unique visitors in experiment results using this ID; we count an anonymous ID and a UUID as two distinct visitors, and if the the UUID is set, we disregard the anonymous ID when counting experiment traffic and goals. Note that UUID-based counting will apply to all visitors in that project, not just visitors to experiments that target UUID. <em>We recommend that you use UUID only on projects where all experiments are targeted to visitors with UUIDs, because counting discrepancies can occur if a visitor goes from anonymous to UUID and back to anonymous over the course of a session.</em></p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;setUserId&quot;, myHashedEmail]);\n</code></pre>\n<p><em>This is a beta feature, and is subject to change.</em> To learn more, visit our <a href=\"https://help.optimizely.com/hc/en-us/articles/203626830\">Help Center</a>. For support, please visit <a href=\"http://www.optiverse.com/\">Optiverse</a> or contact your Customer Success Manager.</p>\n<div class=\"attention attention--warning push--bottom\">Note: By using this API call, you agree not to pass personally identifiable (PII) information to Optimizely in accordance with our <a href=\"http://optimizely.com/terms\">Terms of Service</a> or your Master Service Agreement. If your login identifier is personally identifiable (such as an email address) you must hash it first before sending to Optimizely.</div>\n\n<h3 id=\"visitor-opt-out\">Visitor Opt Out</h3>\n<p>Opt a visitor out of Optimizely tracking. For example, you may want to opt visitors out of Optimizely tracking as part of your site&#39;s broader opt-out preferences.</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&quot;optOut&quot;]);\n</code></pre>\n<p>You can also do this by using the query parameter <code>optimizely_opt_out=true</code>.</p>\n<p><a name=\"segments\"></a></p>\n<h3 id=\"visitor-segments\">Visitor Segments</h3>\n<div class=\"attention attention--warning push--bottom\">Visitor Segments assigned through the API have been deprecated and replaced by <a href=\"#dimensions\">Dimensions</a>. For backwards compatibility, these API calls will continue to work for existing segments, but you should transition your code to use dimensions instead. <a href=\"{{site.paths.rest}}#audiences\">Learn more</a>.</div>\n\n<p>Accounts with segmentation enabled can add visitors to visitor segments through the API. To do so, first navigate to the dashboard page. Then find your visitor segment&#39;s API identifier by clicking through the information in the visitor segment dialog. The API identifier is automatically generated when you first create the visitor segment, but can be changed later.</p>\n<p>To add a visitor to a segment, use:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;] = window[&#39;optimizely&#39;] || [];\nwindow[&#39;optimizely&#39;].push([&#39;addToSegment&#39;, &#39;apiIdentifier&#39;, &#39;optionalSegmentValue&#39;]);\n</code></pre>\n<p>To remove a visitor from a segment, use:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].push([&#39;removeFromSegment&#39;, &#39;apiIdentifier&#39;]);\n</code></pre>\n<p>Removing a visitor will prevent Optimizely from counting future conversions toward that segment. It will not impact any past conversions, and visitors you remove will still count towards the segment&#39;s unique visitor count if their visit was already logged.</p>\n<p>To remove a visitor from all segments, use:</p>\n<pre><code class=\"lang-javascript\">window[&#39;optimizely&#39;].push([&#39;removeFromAllSegments&#39;]);\n</code></pre>\n"}}},"libs":{"index":{"template":"page-sidebar","title":"Community","body":"<h2 id=\"community-libraries\">Community Libraries</h2>\n<p>API Libraries make it easy to interact with Optimizely in your favorite language. Below is a list of Optimizely built and 3rd party libraries contributed from our community of developers and partners. </p>\n<p>Want your library listed here? Send an email to <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>!</p>\n<h3 id=\"optimizely-built\">Optimizely Built</h3>\n<ul>\n<li><a href=\"https://github.com/optimizely/optimizely-client-python\">Python</a></li>\n<li><a href=\"https://github.com/optimizely/optimizely-node\">Node.js</a></li>\n</ul>\n<h3 id=\"community-built\">Community Built</h3>\n<ul>\n<li><a href=\"https://github.com/MartijnSch/optimizely-gem\">Ruby Gem</a> by <a href=\"https://github.com/MartijnSch\">Martijn Scheijbeler</a></li>\n<li><a href=\"https://github.com/FunnelEnvy/optimizely-php\">PHP</a> by <a href=\"https://github.com/FunnelEnvy\">FunnelEnvy</a></li>\n<li><a href=\"https://github.com/funnelenvy/optimizely-node\">Node</a> by <a href=\"https://github.com/FunnelEnvy\">FunnelEnvy</a></li>\n<li><a href=\"https://github.com/funnelenvy/optimizely-cli\">Optimizely CLI</a> by <a href=\"https://github.com/FunnelEnvy\">FunnelEnvy</a></li>\n<li><a href=\"https://github.com/kanaku/ROptimizely\">ROptimizely</a> by <a href=\"https://github.com/kanaku\">Kanaku</a></li>\n</ul>\n"}},"oauth":{"oauth":{"8-deletion":{"template":"sidebyside","title":"Deletion","anchor":"deletion","body":"<p>You can edit or delete your application at any time in your Optimizely account settings. You must have an Administrator role to perform these actions.</p>\n<div class=\"attention attention--warning push--bottom\">To delete a registered application, follow the instructions on <a target=\"_blank\" href=\"https://www.optimizely.com/accountsettings/developer\">optimizely.com/accountsettings/developer</a>.</div>\n"},"6-refresh-tokens":{"template":"sidebyside","title":"Refresh tokens","anchor":"refresh-tokens","fields":{"refresh_token":"The refresh token returned from the authorization code exchange.","client_id":"The client ID for your application (see <a href=\"http://app.optimizely.com/accountsettings/apps/developers\" target=\"_blank\">app settings</a>).","client_secret":"The client secret for your application (see <a href=\"http://app.optimizely.com/accountsettings/apps/developers\" target=\"_blank\">app settings</a>).","grant_type":"As defined in the OAuth 2.0 spec, this field must contain a value of `refresh_token`."},"request_url":"// Example POST request\nPOST https://app.optimizely.com/oauth2/token\n  ?refresh_token=1234567890abcdefghijklmnopqrstuvwxyz\n  &client_id=123\n  &client_secret=iamverysecret\n  &grant_type=refresh_token\n\n// Example JSON response\n{\n  \"access_token\": \"abcdefghijklmnopqrstuvwxyz\",\n  \"expires_in\": 7200,\n  \"token_type\": \"bearer\",\n}","body":"<p><em>For authorization code grants only.</em></p>\n<p>After the authorization code exchange, you can exchange a refresh token for an access token by issuing an HTTPS POST request to Optimizely’s authorization server.</p>\n<p>The code at right shows an example request and a successful response. In the event the user has revoked your access, you will receive an HTTP 403 response.</p>\n"},"4-redirection":{"template":"sidebyside","title":"Redirection","anchor":"redirection","fields":{"access_token":"<b>Implicit grants only.</b> If you are using the implicit grant flow, this key will contain a valid access token you can use to access the REST API on behalf of the authorizing user. Jump to [Authentication](#authentication-oauth) for instructions on using an access token to access the REST API.","code":"<b>Authorization code grants only.</b> If you are using the authorization code flow, this parameter contains an authorization code, which you can use to exchange for an access token and refresh token. The authorization code will expire in 10 minutes and can only be used once. Jump to [Authorization Code](#authorization-code) for instructions on obtaining an access token.","token_type":"<b>Implicit grants only.</b> As of March 2015, the only supported type is `bearer`.","state":"The state you provided in the authorization request. You should verify this value matches the state you provided earlier.","expires_in":"<b>Implicit grants only.</b> The TTL for this token in seconds. As of March 2015, all access tokens will expire in 2 hours (`7200`)."},"request_url":"// Successful authorization (implicit grant)\nhttp://myapplication.com/\n  #access_token=abcdefghijklmnopqrstuvwxyz\n  &token_type=bearer\n  &state=somesecurestate\n  &expires_in=7200\n\n// Unsuccessful authorization (implicit grant)\nhttp://myapplication.com/\n  #error=access_denied\n  &state=somesecurestate\n\n// Successful authorization (authorization code grant)\nhttps://myapplication.com/\n  ?code=asdbawejksd\n  &state=somesecurestate\n\n// Unsuccessful authorization (authorization code grant)\nhttps://myapplication.com/\n  ?error=access_denied\n  &state=somesecurestate","body":"<p>If the user accepts (or rejects) authorization, Optimizely will send an HTTP GET request to the <b>redirect URI</b> provided during authorization with the values described below.</p>\n<p>If you are using the implicit grant flow, this information will be provided in the URL fragment. The examples on the right show redirects to <code>http://myapplication.com</code> in both cases where the user accepts and rejects authorization.</p>\n<p>If you are using the authorization code flow, this information will be provided in the redirection query parameters. The examples on the right show redirects to <code>http://myapplication.com</code> in both cases where the user accepts and rejects authorization.</p>\n"},"2-registration":{"template":"sidebyside","title":"Registration","anchor":"registration","body":"<p>You must be an Administrator of an Optimizely account to register an application. Registering an application requires the following inputs:</p>\n<ul>\n<li>An <b>application name</b> that identifies your application to Optimizely customers</li>\n<li>One or more <b>redirect URIs</b>, that users will be redirected to after authorizing access to your application</li>\n<li>A <b>client type</b> (either public or confidential) according to the grant type you wish to use in your application</li>\n</ul>\n<p>Upon registering an application, you will receive a <b>client ID</b> that will uniquely identify your application and is required in the authorization flow described below. You will also receive a <b>client secret</b> which is required for an <a href=\"#authorization-code\">authorization code</a> exchange.</p>\n<div class=\"attention attention--warning push--bottom\">To register a new application, follow the instructions on <a target=\"_blank\" href=\"https://app.optimizely.com/accountsettings/apps/developers\">app.optimizely.com/accountsettings/apps/developers</a>.</div>\n"},"0-intro":{"template":"sidebyside","title":"OAuth 2.0","ignoreTitleForToc":true,"anchor":"oauth","body":"<p>Optimizely provides the OAuth 2.0 protocol to allow users to authorize third party applications to access Optimizely data via the REST API. It allows any Optimizely customer to grant access to an application without the need to share their Optimizely username and password. Customers can view and revoke applications they&#39;ve authorized in their <a href=\"https://help.optimizely.com/hc/en-us/articles/204477398#oauth\" target=\"_blank\">account settings</a>.</p>\n<p>To build an OAuth 2.0 flow in your application, you&#39;ll need to complete the following steps:</p>\n<ul>\n<li>Decide which <a href=\"#grant-types\">Grant Type</a> is most appropriate for your application</li>\n<li><a href=\"#registration\">Register</a> your application with Optimizely</li>\n<li>In your application, point customers to Optimizely&#39;s <a href=\"#authorization\">authorization</a> URL</li>\n<li>Process a <a href=\"#redirection\">redirect</a> after the user accepts (or rejects) your application&#39;s access</li>\n<li>Obtain an access token, via an <a href=\"#authorization-code\">authorization code</a> or <a href=\"#refresh-tokens\">refresh token</a>, or via the redirect itself, depending on the authorization flow you&#39;re using</li>\n<li><a href=\"#authentication-oauth\">Authenticate</a> with the REST API using the provided access token</li>\n</ul>\n<p>The following sections walk through each of these steps in detail.</p>\n<p>If at any point you have any questions or need some help building out an OAuth 2.0 flow, please contact <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>.</p>\n<p><div align=\"center\">\n<img src=\"/assets/img/rest/oauth_flow.png\"><br>\nOAuth 2.0 flow\n</div><br></p>\n"},"1-grant-types":{"template":"sidebyside","title":"Grant types","anchor":"grant-types","body":"<p>As of August 2015, Optimizely supports both the <b>Authorization Code</b> and <b>Implicit</b> grant types, as described in the <a href=\"http://tools.ietf.org/html/rfc6749\" target=\"_blank\">OAuth 2.0 spec</a>. Read below for more information on the difference between these grant types and decide which is most appropriate for your application.</p>\n<h4 id=\"-authorization-code-grant-\"><em>Authorization code grant</em></h4>\n<p>The authorization code grant is used to obtain both access tokens and refresh tokens and is optimized for <em>confidential clients</em>. It’s more versatile than the implicit grant and can give an application indefinite access to Optimizely on behalf of a user with a single authorization request. However, it is more complex to implement, and it requires the application to implement server-side code as well as a means of securely storing confidential information, including both a client secret and refresh tokens.</p>\n<p>Read more about the <a href=\"https://tools.ietf.org/html/rfc6749#section-4.1\" target=\"_blank\">Authorization Code Grant in the official OAuth 2.0 spec</a>.</p>\n<h4 id=\"-implicit-grant-\"><em>Implicit grant</em></h4>\n<p>The implicit grant type is optimized for <em>public clients</em>. Such clients will receive a valid access token at their redirection URL immediately after the user authorizes their application. Access tokens expire after 2 hours.</p>\n<p>It is important to note that the implicit grant does not support refresh tokens. Therefore, any application using the implicit grant will need to explicitly re-request authorization from the user when an access token expires.</p>\n<p>Read more about the <a href=\"https://tools.ietf.org/html/rfc6749#section-4.2\" target=\"_blank\">Implicit Grant in the official OAuth 2.0 spec</a>.</p>\n"},"3-authorization":{"template":"sidebyside","title":"Authorization","anchor":"authorization","fields":{"client_id":"The client ID for your application (see <a href=\"http://app.optimizely.com/accountsettings/apps/developers\" target=\"_blank\">app settings</a>).","redirect_uri":"A URL-encoded redirect URI to which the user will be redirected after successful (or failed) authorization. Must match one of the URIs provided during registration. If you are using an authorization code grant, insecure URLs such as those starting with `http://` will be rejected. You can always add more redirect URIs to your application on the <a target=\"_blank\" href=\"https://www.optimizely.com/accountsettings/developer\">registration page</a>.","response_type":"The grant type your application requests for authorization. As of August 2015, the supported types are `token` (for implicit grant) and `code` (for authorization code grant).","scopes":"A string denoting the access scope(s) your application requires after authorization. As of March 2015, the only supported value is `all`, meaning the generated token will have permissions that match the <a target=\"_blank\" href=\"https://help.optimizely.com/hc/en-us/articles/200040775\">user role</a> of the authorizing user.","state":"A value you provide that will be relayed back to you in the response, to protect against CSRF attacks. For more information, see the <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749#section-10.12\">CSRF section</a> of the OAuth 2.0 spec.","account_id":"(Optional) Specify the Account ID you want to authorize against."},"request_url":"https://app.optimizely.com/oauth2/authorize\n  ?client_id=123\n  &redirect_uri=http%3A%2F%2Fmyapplication.com\n  &response_type=token\n  &scopes=all\n  &state=somesecurestate\n  &account_id=123456","body":"<p>To enable users to authorize your application, you must link to Optimizely&#39;s authorization endpoint on <code>app.optimizely.com</code> using the <b>client ID</b> and a <b>redirect URI</b> provided during registration. For example, the link shown on the right will send the user to an authorization flow for client ID <code>123</code> with a redirect to <code>http://myapplication.com</code>. See the table below for a full list of required parameters in the authorization endpoint.</p>\n<p>We recommend you use the <b>Connect with Optimizely</b> button below, which you may resize as needed:</p>\n<p><div align=\"center\">\n<img src=\"/assets/img/connect.png\" width=250px><br>\nDownload Button: <a href=\"/assets/img/connect.png\" download=\"ConnectWithOptimizelyButton.png\">PNG</a> | <a href=\"/assets/img/connect.svg\" download=\"ConnectWithOptimizelyButton.svg\">SVG</a>\n</div><br></p>\n<p>After clicking this link, users will be prompted to log in to Optimizely if they aren&#39;t already. They will then be given the option to accept or deny authorization for your application. Users can revoke your application&#39;s access to their data at any time in their <a target=\"_blank\" href=\"https://app.optimizely.com/accountsettings/apps/access\">API Access</a> settings.</p>\n"},"5-authorization-code":{"template":"sidebyside","title":"Authorization code","anchor":"authorization-code","fields":{"code":"The authorization code returned in the redirect.","client_id":"The client ID for your application (see <a href=\"http://app.optimizely.com/accountsettings/apps/developers\" target=\"_blank\">app settings</a>).","client_secret":"The client secret for your application (see <a href=\"http://app.optimizely.com/accountsettings/apps/developers\" target=\"_blank\">app settings</a>).","redirect_uri":"The redirect URI that was used when requesting the authorization code.","grant_type":"As defined in the OAuth 2.0 spec, this field must contain a value of `authorization_code`."},"request_url":"// Example POST request\nPOST https://app.optimizely.com/oauth2/token\n  ?code=asdbawejksd\n  &client_id=123\n  &client_secret=iamverysecret\n  &redirect_uri=http%3A%2F%2Fmyapplication.com\n  &grant_type=authorization_code\n\n// Example JSON response\n{\n  \"access_token\": \"abcdefghijklmnopqrstuvwxyz\",\n  \"expires_in\": 7200,\n  \"token_type\": \"bearer\",\n  \"refresh_token\": \"1234567890abcdefghijklmnopqrstuvwxyz\"\n}","body":"<p><em>For authorization code grants only.</em></p>\n<p>After you obtain an authorization code, you can exchange this authorization code for an access token by issuing an HTTPS POST request to Optimizely’s authorization server.</p>\n<p>The code at right shows an example request and a successful response. The response will include an access token (with a lifetime of 2 hours) as well as a <em>refresh token</em> that can be used to request more access tokens after the initial access token expires.</p>\n"},"7-api-access":{"template":"sidebyside","title":"Authentication","anchor":"authentication-oauth","curl":"curl \\\n  -H \"Authorization: Bearer abcdefghijklmnopqrstuvwxyz\" \\\n  -X GET \"https://www.optimizelyapis.com/experiment/v1/projects/1234/\"","body":"<p>Using the access token provided in the authorization response, your application can now access the REST API on behalf of the authorizing user. You can use the REST API as outlined in this documentation, except you should use a header in the format <code>Authorization: Bearer [token]</code> instead of <code>Token: [token]</code>, as shown in the example on the right.</p>\n<p>Your application should check for 403 errors, in case the user has revoked application access or the token has expired. In such cases, to resume access you will need to prompt users to repeat the authorization flow.</p>\n"}},"index":{"template":"page-sidebar--full","title":"OAuth 2.0","includeSiblingData":true,"sections":["oauth"],"body":""}},"overview":{"index":{"template":"page-sidebar","title":"Overview","body":"<h2 id=\"welcome-\">Welcome!</h2>\n<p><em>This site contains resources for developers who want to extend, integrate and build with Optimizely in new ways.</em></p>\n<h3 id=\"getting-started\">Getting started</h3>\n<p>If you are new to Optimizely, check out the <a href=\"#use-cases\">Use cases</a> below to understand the different ways to develop on our platform. For a more in-depth overview, you may also want to read <a href=\"#how-optimizely-works\">How Optimizely works</a> which explains Optimizely&#39;s data model, architecture, and the various integration points for developers.</p>\n<p>If you&#39;re looking to develop on a specific platform, check out our documentation for the <a href=\"/rest/introduction\">REST API</a>, <a href=\"/javascript/introduction\">JS API</a>, <a href=\"/ios/introduction\">iOS SDK</a> and an <a href=\"/android/introduction\">Android SDK</a>. Each API and SDK contains a brief getting started guide, comprehensive documentation, and FAQs. This site also includes a <a href=\"/javascript/code-samples\">Code samples</a> page with solutions from customers, partners, and Optimizely employees that you can download for free.</p>\n<h3 id=\"developer-account\">Developer account</h3>\n<p>Optimizely offers a free account for developers that includes access to the APIs and SDKs. Creating an account takes 30 seconds and doesn&#39;t require a credit card.</p>\n<p><a class=\"button button--highlight anchor--middle display--block width--200 text--center\" href=\"https://www.optimizely.com/?modal=devsignup\">\nCreate a free account\n</a></p>\n<h3 id=\"developer-support\">Developer support</h3>\n<p>If you have any questions or need help please email Optimizely&#39;s developer support team at <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>. You can also post on our <a href=\"http://community.optimizely.com/t5/Developers/bd-p/Developers\">developer discussion group</a> on Optiverse. We&#39;re happy to help and eager to hear your feedback.</p>\n<h3 id=\"contributions\">Contributions</h3>\n<p>This site is open source and we welcome contributions from the non-Optimizely developer community. If you have any feedback or suggestions, please feel free to send us a pull request to the <a href=\"http://github.com/optimizely/developers.optimizely.com\">developers.optimizely.com Github repo</a>.</p>\n<h2 id=\"use-cases\">Use cases</h2>\n<p>Below are some common use cases of Optimizely for developers, and pointers to the relevant resources to get started.</p>\n<h3 id=\"custom-implementations\">Custom implementations</h3>\n<p>Many Optimizely customers want to run more advanced tests and personalized experiences that are not possible in Optimizely&#39;s out-of-the-box solution. Below are some common customizations that we&#39;ve seen from our customers.</p>\n<ul>\n<li><p><em>Event tracking:</em> To track events that are not provided out of the box by Optimizely (e.g. purchase data or offline conversions), check out our section on <a href=\"/javascript/code-samples/#advanced-goal-tracking\">Events</a> which explains all of our available tracking APIs.</p>\n</li>\n<li><p><em>Variation code:</em> If you would like to write your own variation code instead of using the Optimizely visual editor, check out our <a href=\"/javascript/code-samples/#variation-code\">Variation code</a> section that explains how to format Optimizely variations with example code.</p>\n</li>\n<li><p><em>Audiences:</em> If you have data about the visitors to a site, you can use our platform to group those visitors into <a href=\"/rest/reference#audiences\">Optimizely Audiences</a>. This makes it easy to target content to different audiences and segment experiment results.</p>\n</li>\n<li><p><em>Advanced use cases:</em> These advanced use cases (<a href=\"/javascript/code-samples/#advanced-use-cases\">Web</a> | <a href=\"/ios/guide/index.html#advanced-setup\">iOS</a> | <a href=\"/android/guide/index.html#advanced-setup\">Android</a>) will help you push the limits of what Optimizely is capable of doing within Project, Experiment, and Variation code.</p>\n</li>\n<li><p><em>Experiment results:</em> Utilize these code samples to better understand Optimizely&#39;s <a href=\"/rest/code-samples#stats\">/results endpoint</a>. This endpoint provides high-level insights from Optimizely&#39;s Stats Engine.</p>\n</li>\n<li><p><em>Integrations:</em> Whether you&#39;re looking to create a custom integration with an analytics platform or if you&#39;re looking to do WordPress headline testing with Optimizely, you can refer to the following links for each of Optimizely&#39;s different channels will help you navigate these processes:</p>\n<ul>\n<li><a href=\"/integrations/\">Web integration guide</a></li>\n<li><a href=\"/ios/reference/index.html#-a-name-analytics-a-analytics-integrations\">iOS integration guide</a></li>\n<li><a href=\"/android/reference/index.html#-a-name-analytics-a-analytics-integrations\">Android integration guide</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><em>Single page web apps (web only):</em> On traditional websites, when visitors click links, the links generally lead to a new URL and load an entirely new page. In Single Page Applications, the whole page doesn&#39;t reload; instead, certain content is changed, loaded, and swapped out in the current URL. Check out our <a href=\"/javascript/code-samples/#single-page-apps\">single page app</a> section to help accommodate the behavior of Single Page Applications.</p>\n</li>\n<li><p><em>Custom JS conditions (web only):</em> If you expose first or third party data on the client, then you can use Optimizely&#39;s <a href=\"/javascript/code-samples/#custom-js\">custom JS conditions</a> to port data into different audiences.</p>\n</li>\n<li><p><em>Conditional activation (web only):</em> Sometimes you&#39;ll want to trigger an Optimizely experiment dynamically, after some part of the page or screen has loaded. Read our <a href=\"/javascript/code-samples/#conditional\">Conditional activation</a> section for more information on how to control when Optimizely activates.</p>\n</li>\n<li><p><em>Helper functions (web only):</em> Many times, it is necessary to use getter and setter methods within Optimizely to better interact with your website. This list of <a href=\"/javascript/code-samples/#helpers\">helper functions</a> are frequently used in Project, Experiment, and Variation JavaScript.</p>\n</li>\n</ul>\n<h3 id=\"integrations\">Integrations</h3>\n<p>Optimizely integrates with more than <a href=\"http://optimizely.com/partners/technology\">30 Technology Partners</a> to make it easy to exchange data between Optimizely and other tools. In addition, our customers often build custom integrations with 3rd parties or their own internal tools. If you are a partner or customer looking to build an integration, please refer to our <a href=\"/integrations\">Integration Guide</a> which includes detailed instructions for building many types of integrations with Optimizely.</p>\n<h3 id=\"mobile-testing\">Mobile testing</h3>\n<p>Optimizely includes an <a href=\"http://optimizely.com/mobile\">A/B testing solution</a> for native iOS and Android apps. If you are looking at implementing Optimizely in your app for the first time, check out our <a href=\"/ios/guide\">iOS getting started guide</a> and <a href=\"/android/guide\">Android getting started guide</a>, which contain detailed instructions for installing the Optimizely SDK and running your first experiment.</p>\n<h2 id=\"how-optimizely-works\">How Optimizely works</h2>\n<p>This section explains the inner workings of Optimizely, including key terminology, architecture, and the available touchpoints for developers. <a href=\"#life-of-an-experiment\">Life of an experiment</a> describes a typical customer workflow and <a href=\"#life-of-a-visitor\">Life of a visitor</a> describes what happens when a visitor comes to a website or mobile app running Optimizely.</p>\n<h3 id=\"architecture\">Architecture</h3>\n<p>The diagram below provides an overview of the REST API, JS API, iOS SDK, and Android SDK. Your application can integrate with Optimizely on the following channels: Web, iOS &amp; Android.</p>\n<p><img src=\"../../assets/img/optimizely-experience-architecture.svg\"></p>\n<h3 id=\"life-of-an-experiment\">Life of an experiment</h3>\n<p>Below is a typical workflow for a customer running an experiment with Optimizely.</p>\n<h4 id=\"-1-create-an-experiment-\"><em>1. Create an experiment</em></h4>\n<p>An <em>experiment</em> is a campaign run by Optimizely on either a website or a mobile app to determine the impact of a change.</p>\n<p>Typically, an experiment is an <em>A/B test</em> that includes a control and one or more variations with changes to test. On the web we also support <em>multivariate tests</em> and <em>multi-page tests</em> (<a href=\"https://help.optimizely.com/hc/en-us/articles/200039785\">learn more</a>). Customers can configure what fraction of visitor traffic they&#39;d like to allocate to their experiment.</p>\n<ul>\n<li>Learn how to <a href=\"../javascript/reference#experiments\">see which experiments are active on a web page</a></li>\n<li>Learn how to <a href=\"../rest/reference#experiments\">create an experiment using the REST API</a></li>\n</ul>\n<h4 id=\"-2-create-one-or-more-variations-\"><em>2. Create one or more variations</em></h4>\n<p>In any given experiment, customers can create one or more <em>variations</em>, that contain alternative changes they&#39;d like to test.</p>\n<p>Technically speaking, a variation is just a snippet of code that can be executed in a user&#39;s browser or app to render the experience differently. On the web, a variation consists of a snippet of jQuery code. Variations can be created using Optimizely&#39;s <a href=\"https://help.optimizely.com/hc/en-us/articles/200039725\">visual editor</a> or using the <a href=\"https://help.optimizely.com/hc/en-us/articles/200039835\">code editor</a>.</p>\n<ul>\n<li>Learn how to <a href=\"https://help.optimizely.com/hc/en-us/articles/200039835\">edit jQuery code in the Optimizely editor</a></li>\n<li>Learn how to <a href=\"../ios/reference#-a-name-variables-a-register-live-variables\">register Live Variables</a> and <a href=\"../ios/reference#-a-name-codeblocks-a-code-blocks\">write Code Blocks</a> using the iOS SDK</li>\n<li>Learn how to <a href=\"../android/reference#-a-name-variables-a-register-live-variables\">register Live Variables</a> and <a href=\"../android/reference#-a-name-codeblocks-a-code-blocks\">write Code Blocks</a> using the Android SDK</li>\n<li>Learn how to <a href=\"../rest/reference#variations\">create a variation using the REST API</a></li>\n</ul>\n<h4 id=\"-3-create-a-target-audience-\"><em>3. Create a target audience</em></h4>\n<p>Customers can filter what type of traffic they&#39;d like to include in an experiment using an <em>audience</em>.</p>\n<p>On the web, an audience is just a set of AND/OR conditions about a user (e.g. browser type, geography, query parameters) that can be evaluated in real-time when a user visits a web page. Audiences can be saved and re-used for other experiments. You can use <em>custom dimensions</em> to manually define conditions by which visitors are assigned to an audience in a web browser, or use <em>uploaded lists</em> if you want to target a particular set of user identifiers (e.g. cookies or query parameters).</p>\n<p><em>Note:</em> We do not yet support audiences on iOS and Android, but you can still create your own <a href=\"https://help.optimizely.com/hc/en-us/articles/202296994#targeting\">custom targeting conditions</a> for an experiment.</p>\n<ul>\n<li>Learn how to <a href=\"../javascript/reference#dimensions\">set custom dimensions for a visitor on a web page</a></li>\n<li>Learn how to <a href=\"../javascript/reference#audiences\">manually assign a visitor to an audience on a web page</a></li>\n<li>Learn how to <a href=\"../ios/reference#-a-name-targeting-a-custom-targeting\">create custom targeting conditions in an iOS app</a></li>\n<li>Learn how to <a href=\"../ios/reference#-a-name-targeting-a-custom-targeting\">create custom targeting conditions in an Android app</a></li>\n<li>Learn how to <a href=\"../rest/reference#dimensions\">create a custom dimension using the REST API</a></li>\n<li>Learn how to <a href=\"../rest/reference#audience\">create an audience using the REST API</a></li>\n<li>Learn how to <a href=\"../rest/reference#user_lists\">use uploaded lists in Optimizely using the REST API</a></li>\n</ul>\n<h4 id=\"-4-create-a-goal-\"><em>4. Create a goal</em></h4>\n<p>Customers must define at least one <em>goal</em> for their experiment, i.e. a metric to measure the impact of the experiment.</p>\n<p>Experiments can have an arbitrary number of goals but just one <em>primary goal</em>. Optimizely customers can define click goals or pageview goals using the goal creation dialog, or they can create <em>custom events</em> that are goals defined through code. Any goals that are defined for an experiment are tracked in the Optimizely backend over the lifetime of the experiment.</p>\n<ul>\n<li>Learn how to <a href=\"../javascript/reference#track-event\">track custom events from a web browser</a></li>\n<li>Learn how to <a href=\"../ios/reference#-a-name-goaltracking-a-goal-tracking\">track custom events from an iOS app</a></li>\n<li>Learn how to <a href=\"../android/reference#-a-name-goaltracking-a-goal-tracking\">track custom events from an Android app</a></li>\n<li>Learn how to <a href=\"../rest/reference#goals\">create a goal using the REST API</a></li>\n</ul>\n<h4 id=\"-5-start-the-experiment-\"><em>5. Start the experiment</em></h4>\n<p>Once the experiment has been configured, the customer can start the experiment using the <em>Start experiment</em> button.</p>\n<p>On taking this action, Optimizely updates the <em>snippet</em> or <em>datafile</em> sent over the CDN with instructions to run the experiment in the website or mobile app.</p>\n<ul>\n<li>Learn how to <a href=\"../rest/reference#experiments\">start an experiment using the REST API</a></li>\n</ul>\n<h4 id=\"-6-monitor-the-results-\"><em>6. Monitor the results</em></h4>\n<p>A customer can now see the results of their experiment in real-time by looking at the Optimizely results page.</p>\n<p>The results page contains how many visitors were assigned to each variation and the number of <em>conversions</em> over time, for each of the experiment goals that have been defined. Customers can also apply <em>segmentation</em> to the results page based on dimensions and audiences that they have defined.</p>\n<ul>\n<li>Learn how to <a href=\"../rest/reference#stats\">get the results of an experiment using the REST API</a></li>\n</ul>\n<h4 id=\"-7-deploy-winners-\"><em>7. Deploy winners</em></h4>\n<p>Customers can deploy winners by allocating 100% of their visitor traffic to the winning variation.</p>\n<ul>\n<li>Learn how to <a href=\"../rest/reference#experiments\">change traffic allocation using the REST API</a></li>\n</ul>\n<h3 id=\"life-of-a-visitor\">Life of a visitor</h3>\n<p>Check out the following articles for a detailed overview of Optimizely&#39;s execution on web sites and mobile apps:</p>\n<ul>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/200040335\">How Optimizely Works: Snippet order of execution, JavaScript evaluation timing, and cookies</a></li>\n<li><a href=\"https://help.optimizely.com/hc/en-us/articles/205014107\">How Optimizely&#39;s SDKs Work: SDK Order of execution, experiment activation, and goals</a></li>\n</ul>\n<p>The execution of Optimizely can be summarized in the steps below.</p>\n<h4 id=\"-1-evaluate-targeting-conditions-\"><em>1. Evaluate targeting conditions</em></h4>\n<p>The first thing Optimizely does is it collects information about the visitor, to determine what audiences that visitor is a part of.</p>\n<ul>\n<li>Learn how to <a href=\"/samples#custom-js\">write custom targeting criteria in JavaScript</a></li>\n<li>Learn how to <a href=\"../javascript/reference#audiences\">manually assign a visitor to an audience on a web page</a></li>\n<li>Learn how to <a href=\"../ios/reference#-a-name-targeting-a-custom-targeting\">create custom targeting conditions in an iOS app</a></li>\n<li>Learn how to <a href=\"../ios/reference#-a-name-targeting-a-custom-targeting\">create custom targeting conditions in an Android app</a></li>\n</ul>\n<h4 id=\"-2-assign-experiments-\"><em>2. Assign experiments</em></h4>\n<p>Next, Optimizely determines what experiment(s) (if any) should be shown to the user. This decision is based on what audiences the visitor is in, random traffic allocation, and any additional experiment targeting criteria.</p>\n<h4 id=\"-3-assign-variation-\"><em>3. Assign variation</em></h4>\n<p>If the visitor has been bucketed into an experiment, Optimizely decides which variation should be shown to the visitor using random assignment, according to the relative traffic allocation specified by the customer.</p>\n<ul>\n<li>Learn how to <a href=\"/rest/reference#bucket-visitor\">assign a visitor to a specific variation on a web page</a></li>\n<li>Learn how to <a href=\"/samples#technology-integrations-analytics\">send variation data to an analytics tool</a></li>\n</ul>\n<h4 id=\"-4-activate-experiment-\"><em>4. Activate experiment</em></h4>\n<p>Optimizely runs the code for the chosen variation. By default, this is done before the page loads on a website to ensure that the visitor doesn&#39;t see flicker. However, many customers may want to activate an experiment after a page has loaded. For more information see conditional activation.</p>\n<ul>\n<li>Learn how to <a href=\"/samples#conditional\">conditionally activate experiments using JavaScript</a></li>\n<li>Learn how to <a href=\"/javascript/reference#activate\">manually activate experiments using JavaScript</a></li>\n</ul>\n<h4 id=\"-5-track-events-\"><em>5. Track events</em></h4>\n<p>Once the page or mobile app has been rendered to the user, Optimizely tracks events by sending information to the Optimizely backend.</p>\n<ul>\n<li>Learn how to <a href=\"../javascript/reference#track-event\">track custom events from a web browser</a></li>\n<li>Learn how to <a href=\"../ios/reference#-a-name-goaltracking-a-goal-tracking\">track custom events from an iOS app</a></li>\n<li>Learn how to <a href=\"../android/reference#-a-name-goaltracking-a-goal-tracking\">track custom events from an Android app</a></li>\n</ul>\n"}},"rest":{"reference":{"variations":{"5-list":{"template":"sidebyside","title":"List variations in experiment","type":"GET","anchor":"list-variation","endpoint":"experiments/854484703/variations/","endpoint_prefix":"experiments/","endpoint_option":854484703,"endpoint_suffix":"/variations/","response":"[\n  {\n    \"is_paused\": false,\n    \"description\": \"Original\",\n    \"weight\": null,\n    \"created\": \"2014-04-17T00:47:58.390560Z\",\n    \"section_id\": null,\n    \"js_component\": \"\",\n    \"experiment_id\": 854484703,\n    \"project_id\": 859720118,\n    \"id\": 854613530\n  },\n  {\n    \"is_paused\": false,\n    \"description\": \"Variation #1\",\n    \"weight\": 5000,\n    \"created\": \"2014-04-17T00:47:06.388650Z\",\n    \"section_id\": null,\n    \"js_component\": \"$('.headline').text('Headline one');\",\n    \"experiment_id\": 854484703,\n    \"project_id\": 859720118,\n    \"id\": 859611684\n  },\n  {\n    \"is_paused\": false,\n    \"description\": \"Variation #2\",\n    \"weight\": 5000,\n    \"created\": \"2014-04-17T00:47:06.388900Z\",\n    \"section_id\": null,\n    \"js_component\": \"$('.headline').text('Headline two');\",\n    \"experiment_id\": 854484703,\n    \"project_id\": 859720118,\n    \"id\": 859611685\n  }\n]","body":"<p>List all variations associated with the experiment.</p>\n"},"3-update":{"template":"sidebyside","endpoint":"variations/859611685","endpoint_prefix":"variations/","endpoint_option":859611685,"type":"PUT","title":"Update a variation","anchor":"update-variation","request":{"js_component":"$(\".headline\").text(\"Updated headline\");"},"response":"{\n  \"is_paused\": false,\n  \"description\": \"Variation #1\",\n  \"weight\": 3333,\n  \"created\": \"2014-04-17T00:47:06.388650Z\",\n  \"section_id\": null,\n  \"js_component\": \"$('.headline').text('Updated headline');\",\n  \"experiment_id\": 854484703,\n  \"project_id\": 859720118,\n  \"id\": 859611685\n}","body":"<p>The <code>id</code> is required in the URL.</p>\n<h4 id=\"editable-fields\">Editable fields</h4>\n<ul>\n<li><code>description</code></li>\n<li><code>is_paused</code> (set this to <code>true</code> to stop the variation from getting traffic)</li>\n<li><code>js_component</code></li>\n<li><code>weight</code></li>\n</ul>\n"},"1-read":{"template":"sidebyside","endpoint":"variations/859611684","endpoint_prefix":"variations/","endpoint_option":859611684,"type":"GET","title":"Read a variation","anchor":"read-variation","fields":{"is_paused":"Default is `false`, true means no new visitors will see the variation","description":"The name that shows up as a tab in the Optimizely editor","weight":"The percentage of your visitors that should see this variation, measured in basis points. 100 basis points = 1% traffic. Variation weights should add up to 10000.","js_component":"The JavaScript code that will run for a variation"},"response":"{\n  \"is_paused\": false,\n  \"description\": \"Variation #2\",\n  \"weight\": 5000,\n  \"created\": \"2014-04-17T00:47:06.388650Z\",\n  \"section_id\": null,\n  \"js_component\": \"alert('It works!');\",\n  \"experiment_id\": 854484703,\n  \"project_id\": 859720118,\n  \"id\": 859611684\n}","body":"<p>Get metadata for a single variation.</p>\n"},"0-intro":{"template":"sidebyside","title":"Variations","anchor":"variations","body":"<p>Every experiment contains a set of variations that each change the visitor&#39;s experience in a different way. Variations define the code that should be applied on a page to change the experience, and the percentage of visitors who should see that code. A standard &quot;A/B&quot; test has two variations (including the original), and Optimizely supports adding many more variations.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"experiments/854484703/variations/","endpoint_prefix":"experiments/","endpoint_option":854484703,"endpoint_suffix":"/variations/","type":"POST","title":"Create a new variation","anchor":"create-variation","request":{"description":"Variation #1","js_component":"$(\".headline\").text(\"New headline\");","weight":3333},"response":"{\n  \"is_paused\": false,\n  \"description\": \"Variation #1\",\n  \"weight\": 3333,\n  \"created\": \"2014-04-17T00:47:06.388650Z\",\n  \"section_id\": null,\n  \"js_component\": \"$('.headline').text('New headline');\",\n  \"experiment_id\": 854484703,\n  \"project_id\": 859720118,\n  \"id\": 859611685\n}","body":"<p>The <code>experiment_id</code> is required in the URL, and the <code>description</code> is required in the body. Most variations will also want to include <code>js_component</code>, but an Original can use the default value of an empty string.</p>\n<p>Whenever possible, you should also include the correct <code>weight</code> and update the other variations so their weights sum to 10000.</p>\n<p>Note that newly created experiments come with two variations created automatically, so you may need to PUT a variation rather than POSTing it.</p>\n"},"4-delete":{"template":"sidebyside","title":"Delete a variation","anchor":"delete-variation","type":"DELETE","endpoint":"variations/859611685","endpoint_prefix":"variations/","endpoint_option":859611685,"body":"<p>Deleting a variation is the preferred way to remove it from an experiment. Directly editing the <code>variation_ids</code> property on experiments is not supported.</p>\n"}},"schedules":{"5-list":{"template":"sidebyside","endpoint":"experiments/1234/schedules","endpoint_prefix":"experiments/","endpoint_option":1234,"endpoint_suffix":"/schedules","type":"GET","title":"List schedules for experiment","anchor":"list-schedules-for-experiment","response":"[\n  {\n    \"status\": \"ACTIVE\",\n    \"start_time\": \"2015-01-01T08:00:00Z\",\n    \"stop_time\": null,\n    \"experiment_id\": 1234,\n    \"id\": 5678\n  },\n  {\n    \"status\": \"INACTIVE\",\n    \"start_time\": \"2015-01-01T08:00:00Z\",\n    \"stop_time\": \"2015-01-02T08:00:00Z\",\n    \"experiment_id\": 1234,\n    \"id\": 5677\n  },\n   {\n    \"status\": \"INACTIVE\",\n    \"start_time\": null,\n    \"stop_time\": \"2015-01-01T08:00:00Z\",\n    \"experiment_id\": 1234,\n    \"id\": 5676\n  }\n]","body":"<p>See a list containing the current schedule for an experiment as well as any previously created schedules. The current schedule will be marked <code>ACTIVE</code> and any previously created schedules will be marked <code>INACTIVE</code>.</p>\n"},"3-update":{"template":"sidebyside","endpoint":"schedules/1234","endpoint_prefix":"experiments/","endpoint_option":1234,"type":"PUT","title":"Update a schedule","anchor":"update-schedule","request":{"stop_time":"2015-01-02T08:00:00Z"},"response":"{\n  \"status\": \"ACTIVE\",\n  \"start_time\": \"2015-01-01T08:00:00Z\",\n  \"stop_time\": \"2015-01-02T08:00:00Z\",\n  \"experiment_id\": 5678,\n  \"id\": 1234\n}","body":"<p>Update a schedule. You must specify either a <code>start_time</code> or <code>stop_time</code>, or both. All times are in UTC and must be specified in the format <code>2015-01-01T08:00:00Z</code>.</p>\n"},"1-read":{"template":"sidebyside","endpoint":"schedules/1234","endpoint_prefix":"schedules/","endpoint_option":1234,"type":"GET","title":"Read a schedule","anchor":"read-schedule","fields":{"status":"Indicates whether this schedule is active for the experiment. Either `ACTIVE` or `INACTIVE`.","start_time":"Start time of the scheduled experiment in UTC, or `null`.","stop_time":"Stop time of the scheduled experiment in UTC, or `null`.","experiment_id":"ID of the scheduled experiment.","id":"ID of the schedule."},"response":"{\n  \"status\": \"ACTIVE\",\n  \"start_time\": \"2015-01-01T08:00:00Z\",\n  \"stop_time\": null,\n  \"experiment_id\": 5678,\n  \"id\": 1234\n}","body":"<p>Get data about a particular schedule, including the start time and stop time of the associated experiment.</p>\n"},"0-intro":{"template":"sidebyside","title":"Schedules","anchor":"schedules","body":"<p>Experiments can be scheduled to start or stop at a particular time. A <strong>Schedule</strong> is a specification of a start time, stop time, or both, associated with a particular experiment. To learn more about scheduling experiments, see the <a href=\"https://help.optimizely.com/hc/en-us/articles/200039845-Experiment-Scheduler\" target=\"_blank\">Experiment Scheduler</a>.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"experiments/1234/schedules","endpoint_prefix":"experiments/","endpoint_option":1234,"endpoint_suffix":"/schedules","type":"POST","title":"Create a schedule","anchor":"create-schedule","request":{"start_time":"2015-01-01T08:00:00Z"},"response":"{\n  \"status\": \"ACTIVE\",\n  \"start_time\": \"2015-01-01T08:00:00Z\",\n  \"stop_time\": null,\n  \"experiment_id\": 1234,\n  \"id\": 5678\n}","body":"<p>Create a schedule for an experiment. You must specify either a <code>start_time</code> or <code>stop_time</code>, or both. All times are in UTC and must be specified in the format <code>2015-01-01T08:00:00Z</code>. The created schedule will always be marked <code>ACTIVE</code>, and any previously created schedules will be marked as <code>INACTIVE</code>.</p>\n"},"4-delete":{"template":"sidebyside","endpoint":"schedules/1234","endpoint_prefix":"schedules/","endpoint_option":1234,"type":"DELETE","title":"Delete a schedule","anchor":"delete-schedule","body":"<p>Permanently delete a schedule.  If the schedule being deleted was marked as <code>ACTIVE</code>, the associated experiment will no longer be scheduled.</p>\n"}},"projects":{"5-list":{"template":"sidebyside","type":"GET","endpoint":"projects/","endpoint_prefix":"projects/","title":"List projects in account","anchor":"list-projects","response":"[\n  {\n    \"code_revision\": 8,\n    \"project_name\": \"My new project\",\n    \"exclude_disabled_experiments\": false,\n    \"ip_filter\": null,\n    \"ip_anonymization\": false,\n    \"created\": \"2014-04-14T23:09:03.429630Z\",\n    \"enable_force_variation\": false,\n    \"library\": \"jquery-1.6.4-trim\",\n    \"exclude_names\": null,\n    \"last_modified\": \"2014-05-21T23:03:06.968520Z\",\n    \"project_status\": \"Active\",\n    \"include_jquery\": true,\n    \"js_file_size\": 46176,\n    \"id\": 819000157,\n    \"account_id\": 555650815,\n    \"socket_token\": \"AABBCCDD~123456789\"\n    \"dcp_service_id\": 121234 \n  },\n  {\n    \"code_revision\": 12,\n    \"project_name\": \"My even newer project name\",\n    \"exclude_disabled_experiments\": true,\n    \"ip_filter\": \"1.2.3.4\",\n    \"ip_anonymization\": false,\n    \"created\": \"2014-04-16T21:33:34.408430Z\",\n    \"enable_force_variation\": true,\n    \"library\": \"jquery-1.6.4-trim\",\n    \"exclude_names\": null,\n    \"last_modified\": \"2014-06-10T22:12:21.707170Z\",\n    \"project_status\": \"Active\",\n    \"include_jquery\": false,\n    \"js_file_size\": 23693,\n    \"id\": 859720118,\n    \"account_id\": 555650815,\n    \"socket_token\": \"AABBCCDD~123456789\"\n    \"dcp_service_id\": null \n  }\n]","body":"<p>Get a list of all the projects in your account, with associated metadata.</p>\n"},"3-update":{"template":"sidebyside","endpoint":"projects/1234","endpoint_prefix":"projects/","endpoint_option":1234,"type":"PUT","anchor":"update-project","title":"Update a project","description":"Update a project's metadata","request":{"project_name":"My even newer project name"},"response":"{\n  \"id\": 859720118,\n  \"account_id\": 555650815,\n  \"code_revision\": 12,\n  \"project_name\": \"My even newer project name\",\n  \"project_status\": \"Active\",\n  \"created\": \"2014-04-16T21:33:34.408430Z\",\n  \"last_modified\": \"2014-06-10T22:12:21.707170Z\",\n  \"library\": \"jquery-1.6.4-trim\",\n  \"include_jquery\": false,\n  \"js_file_size\": 23693,\n  \"project_javascript\": \"someFunction = function () {\\n //Do cool reusable stuff \\n}\"\n  \"enable_force_variation\": false,\n  \"exclude_disabled_experiments\": false,\n  \"exclude_names\": null,\n  \"ip_anonymization\": false,\n  \"ip_filter\": \"1.2.3.4\",\n  \"socket_token\": \"AABBCCDD~123456789\",\n  \"dcp_service_id\": 121234\n}","body":"<h4 id=\"editable-fields\">Editable fields</h4>\n<ul>\n<li><code>project_status</code></li>\n<li><code>project_name</code></li>\n<li><code>include_jquery</code></li>\n<li><code>project_javascript</code></li>\n<li><code>enable_force_variation</code></li>\n<li><code>exclude_disabled_experiments</code></li>\n<li><code>exclude_names</code></li>\n<li><code>ip_anonymization</code></li>\n<li><code>ip_filter</code></li>\n<li><code>dcp_service_id</code></li>\n</ul>\n"},"1-read":{"template":"sidebyside","endpoint":"projects/1234/","endpoint_prefix":"projects/","endpoint_option":1234,"type":"GET","title":"Read a project","anchor":"read-project","fields":{"project_name":"The name of the project in Optimizely","project_status":"Can be `Active` or `Archived`","account_id":"The account the project is associated with","include_jquery":"Either `true` or `false`. If set to `true`, the recommended version (1.11.3) will be used.","library":"The prefered jQuery library you would like to use with your snippet. We support the following `jquery-1.6.4-full`, `jquery-1.6.4-trim`, `jquery-1.11.3-full`, and `jquery-1.11.3-trim`. If you do not want to include jQuery, set this field to `none` and `include_jquery` to `false`.","project_javascript":"The JavaScript code which runs before Optimizely on all pages, **regardless** of whether or not there is a running experiment.","enable_force_variation":"Set to `true` to enable the [force variation parameter](https://help.optimizely.com/hc/en-us/articles/202480860#force_variations)","exclude_disabled_experiments":"Set to `true` to [remove paused and draft experiments](https://help.optimizely.com/hc/en-us/articles/202480860#draft_pause) from the snippet","exclude_names":"Set to `true` to [mask descriptive names](https://help.optimizely.com/hc/en-us/articles/202480860#masking_descriptive_names)","ip_filtering":"The same string that you'll find in Optimizely under Project Settings > IP Filtering, or `null` if it's not set.","socket_token":"The token used to identify your mobile app to Optimizely","dcp_service_id":"The ID of the [Dynamic Customer Profile Service](/rest/reference#dcp_services) associated with this project."},"response":"{\n  \"id\": 859720118,\n  \"account_id\": 555650815,\n  \"code_revision\": 12,\n  \"project_name\": \"My even newer project name\",\n  \"project_status\": \"Active\",\n  \"created\": \"2014-04-16T21:33:34.408430Z\",\n  \"last_modified\": \"2014-06-10T22:12:21.707170Z\",\n  \"library\": \"jquery-1.6.4-trim\",\n  \"include_jquery\": false,\n  \"js_file_size\": 23693,\n  \"project_javascript\": \"someFunction = function () {\\n //Do cool reusable stuff \\n}\"\n  \"enable_force_variation\": false,\n  \"exclude_disabled_experiments\": false,\n  \"exclude_names\": null,\n  \"ip_anonymization\": false,\n  \"ip_filter\": \"1.2.3.4\",\n  \"socket_token\": \"AABBCCDD~123456789\",\n  \"dcp_service_id\": 121234\n}","body":"<p>Get metadata for a single project.</p>\n"},"0-intro":{"template":"sidebyside","title":"Projects","anchor":"projects","body":"<p>A project is a collection of experiments, goals, and audiences. Each project has an associated JavaScript file to include on the page.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"projects/","endpoint_prefix":"projects/","type":"POST","title":"Create a project","anchor":"create-project","request":{"project_name":"My even newer project name"},"response":"{\n  \"id\": 859720118,\n  \"account_id\": 555650815,\n  \"code_revision\": 12,\n  \"project_name\": \"My even newer project name\",\n  \"project_status\": \"Active\",\n  \"created\": \"2014-04-16T21:33:34.408430Z\",\n  \"last_modified\": \"2014-06-10T22:12:21.707170Z\",\n  \"library\": \"jquery-1.6.4-trim\",\n  \"include_jquery\": false,\n  \"js_file_size\": 23693,\n  \"project_javascript\": null,\n  \"enable_force_variation\": false,\n  \"exclude_disabled_experiments\": false,\n  \"exclude_names\": null,\n  \"ip_anonymization\": false,\n  \"ip_filter\": \"\",\n  \"socket_token\": \"AABBCCDD~123456789\",\n  \"dcp_service_id\": null\n}","body":"<p>Create a new project in your account. The <code>project_name</code> is required in the request. The <a href=\"#update-project\">other editable arguments</a> are all optional.</p>\n"},"4-delete":{"template":"sidebyside","title":"Delete a project","anchor":"delete-project","body":"<p>Deleting projects is not supported.</p>\n"}},"overview":{"6-changelog":{"template":"sidebyside","title":"Change Log","anchor":"changes","body":"<ul>\n<li><strong>August 24th, 2015</strong>: We&#39;ve added the <a href=\"#grant-types\">authorization code</a> grant type with refresh tokens to our OAuth 2.0 support.</li>\n<li><strong>May 11th, 2015</strong>: You can now <a href=\"#lists\">upload targeting lists</a> via the REST API.</li>\n<li><strong>March 27th, 2015</strong>: You can now retrieve statistics computed by <a target=\"_blank\" href=\"https://help.optimizely.com/hc/en-us/articles/200039895\">Optimizely Stats Engine</a> via the API.</li>\n<li><strong>March 19th, 2015</strong>: We have added <a href=\"#oauth\">OAuth 2.0 support</a> so third party applications can connect with the REST API on behalf of an Optimizely customer.</li>\n<li><strong>February 24th, 2015</strong>: You can now <a href=\"#dimensions\">create and edit dimensions</a> via the REST API.</li>\n<li><strong>February 23rd, 2015</strong>: Replace &quot;Browser&quot; condition type with &quot;Browser / Version&quot;, &quot;Device&quot;, and &quot;Platform / OS&quot; conditions. For more information see <a href=\"/rest/conditions\">Audience Conditions</a>. At this time &quot;Browser&quot; conditions are <em>deprecated</em> but will continue to work until further notice.</li>\n<li><strong>February 19th, 2015</strong>: You can now <a href=\"#schedules\">schedule experiments</a> using the REST API.</li>\n<li><strong>September 26th, 2014</strong>: We have added an interactive mode to our REST API so you can test GET requests directly from the documentation.</li>\n<li><strong>September 10th, 2014</strong>: You can now <a href=\"#get-results\">get the results for experiments</a> via the API.</li>\n<li><strong>July 31st, 2014</strong>: Audiences now have a <code>segmentation</code> property that Platinum customers can toggle. See the section on <a href=\"#audiences\">Audiences</a> for more information.</li>\n<li><strong>July 30th, 2014</strong>: You can now <a href=\"#create-goal\">create click and custom event goals</a> via the API.</li>\n<li><strong>July 28th, 2014</strong>: You can now get a shareable link to an experiment&#39;s results page when you get <a href=\"#read-experiment\">read the experiment</a> via the API.</li>\n<li><strong>July 22nd, 2014</strong>: You can now create and edit <a href=\"/rest/conditions\">audiences using conditions</a> via the API.</li>\n<li><strong>July 22nd, 2014</strong>: You can now edit overall traffic allocation by <a href=\"#update-experiment\">updating an experiment</a>&#39;s <code>percentage_included</code> field.</li>\n<li><strong>July 18th, 2014</strong>: We fixed two known issues:<ul>\n<li>You can now create many variations on an experiment asynchronously. Previously, creating variations in parallel could cause them to become &quot;detached&quot; from the experiment.</li>\n<li>You can once again update URL conditions for an experiment. This was temporarily unavailable.</li>\n</ul>\n</li>\n<li><strong>June 30, 2014</strong>: Added &quot;Known Issues&quot; to the Experiment and Variation sections.</li>\n<li><strong>June 27, 2014</strong>: Added documentation on Goals</li>\n</ul>\n"},"3-responses":{"template":"sidebyside","title":"Response Codes","anchor":"response-codes","body":"<p>If you send a request and it succeeds, the response will include data in the JSON body and <code>200 OK</code> (GET), <code>201 CREATED</code> (POST), or <code>202 ACCEPTED</code> (PUT), or <code>204 NO CONTENT</code> (DELETE) as the HTTP response code.</p>\n<p>If the request fails, we&#39;ll return one of the following error codes:</p>\n<ul>\n<li><p><strong>400: Bad Request</strong> can happen if your request was not sent in valid JSON. It might help to specify a <code>Content-Type: application/json</code> header in your request. If you sent valid JSON, the error may also reference specific fields that were invalid.</p>\n</li>\n<li><p><strong>401 Unauthorized</strong> if your API token was missing or included in the body rather than the header.</p>\n</li>\n<li><p><strong>403 Forbidden</strong> if you provided an API token but it was invalid or revoked, or if you don&#39;t have read/write access to the entity you&#39;re trying to view/edit.</p>\n</li>\n<li><p><strong>404 Not Found</strong> if the <code>id</code> used in the request was inaccurate or you didn&#39;t have permission to view/edit it.</p>\n</li>\n<li><p><strong>429 Too Many Requests</strong> if you hit a rate limit for the API. If you receive this response, we recommend waiting at least 60 seconds before re-attempting the request.</p>\n</li>\n<li><p><strong>503 Service Unavailable</strong> if the API is overloaded or down for maintenance. If you receive this response, we recommend waiting at least 60 seconds before re-attempting the request.</p>\n</li>\n</ul>\n"},"1-authentication":{"template":"sidebyside","title":"Authentication","anchor":"authentication","body":"<p>Every API request needs to be authenticated. To authenticate, you can generate an API token described in the <a href=\"/token\">Token based authentication section</a>. </p>\n<p>You can also use OAuth 2.0 to authenticate API calls. Please refer to <a href=\"#oauth\">OAuth 2.0 documentation</a>.</p>\n"},"0-intro":{"template":"sidebyside","title":"Overview","anchor":"overview","body":"<p>This page is a full reference for the REST API, including a list of all available endpoints. It also includes basic instructions on how to form requests and consume responses. Use the navigation on the left to find the documentation most relevant to you.</p>\n<p>If you&#39;d like a quick introduction to the REST API, refer to the <a href=\"/rest/getting-started\">Getting started</a> guide and\ncheck out our <a href=\"/rest/faqs\">FAQs</a>.</p>\n<p>If you have any questions, please contact <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a> for help.</p>\n"},"2-requests":{"template":"sidebyside","title":"Request Types","anchor":"request-types","curl":"// Read one experiment\nGET experiments/123\n\n// Read all the experiments under a project\nGET projects/456/experiments/\n\n// Create an experiment\nPOST projects/456/experiments/\n\n// Update an experiment\nPUT experiments/123\n\n// Delete an experiment\nDELETE experiments/123","body":"<p>The endpoints below should be added on after the version in the API URL.</p>\n<h4 id=\"get\">GET</h4>\n<p><code>GET</code> requests retrieve an entity or list of entities. They are always read-only.</p>\n<p>To get a single entity, use its <code>id</code> in the URL. To get a list of all entities, leave it off.</p>\n<p>If the operation succeeds, the response will include the data in the body and a <code>200 OK</code> response code.</p>\n<h4 id=\"post\">POST</h4>\n<p>A <code>POST</code> requests creates an entity in Optimizely, relative to a certain parent (for example, an experiment within a project). The parent entity&#39;s <code>id</code> is provided in the URL, and the data for the entity being created is provided as JSON in the body.</p>\n<p>If the operation succeeds, the response will include the created entity as JSON in the body, including a new <code>id</code> argument, and a <code>201 CREATED</code> response code.</p>\n<h4 id=\"put\">PUT</h4>\n<p>A <code>PUT</code> request updates an entity. The <code>id</code> for the entity to update is provided in the URL, and the new data is provided in the body as JSON. Only the data that you&#39;re changing needs to be provided. Missing fields will keep their original values.</p>\n<p>If the operation succeeds, the response will include the data in the body and a <code>202 ACCEPTED</code> response code.</p>\n<h4 id=\"delete\">DELETE</h4>\n<p>A <code>DELETE</code> request removes an entity. The <code>id</code> for the entity to delete is provided in the URL, and no data is sent in the body.</p>\n<p>If the operation succeeds, the response will have a <code>204 NO CONTENT</code> response code.</p>\n"},"5-changes":{"template":"sidebyside","title":"Changes and Deprecation","anchor":"changes-deprecation","body":"<p>This API is still relatively new, and we expect to add new resources and properties frequently. You should treat the data shown below as a subset of what might return in an API response.</p>\n<p>For major changes to existing behavior, including removing functionality, we&#39;ll introduce a new version of the API and provide at least 3 months notice before deprecating an earlier version.</p>\n"}},"lists":{"5-list":{"template":"sidebyside","endpoint":"projects/456/targeting_lists/","endpoint_prefix":"projects/","endpoint_option":456,"endpoint_suffix":"/targeting_lists/","type":"GET","title":"List uploaded lists in project","anchor":"list-lists","response":"[\n  {\n      \"name\": \"List_1\",\n      \"description\": \"Description of List_1\",\n      \"list_type\": 2,\n      \"key_fields\": \"user_id\",\n      \"id\": 123,\n      \"project_id\": 456,\n      \"account_id\": 789,\n      \"format\": \"csv\"\n  },\n  {\n      \"name\": \"List_2\",\n      \"description\": \"Description of List_2\",\n      \"list_type\": 2,\n      \"key_fields\": \"user_id\",\n      \"id\": 124,\n      \"project_id\": 456,\n      \"account_id\": 789,\n      \"format\": \"csv\"\n  }\n]","body":"<p>Show all of the uploaded lists that have been uploaded to a project.</p>\n"},"3-update":{"template":"sidebyside","endpoint":"targeting_lists/123/","endpoint_prefix":"targeting_lists/","endpoint_option":123,"type":"PUT","title":"Update an uploaded list","anchor":"update-list","request":{"name":"List_1","description":"New description of List 1","list_type":2,"key_fields":"user_id","list_content":"uid1,uid2,uid3,uid4,uid5","format":"csv"},"response":"{\n    \"name\": \"List_1\",\n    \"description\": \"New description of List_1\",\n    \"list_type\": 2,\n    \"key_fields\": \"user_id\",\n    \"id\": 123,\n    \"project_id\": 456,\n    \"account_id\": 789,\n    \"format\": \"csv\"\n}","body":"<p>Overwrite the uploaded list with the provided <code>id</code>. Required arguments are identical to creating a new uploaded list.</p>\n<p>Note that <code>name</code> and <code>format</code> cannot be modified.</p>\n"},"1-read":{"template":"sidebyside","endpoint":"targeting_lists/123/","endpoint_prefix":"targeting_lists/","endpoint_option":123,"type":"GET","title":"Read an uploaded list","anchor":"read-list","fields":{"name":"A unique, human-readable name for the uploaded list","description":"A brief description of the uploaded list","list_type":"The type of uploaded list (`1` = cookies, `2` = query parameters, `3` = zip codes)","key_fields":"A comma-separated list of cookies (if <b>list&#95;type</b> is `1`) or query parameters (if <b>list&#95;type</b> is `2`) to target on","id":"The unique identifier for the uploaded list","project_id":"The unique identifier for the parent Optimizely project","account_id":"The unique identifier for the parent Optimizely account","format":"Format of the uploaded list (should always be a `csv` file)"},"response":"{\n    \"name\": \"List_1\",\n    \"description\": \"Description of List_1\",\n    \"list_type\": 2,\n    \"key_fields\": \"user_id\",\n    \"id\": 123,\n    \"project_id\": 456,\n    \"account_id\": 789,\n    \"format\": \"csv\"\n}","body":"<p>Get metadata for a single uploaded list.</p>\n"},"0-intro":{"template":"sidebyside","title":"Uploaded lists","anchor":"lists","body":"<p>An uploaded list is a set of user identifiers that you have uploaded to Optimizely. Membership in a targeting list can be used to define an Optimizely audience, so you can target experiments only to a particular set of users.</p>\n<p>We currently support three targeting list formats: cookies, query parameters and zip codes.</p>\n<p>Uploaded lists are an Enterprise feature and may not be available for your Optimizely account. If you are uncertain whether you have access or would like to request access for development purposes, please email <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"projects/456/targeting_lists/","endpoint_prefix":"projects/","endpoint_option":456,"endpoint_suffix":"/targeting_lists","type":"POST","title":"Create an uploaded list","anchor":"create-list","request":{"name":"List_1","description":"Description of List 1","list_type":2,"key_fields":"user_id","list_content":"uid1,uid2,uid3,uid4","format":"csv"},"response":"{\n    \"name\": \"List_1\",\n    \"description\": \"Description of List_1\",\n    \"list_type\": 2,\n    \"key_fields\": \"user_id\",\n    \"id\": 123,\n    \"project_id\": 456,\n    \"account_id\": 789,\n    \"format\": \"csv\"\n}","body":"<p>Create an uploaded list with the given name and comma-separated set of values.</p>\n<p><code>name</code> must be unique across all lists defined in the current project, and can only contain characters, numbers, hyphens, and underscores.</p>\n<p><code>list_type</code> must take one of the following values:</p>\n<ul>\n<li><code>1</code> Cookie</li>\n<li><code>2</code> Query string</li>\n<li><code>3</code> Zip code</li>\n</ul>\n<p><code>list_content</code> should contain the content of the list in comma-separated format and <code>format</code> must be set to <code>csv</code>.</p>\n<p>Currently we limit list size to 5 MB and row length to 100 characters.  If you would like to upload a list larger than 5 MB, we recommended that you split it into several lists and then use <a href=\"https://help.optimizely.com/hc/en-us/articles/200039685#adding_conditions\">&quot;OR&quot; conditions</a> to target users who are in any of those lists.</p>\n<p>All fields are required with the exception of <code>description</code>.</p>\n"},"4-delete":{"template":"sidebyside","endpoint":"targeting_lists/123/","endpoint_prefix":"targeting_lists/","endpoint_option":123,"type":"DELETE","title":"Delete an uploaded list","anchor":"delete-list","body":"<p>Permanently deletes the given uploaded list.</p>\n"}},"goals":{"6-list":{"template":"sidebyside","endpoint":"projects/1234/goals/","endpoint_prefix":"projects/","endpoint_option":1234,"endpoint_suffix":"/goals","type":"GET","anchor":"list-goals","title":"List goals in project","response":"[\n  {\n    // ... fields omitted\n    \"id\": 1234,\n    \"title\": \"Add to cart clicks\",\n    \"project_id\": 1234\n  },\n  {\n    // ... fields omitted\n    \"id\": 860850648,\n    \"title\": \"Views to homepage\",\n    \"project_id\": 1234\n  }\n]","body":"<p>Get a list of all the goals in a project. The <code>project_id</code> in the URL is required.</p>\n"},"4-update":{"template":"sidebyside","endpoint":"goals/1234","endpoint_prefix":"goals/","endpoint_option":1234,"type":"PUT","title":"Update a goal","anchor":"update-goal","request":{"title":"Updated goal name"},"response":"{\n  \"id\": 1234,\n  // ... (other fields omitted)\n  \"title\": \"Updated goal name\"\n}","body":"<h4 id=\"editable-fields\">Editable fields</h4>\n<ul>\n<li><code>archived</code></li>\n<li><code>description</code></li>\n<li><code>experiment_ids</code></li>\n<li><code>goal_type</code></li>\n<li><code>selector</code></li>\n<li><code>target_to_experiments</code></li>\n<li><code>target_urls</code></li>\n<li><code>target_url_match_types</code></li>\n<li><code>title</code></li>\n<li><code>urls</code></li>\n<li><code>url_match_types</code></li>\n</ul>\n<p>Please note that <a href=\"https://help.optimizely.com/hc/en-us/articles/200039915-Goals-Measure-the-success-of-your-experiment#retroactive_goals\">old goals cannot be edited</a>, and will have <code>is_editable</code> set to <code>false</code>.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"projects/1234/goals/","endpoint_prefix":"projects/","endpoint_option":1234,"endpoint_suffix":"/goals/","type":"POST","anchor":"create-goal","title":"Create a goal","request":{"title":"Add to cart clicks","goal_type":0,"selector":"div.cart > button"},"response":"{\n  \"is_editable\": false,\n  \"target_to_experiments\": null,\n  \"id\": 860850647,\n  \"target_urls\": [],\n  \"title\": \"Add to cart clicks\",\n  \"archived\": true,\n  \"description\": \"\",\n  \"event\": null,\n  \"url_match_types\": [],\n  \"project_id\": 547944643,\n  \"goal_type\": 0,\n  \"experiment_ids\": [],\n  \"selector\": null,\n  \"created\": \"2014-04-20T18:20:10.991600Z\",\n  \"last_modified\": \"2014-08-17T19:32:11.006794Z\",\n  \"target_url_match_types\": [],\n  \"urls\": []\n}","body":"<p>For all goals, the <code>title</code> and <code>goal_type</code> are required. For each goal type, other fields are required:</p>\n<ul>\n<li>Click goals need a <code>selector</code> and a boolean value for <code>target_to_experiments</code> to be set. If it&#39;s true, the goal will run on the same pages as the experiment it&#39;s it attached to. If it&#39;s false, you should also provide <code>target_urls</code> and <code>target_url_match_types</code>.</li>\n<li>Pageview goals need a list of <code>urls</code> and <code>url_match_types</code> and will match nowhere if the lists are empty.</li>\n<li>Custom event goals need an <code>event</code> name.</li>\n</ul>\n"},"0-intro":{"template":"sidebyside","title":"Goals","anchor":"goals","body":"<p>Goals are the metrics used to decide which variation in an experiment is the winner. Like audiences, goals are defined at the project level and can be reused across multiple experiments within a project. Each goal is tracked for each experiment it&#39;s associated with. An experiment with no goals will still run, but its results page will be empty.</p>\n"},"1-read":{"template":"sidebyside","endpoint":"goals/543071054/","endpoint_prefix":"goals/","endpoint_option":543071054,"type":"GET","title":"Read a goal","anchor":"read-goal","response":"{\n  \"is_editable\": null,\n  \"target_to_experiments\": true,\n  \"archived\": false,\n  \"description\": \"Confirming if the navigation is used more or less. #nav\",\n  \"id\": 543071054,\n  \"target_urls\": [],\n  \"title\": \"Navigation button clicks\",\n  \"event\": \"nav_button_clicks\",\n  \"url_match_types\": [],\n  \"project_id\": 547944643,\n  \"goal_type\": 0,\n  \"experiment_ids\": [\n    561450169\n  ],\n  \"selector\": \".portal-navigation > button\",\n  \"created\": \"2014-01-09T23:47:51.042343Z\",\n  \"last_modified\": \"2014-12-08T12:33:27.045543Z\",\n  \"target_url_match_types\": [],\n  \"urls\": []\n}","body":"<p>Optimizely has several different goal types, as explained <a href=\"https://help.optimizely.com/hc/en-us/articles/200039915-Goals-Overview\" target=\"_blank\">in our knowledge base</a>. Depending on the goal type, different fields in the response are important.</p>\n<h4 id=\"common-properties\">Common properties</h4>\n<p>All goals have a unique <code>id</code> and a <code>title</code> that shows up in the Optimizely editor and results page. They also have a <code>goal_type</code> with one of the following integer values:</p>\n<ul>\n<li><code>0</code> Click</li>\n<li><code>1</code> Custom event</li>\n<li><code>2</code> Engagement</li>\n<li><code>3</code> Pageviews</li>\n<li><code>4</code> Revenue</li>\n</ul>\n<p>Pageview, click and custom event goals can be created via the API. Engagement and revenue goals are created automatically with each project and can be added or removed from experiments.</p>\n<p>Goals can also be designated as <code>addable</code>, where <code>true</code> means they&#39;ll show up in the &quot;Saved Goals&quot; list for reuse across experiments and <code>false</code> means they&#39;ll be hidden from the list.</p>\n<p>Goals with <code>is_editable</code> set to <code>true</code> can be updated using a PUT request. <a href=\"https://help.optimizely.com/hc/en-us/articles/200039915-Goals-Measure-the-success-of-your-experiment#retroactive_goals\">Old goals cannot be edited</a>, and will have this field set to <code>false</code>.</p>\n<h4 id=\"click-goals\">Click goals</h4>\n<p><a href=\"https://help.optimizely.com/hc/en-us/articles/200039905\" target=\"_blank\">Click goals</a> track clicks on any element matched by the jQuery <code>selector</code>.</p>\n<p>If <code>target_to_experiments</code> is true, the goal will use the exact same targeting conditions as the experiment as a whole. If it&#39;s false, then the goal will be measured on the pages defined in <code>target_urls</code> according to <code>target_url_match_types</code>.</p>\n<h4 id=\"pageview-goals\">Pageview goals</h4>\n<p><a href=\"https://help.optimizely.com/hc/en-us/articles/200090069\">Pageview goals</a> track the number of visitors to the pages specified in <code>urls</code>, as specified by <code>url_match_types</code>.</p>\n<p>The <code>url_match_types</code> can use the following integer values:</p>\n<ul>\n<li><code>1</code> Exact</li>\n<li><code>2</code> Regular expression</li>\n<li><code>3</code> Simple</li>\n<li><code>4</code> Substring</li>\n</ul>\n<h4 id=\"custom-event-goals\">Custom event goals</h4>\n<p><a href=\"https://help.optimizely.com/hc/en-us/articles/200039925\" target=\"_blank\">Custom event goals</a> allow you to capture and report on visitor actions or events that might not be related exclusively to clicks or page views. The event to track is defined in <code>event</code>.</p>\n"},"3-add":{"template":"sidebyside","title":"Add or remove a goal","anchor":"add-remove-goal","body":"<p>To add a goal to an experiment, you&#39;ll need push that experiment&#39;s <code>id</code> onto the <code>experiment_ids</code> list.</p>\n<p>To remove a goal, remove the experiment from the goal&#39;s <code>experiment_ids</code> list.</p>\n"},"5-delete":{"template":"sidebyside","type":"DELETE","endpoint":"goals/1234","endpoint_prefix":"goals/","endpoint_option":1234,"title":"Delete a goal","anchor":"delete-goal","body":"<p>Delete a goal and remove it from <strong>all associated experiments</strong>. Deleting a goal will also remove it from past experiments, and you won&#39;t be able to see results for that goal on those experiments.</p>\n<p>It&#39;s usually better to <a href=\"#add-remove-goal\">remove a goal</a> from an experiment than delete it directly.</p>\n"}},"experiments":{"4-delete":{"template":"sidebyside","endpoint":"experiments/15","endpoint_prefix":"experiments/","endpoint_option":15,"type":"DELETE","title":"Delete an experiment","anchor":"delete-experiment","body":"<p>Sending DELETE on an experiment will <strong>permanently delete the experiment and its results</strong>.</p>\n<p>In most cases, it&#39;s safer to archive the experiment by sending a <code>PUT</code> request with <code>{&quot;status&quot;: &quot;Archived&quot;}</code>. This will remove the experiment from the Optimizely snippet and hide it in the project dashboard, but still leave it available under &quot;Archived Experiments&quot; for viewing and recovery later.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"projects/1234/experiments/","endpoint_prefix":"projects/","endpoint_option":1234,"endpoint_suffix":"/experiments/","type":"POST","anchor":"create-experiment","title":"Create a new experiment","request":{"edit_url":"https://mysite.com/products/","description":"My Experiment Name"},"response":"{\n  \"id\": 791495413,\n  \"project_id\": 1234,\n  // ... (other fields omitted)\n  \"percentage_included\": 10000,\n  \"is_multivariate\": false,\n  \"variation_ids\": [\n    800227656,\n    800227657\n  ],\n  \"status\": \"Not started\",\n  \"url_conditions\": [\n    {\n      \"index\": 0,\n      \"match_type\": \"simple\",\n      \"created\": \"2014-04-12T19:10:53.806640Z\",\n      \"value\": \"https://mysite.com/products\",\n      \"last_modified\": \"2014-04-12T19:10:53.806650Z\",\n      \"negate\": false\n    }\n  ],\n  \"description\": \"My Experiment Name\",\n  \"activation_mode\": \"immediate\",\n  \"custom_css\": \"\",\n  \"custom_js\": \"\",\n  \"experiment_type\": \"ab\",\n}","body":"<p>The <code>project_id</code> is required in the URL, and the <code>description</code> and <code>edit_url</code> are required in the body. The <a href=\"#update-experiment\">other editable arguments</a> are all optional.</p>\n<p>When you create an experiment, Optimizely will also fill in associated data by default. These defaults mimic the behavior of Optimizely&#39;s editor and include:</p>\n<ul>\n<li>Two variations in <code>variation_ids</code> named &quot;Original&quot; and &quot;Variation #1&quot;. The default variations have 50% traffic each and no code.</li>\n<li>One URL targeting condition in <code>url_conditions</code>. By default, your experiment is targeted to the <code>edit_url</code> with a simple match.</li>\n<li>Traffic allocated to 100% in <code>percentage_included</code>. Traffic is measured in basis points. Divide by 100 to get a percentage.</li>\n<li>A <code>status</code> of &quot;Not started&quot;, meaning the experiment will not be running initially.</li>\n<li>Immediate <code>activation_mode</code>, rather than manual.</li>\n<li>The <code>experiment_type</code> will be a normal A/B test, rather than a multivariate or multipage test.</li>\n</ul>\n"},"0-intro":{"template":"sidebyside","title":"Experiments","anchor":"experiments","body":"<p>An A/B experiment is a set of rules for matching visitors to content and recording their conversions. Experiments are the hub that connect several other models:</p>\n<ul>\n<li><strong>Goals</strong> measure conversions and determine a winner.</li>\n<li><strong>Audiences</strong> determine which visitors will see an experiment.</li>\n<li><strong>Variations</strong> define the code that should be applied on a page to change the experience for a visitor, and the percentage of visitors who should see that code.</li>\n</ul>\n<p>A multivariate experiment also has <strong>Sections</strong>. A section is a collection of variations that all manipulate the same feature of the page.</p>\n<p>A multipage experiment adds <strong>Pages</strong>, which manipulate different URLs on your site.</p>\n"},"1-read":{"template":"sidebyside","endpoint":"experiments/15/","endpoint_prefix":"experiments/","endpoint_option":15,"type":"GET","title":"Read an experiment","anchor":"read-experiment","fields":{"id":"The unique identifier for the experiment","project_id":"The project the experiment was created in.","variation_ids":"A list of variations in the experiment. A basic A/B test has two variations.","edit_url":"The page that will show up in the Optimizely editor.","description":"The name that will show up in the Optimizely dashboard and editor.","display_goal_order_lst":"List of goal IDs representing the goals applicable to the experiment.","primary_goal_id":"The ID of the primary goal for the experiment.","details":"The description or hypothesis for an experiment.","custom_css":"CSS which is applied to all the variations in the experiment, including the Original. Learn more [here](https://help.optimizely.com/hc/en-us/articles/200039855#experiment_css).","custom_js":"JavaScript code which runs before variation code for all the variations in the experiment, including the Original. Learn more [here](https://help.optimizely.com/hc/en-us/articles/200039855#experiment_javascript).","status":"A `Running` experiment will be live for visitors. A `Paused` or `Not started` experiment will not. `Archived` experiments will be hidden in Optimizely.","url_conditions":"The pages where an experiment will run. For more details, see our article on <a href=\"https://help.optimizely.com/hc/en-us/articles/200040835-URL-Targeting\" target=\"_blank\">URL Targeting</a>. This property is now editable through the API. URL conditions are objects with these properties:\n\n- **match_type**: default is `simple`, can also be `regex`, `exact`, or `substring`\n\n- **value**: the URL string to match\n\n- **negate**: default is `false`, setting it to `true` will exclude the URL\n","percentage_included":"The percentage of your visitors that should see the experiment, measured in basis points. 100 basis points = 1% traffic.","activation_mode":"Can be `immediate`, `manual` or 'conditional', see <a href=\"https://help.optimizely.com/hc/en-us/articles/200039765-Activation-Mode\" target=\"_blank\">Activation Mode</a>.","conditional_code":"The JavaScript condition or function used to activate the experiment. Learn more [here](https://help.optimizely.com/hc/en-us/articles/200040225-Activation-Mode-Activating-an-experiment-dynamically-after-a-page-has-loaded#conditional).","experiment_type":"A normal A/B test is `ab` but this could also be `multivariate` or `multipage`. See <a href=\"https://help.optimizely.com/hc/en-us/articles/200039785-Experiment-Type-Overview\" target=\"_blank\">Experiment Type Overview</a>.","shareable_results_link":"A link that anyone can use to see your experiment's results, whether or not they're logged into Optimizely.","audience_ids":"List of IDs of all audiences the experiment is targeted at."},"response":"{\n  \"id\": 791495413,\n  \"percentage_included\": 10000,\n  \"display_goal_order_lst\": [],\n  \"is_multivariate\": false,\n  \"project_id\": 754864960,\n  \"variation_ids\": [\n    800227656,\n    800227657\n  ],\n  \"status\": \"Not started\",\n  \"url_conditions\": [\n    {\n      \"index\": 0,\n      \"match_type\": \"simple\",\n      \"created\": \"2014-04-12T19:10:53.806640Z\",\n      \"value\": \"http://blog.optimizely.com/2014/04/11/10-reasons-why-your-agency-should-offer-optimization/\",\n      \"last_modified\": \"2014-04-12T19:10:53.806650Z\",\n      \"negate\": false\n    }\n  ],\n  \"description\": \"Wordpress: 10 Reasons Why Your Agency Should Offer Optimization \",\n  \"last_modified\": \"2014-04-12T19:10:53.806650Z\",\n  \"activation_mode\": \"immediate\",\n  \"details\": \"Experiment to test out blog post.\",\n  \"custom_css\": \"\",\n  \"created\": \"2014-04-12T19:10:53.588450Z\",\n  \"custom_js\": \"\",\n  \"primary_goal_id\": null,\n  \"experiment_type\": \"ab\",\n  \"shareable_results_link\": \"https://www.optimizely.com/results?experiment_id=791495413&token=fh3lk2hrlk\",\n  \"edit_url\": \"http://blog.optimizely.com/2014/04/11/10-reasons-why-your-agency-should-offer-optimization/\",\n  \"audience_ids\": []\n}","body":"<p>Get metadata for a single experiment.</p>\n"},"3-update":{"template":"sidebyside","endpoint":"experiments/15","endpoint_prefix":"experiments/","endpoint_option":15,"type":"PUT","title":"Update an experiment","anchor":"update-experiment","request":{"status":"Running"},"response":"{\n  \"id\": 791495413,\n  // ... (other fields omitted)\n  \"status\": \"Running\"\n}","body":"<h4 id=\"editable-fields\">Editable fields</h4>\n<ul>\n<li><code>audience_ids</code> (add or remove an audience ID here to change the experiment&#39;s targeting)</li>\n<li><code>activation_mode</code></li>\n<li><code>description</code></li>\n<li><code>edit_url</code></li>\n<li><code>status</code> (send &quot;Running&quot; to start an experiment and &quot;Paused&quot; to stop)</li>\n<li><code>custom_css</code></li>\n<li><code>custom_js</code></li>\n<li><code>percentage_included</code></li>\n<li><code>url_conditions</code></li>\n</ul>\n<p>We don&#39;t currently support creating or updating multivariate or multipage tests via the API.</p>\n"},"5-list":{"template":"sidebyside","endpoint":"projects/1234/experiments/","endpoint_prefix":"projects/","endpoint_option":1234,"endpoint_suffix":"/experiments/","type":"GET","title":"List experiments in project","anchor":"list-experiments","response":"[\n  {\n    \"id\": 15,\n    \"project_id\": 1234,\n    // ... (other fields omitted)\n    \"variation_ids\": [115, 210, 215],\n    \"edit_url\": \"https://mysite.com/products/\",\n    \"status\": \"Not started\"\n  },\n  {\n    \"id\": 16,\n    \"project_id\": 1234,\n    // ... (other fields omitted)\n    \"variation_ids\": [216, 217, 218],\n    \"edit_url\": \"https://mysite.com/cart/\",\n    \"status\": \"Running\"\n  },\n]","body":"<p>Get a list of all the experiments in a project.</p>\n"}},"dimensions":{"4-delete":{"template":"sidebyside","endpoint":"dimensions/1234","endpoint_prefix":"dimensions/","endpoint_option":15,"type":"DELETE","title":"Delete a dimension","anchor":"delete-dimension","body":"<p>Permanently delete a dimension. By taking this action, any audiences using this dimension will stop getting traffic, and results associated with this dimension will be permanently deleted.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"projects/1234/dimensions","endpoint_prefix":"projects/","endpoint_option":1234,"endpoint_suffix":"/dimensions","type":"POST","anchor":"create-dimension","title":"Create a dimension","request":{"name":"My Dimension","client_api_name":"my_dimension_api_name","description":"Description of my dimension"},"response":"{\n  \"name\": \"My Dimension\",\n  \"last_modified\": \"2015-01-01T00:00:00.000000Z\",\n  \"client_api_name\": \"my_dimension_api_name\",\n  \"project_id\": 1234,\n  \"id\": 5678,\n  \"description\": \"Description of my dimension\"\n}","body":"<p>Create a new dimension with the specified <code>name</code>. The <code>client_api_name</code> and <code>description</code> fields are optional. If there is an existing dimension with a duplicate <code>name</code> or <code>client_api_name</code> the API will return a 400 error.</p>\n"},"0-intro":{"template":"sidebyside","title":"Dimensions","anchor":"dimension","body":"<p>Dimensions are attributes of visitors to your website or mobile app, such as demographic data, behavioral characteristics, or any other information particular to a visitor. Dimensions can be used to construct audiences and segment experiment results.</p>\n<p>The REST API allows you to create, edit, or delete dimensions. If you want to track visitor data for a dimension you must use a client-side API (for websites, use the <a target=\"_blank\" href=\"/javascript/#dimensions\">JavaScript API</a>). To learn more about dimensions, see <a target=\"_blank\" href=\"https://help.optimizely.com/hc/en-us/articles/200040865-Dimensions-Capture-visitor-data-through-the-API\">Dimensions: Capture visitor data through the API</a>.</p>\n"},"1-read":{"template":"sidebyside","endpoint":"dimensions/1234/","endpoint_prefix":"dimensions/","endpoint_option":1234,"type":"GET","title":"Read a dimension","anchor":"read-dimension","fields":{"name":"Name of the dimension.","last_modified":"Time when the dimension was last modified, in UTC.","client_api_name":"A unique name to refer to this dimension when tracking data in a client-side API call.","id":"The unique identifier for the dimension.","description":"A description of the dimension."},"response":"{\n  \"name\": \"My Dimension\",\n  \"last_modified\": \"2015-01-01T00:00:00.000000Z\",\n  \"client_api_name\": \"my_dimension_api_name\",\n  \"project_id\": 5678,\n  \"id\": 1234,\n  \"description\": \"Description of my dimension.\"\n}","body":"<p>Get metadata for a single dimension.</p>\n"},"3-update":{"template":"sidebyside","endpoint":"dimensions/1234","endpoint_prefix":"dimensions/","endpoint_option":1234,"type":"PUT","title":"Update a dimension","anchor":"update-dimension","request":{"description":"A new description of my dimension"},"response":"{\n  \"name\": \"My Dimension\",\n  \"last_modified\": \"2015-01-01T00:00:00.000000Z\",\n  \"client_api_name\": \"my_dimension_api_name\",\n  \"project_id\": 5678,\n  \"id\": 1234,\n  \"description\": \"A new description of my dimension\"\n}","body":"<p>Update the <code>name</code>, <code>client_api_name</code>, or <code>description</code> of an existing dimension.</p>\n"},"5-list":{"template":"sidebyside","endpoint":"projects/1234/dimensions/","endpoint_prefix":"projects/","endpoint_option":1234,"endpoint_suffix":"/dimensions/","type":"GET","title":"List dimensions in project","anchor":"list-dimensions","response":"[\n  {\n    \"name\": \"My Dimension 1\",\n    \"last_modified\": \"2015-01-01T00:00:00.000000Z\",\n    \"client_api_name\": \"my_dimension_1\",\n    \"project_id\": 1234,\n    \"id\": 5678,\n    \"description\": \"\"\n  },\n  {\n    \"name\": \"My Dimension 2\",\n    \"last_modified\": \"2015-01-02T00:00:00.000000Z\",\n    \"client_api_name\": \"my_dimension_2\",\n    \"project_id\": 1234,\n    \"id\": 5679,\n    \"description\": \"\"\n  },\n  {\n    \"name\": \"Test Dimension 3\",\n    \"last_modified\": \"2015-01-03T00:00:00.000000Z\",\n    \"client_api_name\": \"my_dimension_3\",\n    \"project_id\": 1234,\n    \"id\": 5680,\n    \"description\": \"\"\n  }\n]","body":"<p>Get a list of all the custom dimensions in a project.</p>\n"}},"dcpservices":{"4-delete":{"template":"sidebyside","type":"DELETE","endpoint":"dcp_services/567","endpoint_option":567,"title":"Delete a DCP Service","anchor":"delete-dpservice","body":"<p>Delete a DCP Service.  The <code>dcp_service_id</code> is required in the URL.</p>\n<p>This archives all files in the corresponding AWS account.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"dcp_services","endpoint_prefix":"/dcp_services/","type":"POST","title":"Create DCP Service","anchor":"create-dcpservice","request":{"name":"My DCP Service"},"response":"{\n  \"id\": 567,\n  \"account_id\": 123456,\n  \"archived\": false,\n  \"aws_access_key\": \"123423asfakedf12vh451234\",\n  \"aws_secret_key\": \"1234fake12341asdfas234zc\",\n  \"created\": \"2015-08-01T11:50:37.864010Z\",\n  \"last_modified\": \"2015-08-18T21:38:55.927670Z\",\n  \"name\": \"My DCP Service\",\n  \"s3_path\": \"dcp/567\"\n}","body":"<p>Create a new DCP Service under your account.</p>\n<h4 id=\"required-fields\">Required Fields</h4>\n<ul>\n<li><code>name</code></li>\n</ul>\n<div class=\"attention attention--warning push--bottom\">\n<em>NOTE:</em> The DCP Service is not yet associated to any project. After creating a DCP Service, be sure to associate a\nproject to the DCP Service using <a href=\"/rest/reference/index.html#update-project\">update project</a>.\n</div>\n"},"0-intro":{"template":"sidebyside","title":"DCP Services","anchor":"dcp_services","body":"<p>A DCP Service provides all Customer Profile related services including storage, processing, and delivery. A DCP Service\nstores customer data in a set of <a href=\"/rest/reference#dcp_datasources\">datasources</a>. A datasource stores a set of\nrelated customer attributes under a common ID space. For example, all customer attributes collected by Optimizely are\nstored under the Optimizely datasource; customer attributes from your data warehouse may be stored in a separate\ndatasource.  Because the same customer will likely be identified using different IDs in different datasources, a DCP\nService also stores <a href=\"/customer-profiles/index.html#alias\">aliases</a> (identity links) to reconcile attributes of the same customer\nacross datasources. In the figure below, because the customer identified by <code>ANON_ID_1</code> in &quot;My Data Warehouse&quot; is the\nsame customer identified by <code>OEU_2</code> in &quot;Optimizely Datasource&quot;, the Alias Table records this identity as a row.</p>\n<p><img src=\"/assets/img/dcp/DCP_Service.png\"></p>\n<h5 id=\"associating-optimizely-projects-to-a-dcp-service\">Associating Optimizely Projects to a DCP Service</h5>\n<p>Upon creation, a DCP Service provisions a datasource to store attributes collected by Optimizely. Once a Project is\nassociated to a DCP Service using <a href=\"/rest/reference/index.html#update-project\">update project</a>, the Optimizely datasource\nwill begin storing project-specific attributes. You may create other datasources in the DCP Service to store related\ncustomer attributes from other sources. Multiple Optimizely projects can be associated to a single DCP Service.</p>\n<h5 id=\"uploading-data\">Uploading Data</h5>\n<p>To upload customer attributes from a particular source, <a href=\"/rest/reference#create-dcpdatasource\">add a datasource</a>\nto your DCP Service. Each DCP Service contains a provisioned <a href=\"http://aws.amazon.com/\">AWS</a> account used for bulk data\nuploads.  Details on uploading data to a datasource can be found <a href=\"/customer-profiles/index.html#customer_profiles\">here</a>. You\ncan upload customer attributes to a datasource in a streaming manner using the <a href=\"/customer-profiles/index.html#update-customer_profile\">customer profile\nAPIs</a> or in bulk using the <a href=\"/customer-profiles/index.html#bulk\">datasources S3\nbucket</a>.</p>\n"},"1-read":{"template":"sidebyside","endpoint":"dcp_services/567","endpoint_prefix":"dcp_services/","endpoint_option":567,"type":"GET","title":"Read a DCP Service","anchor":"read-dcpservice","fields":{"account_id":"Account ID that this DCP Service belongs to","archived":"Boolean indicating whether this DCP Service is archived","aws_access_key":"Access key for provisioned AWS account","aws_secret_key":"Secret key for provisioned AWS account","created":"Creation date of DCP Service","last_modified":"Last modified date of DCP Service","name":"The name of this DCP Service","s3_path":"S3 path for the entire DCP Service"},"response":"{\n  \"id\": 567,\n  \"account_id\": 123456,\n  \"archived\": false,\n  \"aws_access_key\": \"123423asfakedf12vh451234\",\n  \"aws_secret_key\": \"1234fake12341asdfas234zc\",\n  \"created\": \"2015-08-01T11:50:37.864010Z\",\n  \"last_modified\": \"2015-08-18T21:38:55.927670Z\",\n  \"name\": \"My DCP Service\",\n  \"s3_path\": \"dcp/567\"\n}","body":"<p>Get metadata for a single DCP Service.  The <code>dcp_service_id</code> is required in the URL.</p>\n<p>Every DCP Service is provisioned with AWS credentials; you may use these\ncredentials to upload data in <a href=\"/customer-profiles/index.html#bulk\">bulk to a datasource specific S3 path</a></p>\n"},"3-update":{"template":"sidebyside","endpoint":"dcp_services/567","endpoint_prefix":"dcp_services/","endpoint_option":567,"type":"PUT","title":"Update DCP Service","anchor":"update-dcpservice","request":{"name":"My Awesome DCP Service"},"response":"{\n  \"id\": 567,\n  \"account_id\": 123456,\n  \"archived\": false,\n  \"aws_access_key\": \"123423asfakedf12vh451234\",\n  \"aws_secret_key\": \"1234fake12341asdfas234zc\",\n  \"created\": \"2015-08-01T11:50:37.864010Z\",\n  \"last_modified\": \"2015-08-18T21:38:55.927670Z\",\n  \"name\": \"My Awesome DCP Service\",\n  \"s3_path\": \"dcp/567\"\n}","body":"<p>Update a single DCPService.  The <code>dcp_service_id</code> is required in the URL.</p>\n<h4 id=\"editable-fields\">Editable Fields</h4>\n<ul>\n<li><code>name</code></li>\n</ul>\n"},"5-list_dcpservices":{"template":"sidebyside","endpoint":"dcp_services","type":"GET","title":"List DCP Services","anchor":"list-dcpservices","response":"[\n  {\n    \"id\": 567,\n    \"account_id\": 123456,\n    \"archived\": false,\n    \"aws_access_key\": \"123423asfakedf12vh451234\",\n    \"aws_secret_key\": \"1234fake12341asdfas234zc\",\n    \"created\": \"2015-08-01T11:50:37.864010Z\",\n    \"last_modified\": \"2015-08-18T21:38:55.927670Z\",\n    \"name\": \"My DCP Service\",\n    \"s3_path\": \"dcp/567\"\n  }\n]","body":"<p>Get all DCP services for this account.</p>\n"}},"dcpdatasources":{"4-delete":{"template":"sidebyside","type":"DELETE","endpoint":"dcp_datasources/678","endpoint_prefix":"dcp_datasources/","endpoint_option":678,"title":"Delete a DCP Datasource","anchor":"delete-dcpdatasource","body":"<p>Delete a DCP Datasource.  The <code>datasource_id</code> is required in the URL.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"dcp_services/567/dcp_datasources","endpoint_prefix":"dcp_services/","endpoint_option":567,"type":"POST","title":"Create a Datasource","anchor":"create-dcpdatasource","request":{"name":"My Data Warehouse","keyfield_locator_type":"cookie","keyfield_locator_name":"_my_hashedEmailcookie"},"response":"{\n  \"id\": 678,\n  \"archived\": false,\n  \"attributes\": [],\n  \"aws_access_key\": \"AKfakekeyV8SH8XTJBUPO\",\n  \"aws_secret_key\": \"ailb234vK/fakekeyc8SH8SeGCh2leiuX\",\n  \"created\": \"2015-08-20T23:26:08.414110Z\",\n  \"dcp_service_id\": 567,\n  \"description\": null,\n  \"is_optimizely\": false,\n  \"keyfield_locator_name\": \"_my_hashedEmailcookie\",\n  \"keyfield_locator_type\": \"cookie\",\n  \"last_modified\": \"2015-08-20T23:26:08.414140Z\",\n  \"name\": \"My Data Warehouse\",\n  \"s3_path\": \"dcp/567/678\"\n}","body":"<p>Create a Datasource for the specified DCP Service.  The <code>dcp_service_id</code> is required in the URL.</p>\n<h4 id=\"required-fields\">Required Fields</h4>\n<ul>\n<li><code>name</code></li>\n<li><code>keyfield_locator_type</code>: Must be one of<ul>\n<li><code>&quot;cookie&quot;</code></li>\n<li><code>&quot;query parameter&quot;</code></li>\n<li><code>&quot;js_variable&quot;</code></li>\n<li><code>&quot;uid&quot;</code></li>\n</ul>\n</li>\n<li><code>keyfield_locator_name</code>: Name of customer ID locator. Required for all <code>keyfield_locator_types</code> except <code>&quot;uid&quot;</code>, and must\nmatch the regular expression <code>/^[a-zA-Z_][a-zA-Z_0-9\\$]*$/</code>.</li>\n</ul>\n"},"0-intro":{"template":"sidebyside","title":"DCP Datasources","anchor":"dcp_datasources","body":"<p>A datasource stores a set of related customer attributes under a common ID space.</p>\n<p><img src=\"/assets/img/dcp/Datasource.png\"></p>\n<p>A single DCP Service can have several datasources. The figure above, shows three datasources: &quot;My Data Warehouse&quot;,\n&quot;Email Platform&quot;, &quot;Optimizely Datasource&quot;, each with customer attributes obtained from a different source, and each with\na different way to identify the same customer. For example, the customer identified by <code>ANON_ID_2</code> in &quot;My Data\nWarehouse&quot; could be the same customer identified by <code>OEU_1</code> in &quot;Optimizely Datasource&quot;. Organizing customer data by\ndatasource allows you to send data to Optimizely without requiring you to reconcile data across datasources. This task\nof reconciling data of the same customer across datasources can be achieved using the\n<a href=\"/customer-profiles/index.html#alias\">alias</a> operation.</p>\n<p>When creating a datasource, you will provide a customer ID locator (type and name), which tells Optimizely where we can\nfind the customer ID on your web pages.  When a customer visits, Optimizely will read their customer ID (for each \ndatasource) and alias it to their Optimizely User ID.\nIn the figure, the &quot;Email Platform&quot; datasource has a locator whose type is <code>cookie</code> and whose name is \n<code>email_platform_cookie_name</code>.  In order for aliasing to work, you would have to place an appropriate customer ID\n(matching the customer ID for every row that you upload for this datasource) in a <code>cookie</code> named \n<code>email_platform_cookie_name</code>.</p>\n<p>If you prefer to alias customer IDs manually, and if you know the corresponding Optimizely User ID for each of your\ncustomer IDs, you can do so using the <a href=\"/customer-profiles/index.html#alias\">alias</a> API.</p>\n"},"1-read":{"template":"sidebyside","endpoint":"dcp_datasources/678","endpoint_prefix":"dcp_datasources/","endpoint_option":678,"type":"GET","title":"Read a Datasource","anchor":"read-dcpdatasource","fields":{"id":"Datasource ID","archived":"Boolean indicating whether this DCP Service is archived","attributes":"An array of all attributes inside this Datasource","aws_secret_key":"Secret key for provisioned aws account","aws_access_key":"Access key for provisioned aws account","created":"Creation date of DCP Service","dcp_service_id":"The DCPService this datasource is associated with","description":"A short description","is_optimizely":"Boolean indicating if this is the Optimizely Datasource","keyfield_locator_type":"Type of customer ID locator. Must be one of `\"cookie\"`, `\"query parameter\"`, `\"js_variable\"`, or `\"uid\"`.","keyfield_locator_name":"Name of customer ID locator. Required for all `keyfield_locator_types` except `\"uid\"`, and must match the regular expression `/^[a-zA-Z_][a-zA-Z_0-9\\$]*$/`","last_modified":"Last modified date of this Datasource","name":"The name of the Datasource","s3_path":"S3 path for this Datasource"},"response":"{\n  \"id\": 678,\n  \"archived\": false,\n  \"attributes\": [],\n  \"aws_access_key\": \"AKfakekeyV8SH8XTJBUPO\",\n  \"aws_secret_key\": \"ailb234vK/fakekeyc8SH8SeGCh2leiuX\",\n  \"created\": \"2015-08-20T23:26:08.414110Z\",\n  \"dcp_service_id\": 567,\n  \"description\": \"First party data from my Data Warehouse\",\n  \"is_optimizely\": false,\n  \"keyfield_locator_name\": \"_my_hashedEmailcookie\",\n  \"keyfield_locator_type\": \"cookie\",\n  \"last_modified\": \"2015-08-20T23:26:08.414140Z\",\n  \"name\": \"My Data Warehouse\",\n  \"s3_path\": \"dcp/567/678\"\n}","body":"<p>Get metadata for the specified datasource.  The <code>datasource_id</code> is required in the URL.</p>\n"},"3-update":{"template":"sidebyside","endpoint":"dcp_datasources/678","endpoint_prefix":"dcp_datasources/","endpoint_option":678,"type":"PUT","title":"Update a Datasource","anchor":"update-dcpdatasource","request":{"name":"My Awesome Data Warehouse","keyfield_locator_type":"cookie","keyfield_locator_name":"_my_hashedEmailcookie"},"response":"{\n  \"id\": 678,\n  \"archived\": false,\n  \"attributes\": [],\n  \"aws_access_key\": \"AKfakekeyV8SH8XTJBUPO\",\n  \"aws_secret_key\": \"ailb234vK/fakekeyc8SH8SeGCh2leiuX\",\n  \"created\": \"2015-08-20T23:26:08.414110Z\",\n  \"dcp_service_id\": 567,\n  \"description\": null,\n  \"is_optimizely\": false,\n  \"keyfield_locator_name\": \"_my_hashedEmailcookie\",\n  \"keyfield_locator_type\": \"cookie\",\n  \"last_modified\": \"2015-08-20T23:26:08.414140Z\",\n  \"name\": \"My Awesome Data Warehouse\",\n  \"s3_path\": \"dcp/567/678\"\n}","body":"<p>Update a Datasource.  The <code>datasource_id</code> is required in the URL.</p>\n<h4 id=\"editable-fields\">Editable fields</h4>\n<ul>\n<li><code>name</code></li>\n<li><code>description</code></li>\n<li><code>keyfield_locator_type</code>: Must be one of<ul>\n<li><code>&quot;cookie&quot;</code></li>\n<li><code>&quot;query parameter&quot;</code></li>\n<li><code>&quot;js_variable&quot;</code></li>\n<li><code>&quot;uid&quot;</code></li>\n</ul>\n</li>\n<li><code>keyfield_locator_name</code>: Name of customer ID locator. Required for all <code>keyfield_locator_types</code> except <code>&quot;uid&quot;</code>, and must\nmatch the regular expression <code>/^[a-zA-Z_][a-zA-Z_0-9\\$]*$/</code>.</li>\n</ul>\n"},"5-list_datasources":{"template":"sidebyside","endpoint":"dcp_services/567/dcp_datasources","endpoint_prefix":"dcp_services/","endpoint_option":567,"type":"GET","title":"List Datasources","anchor":"list-dcpservice-datasources","response":"[\n  {\n    \"id\": 789,\n    \"archived\": false,\n    \"attributes\": [],\n    \"aws_access_key\": \"AKfakekeyV8SH8XTJBUPO\",\n    \"aws_secret_key\": \"ailb234vK/fakekeyc8SH8SeGCh2leiuX\",\n    \"created\": \"2015-08-26T09:50:38.886990Z\",\n    \"description\": \"Optimizely datasource\",\n    \"dcp_service_id\": 567,\n    \"is_optimizely\": true,\n    \"keyfield_locator_name\": null,\n    \"keyfield_locator_type\": \"uid\",\n    \"last_modified\": \"2015-08-26T09:50:39.202950Z\",\n    \"name\": \"Optimizely\",\n    \"s3_path\": \"dcp/567/789\"\n  },\n  {\n    \"id\": 678,\n    \"archived\": false,\n    \"attributes\": [{\n      \"archived\": false,\n      \"datatype\": \"long\",\n      \"description\": \"Predicted LTV, per growth team\",\n      \"format\": null,\n      \"id\": 111,\n      \"is_value_public\": false,\n      \"name\": \"Life-time value\"\n    }, {\n      \"archived\": false,\n      \"datatype\": \"long\",\n      \"description\": \"Alexa rank\",\n      \"format\": null,\n      \"id\": 222,\n      \"is_value_public\": false,\n      \"name\": \"alexa_rank\"\n    }],\n    \"aws_access_key\": \"AKfakekeyV8SH8XTJBUPO\",\n    \"aws_secret_key\": \"ailb234vK/fakekeyc8SH8SeGCh2leiuX\",\n    \"created\": \"2015-08-20T23:26:08.414110Z\",\n    \"dcp_service_id\": 567,\n    \"description\": \"First party data from my Data Warehouse\",\n    \"is_optimizely\": false,\n    \"keyfield_locator_name\": \"_my_hashedEmailcookie\",\n    \"keyfield_locator_type\": \"cookie\",\n    \"last_modified\": \"2015-08-20T23:26:08.414140Z\",\n    \"name\": \"My Awesome Data Warehouse\",\n    \"s3_path\": \"dcp/567/678\"\n  }\n]","body":"<p>Get a list of all datasources in the specified DCPService.  The <code>dcp_service_id</code> is required in the URL.</p>\n"}},"dcpattributes":{"4-delete":{"template":"sidebyside","type":"DELETE","endpoint":"dcp_datasource_attributes/789","endpoint_prefix":"dcp_attributes/","endpoint_option":789,"title":"Delete Attribute","anchor":"delete-dcpattribute","body":"<p>Archive a single attribute.  The <code>attribute_id</code> is required in the URL.</p>\n<p>Once an attribute is archived, you can no longer update or read Customer Profile data for this attribute. You can\nunarchive an attribute at any time.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"dcp_datasources/678/dcp_datasource_attributes","endpoint_prefix":"dcp_datasources/","endpoint_option":678,"type":"POST","title":"Create Attribute","anchor":"create-dcpattribute","request":{"name":"Life-time value","datatype":"long","description":"Predicted LTV, per growth team"},"response":"{\n  \"archived\": false,\n  \"created\": \"2015-08-18T21:38:55.927670Z\",\n  \"datatype\": \"long\",\n  \"dcp_datasource_id\": 678,\n  \"description\": \"Predicted LTV, per growth team\",\n  \"format\": null,\n  \"id\": 789,\n  \"is_value_public\": false,\n  \"last_modified\": \"2015-08-18T21:38:55.927680Z\",\n  \"name\": \"Life-time value\"\n}","body":"<p>Create a single attribute for customer profiles in a datasource.  The <code>datasource_id</code> is required in the URL.</p>\n<h4 id=\"datatype-options\">Datatype options</h4>\n<ul>\n<li><code>&quot;string&quot;</code></li>\n<li><code>&quot;bool&quot;</code></li>\n<li><code>&quot;long&quot;</code></li>\n<li><code>&quot;double&quot;</code></li>\n<li><code>&quot;datetime&quot;</code>: Needs format to be a Datetime format</li>\n</ul>\n<h4 id=\"datetime-format-options\">Datetime format options</h4>\n<ul>\n<li><code>&quot;yyyy-mm-dd&quot;</code>: ISO_8601 UTC date format</li>\n<li><code>&quot;yyyy-mm-ddThh:mm:ssZ&quot;</code>: ISO_8601 datetime format</li>\n<li><code>&quot;epoch&quot;</code>: Epoch time in milliseconds</li>\n</ul>\n"},"0-intro":{"template":"sidebyside","title":"DCP Attributes","anchor":"dcp_attributes","body":"<p>A Profile Attribute describes one aspect of a customer&#39;s profile within a datasource. As shown in the figure below, your data\nwarehouse might store a customer&#39;s &quot;Lifetime Value&quot;, and &quot;Loyalty Card&quot; information, while your email platform might\nstore if the customer &quot;Opens Frequently&quot;.  In DCP, attributes require a datatype, and some datatypes (e.g. datetime)\nrequire a format.  Providing attribute datatypes and formats makes data validation and export to other databases, and\ndata processing systems feasible.</p>\n<p><img src=\"/assets/img/dcp/attributes.png\"></p>\n<p>Use the Attributes APIs below to register and manage attribute metadata for a given datasource, and the <a href=\"/customer-profiles/index.html#customer_profiles\">customer\nprofile</a> APIs to upload and update attribute values.</p>\n"},"1-read":{"template":"sidebyside","endpoint":"dcp_datasource_attributes/789","endpoint_prefix":"dcp_datasources/","endpoint_option":789,"type":"GET","title":"Read Attribute","anchor":"read-dcpattribute","fields":{"archived":"Whether the attribute is archived.","created":"Creation date of the attribute.","datatype":"Datatype of the attribute. Must be one of `\"string\"`, `\"bool\"`, `\"long\"`, `\"double\"`, `\"datetime\"`.","dcp_datasource_id":"ID of the [datasource](/rest/reference/#dcp_datasources) to which the attribute belongs.","description":"Description of the attribute.","format":"When datatype is date, must be one of `\"yyyy-mm-dd\"`, `\"yyyy-mm-ddThh:mm:ssZ\"`, `\"epoch\"`.","is_value_public":"Whether the attribute can be used to deliver [content](https://help.optimizely.com/hc/en-us/articles/216497887).","last_modified":"Last modified date of the attribute","name":"Name of the attribute. Used to identify an attribute across our REST APIs and bulk upload. Note that this name is case-sensitive."},"response":"{\n  \"archived\": false,\n  \"created\": \"2015-08-18T21:38:55.927670Z\",\n  \"datatype\": \"long\",\n  \"dcp_datasource_id\": 678,\n  \"description\": \"Predicted LTV, per growth team\",\n  \"format\": null,\n  \"id\": 789,\n  \"is_value_public\": false,\n  \"last_modified\": \"2015-08-18T21:38:55.927680Z\",\n  \"name\": \"Life-time value\"\n}","body":"<p>Get metadata for the specified attribute.  The <code>attribute_id</code> is required in the URL.</p>\n"},"3-update":{"template":"sidebyside","endpoint":"dcp_datasource_attributes/789","endpoint_prefix":"dcp_datasource_attributes/","endpoint_option":789,"type":"PUT","title":"Update Attribute","anchor":"update-dcpattribute","request":{"name":"is_high_value_customer","datatype":"long"},"response":"{\n  \"archived\": false,\n  \"created\": \"2015-08-18T21:38:55.927670Z\",\n  \"datatype\": \"long\",\n  \"dcp_datasource_id\": 678,\n  \"description\": null,\n  \"format\": null,\n  \"id\": 789,\n  \"is_value_public\": false,\n  \"last_modified\": \"2015-08-18T21:38:55.927680Z\",\n  \"name\": \"is_high_value_customer\"\n}","body":"<p>Update a single attribute.  The <code>attribute_id</code> is required in the URL.</p>\n<h4 id=\"editable-fields\">Editable fields</h4>\n<ul>\n<li><code>description</code></li>\n</ul>\n<div class=\"attention attention--warning push--bottom\">\n<em>NOTE:</em> Updates to an attribute&#39;s name or datatype are not currently supported. We recommend archiving the\nexisting attribute and creating a replacement, with the desired name, datatype, and format.\n</div>\n"},"5-list_attributes":{"template":"sidebyside","endpoint":"dcp_datasources/678/dcp_datasource_attributes","endpoint_prefix":"dcp_datasources/","endpoint_option":678,"type":"GET","title":"List Attributes","anchor":"list-dcpattribute","response":"[\n  {\n    \"archived\": false,\n    \"datatype\": \"long\",\n    \"dcp_datasource_id\": 678,\n    \"description\": \"Predicted LTV, per growth team\",\n    \"format\": null,\n    \"id\": 789,\n    \"is_value_public\": false,\n    \"name\": \"Life-time value\"\n  },\n  {\n    \"archived\": false,\n    \"datatype\": \"string\",\n    \"dcp_datasource_id\": 678,\n    \"description\": null,\n    \"format\": null,\n    \"id\": 790,\n    \"is_value_public\": true,\n    \"name\": \"most_viewed_category\"\n  }\n]","body":"<p>Get a list of all attributes in the specified datasource.  The <code>datasource_id</code> is required in the URL.</p>\n"}},"audiences":{"4-delete":{"template":"sidebyside","title":"Delete an audience","anchor":"delete-audience","body":"<p>Deleting audiences is not supported.</p>\n"},"2-create":{"template":"sidebyside","endpoint":"projects/1234/audiences/","endpoint_prefix":"projects/","endpoint_option":1234,"endpoint_suffix":"/audiences/","type":"POST","title":"Create an audience","anchor":"create-audience","request":{"name":"Chinese food buyers"},"response":"{\n    \"description\": \"\",\n    \"project_id\": 1234,\n    \"id\": 568,\n    \"name\": \"Chinese food buyers\",\n    \"created\": \"2014-05-24T00:13:52.784580Z\",\n    \"conditions\": \"[]\",\n    \"last_modified\": \"2014-06-10T22:12:21.707170Z\",\n    \"segmentation\": false,\n    \"archived\": false\n}","body":"<p>The only required field in the request is <code>name</code>, and you can optionally add a <code>description</code>. The <code>project_id</code> is also required in the URL.</p>\n<p>By default, the <code>conditions</code> field will just be an empty list <code>[]</code>. In this case, the audience will not match anyone automatically. Instead, you can add visitors to it by <code>id</code> using the <code>addToAudience</code> function in our <a href=\"/javascript/reference/index.html#audiences\">JavaScript API</a>. See our <a href=\"/rest/code-samples/index.html#audiences\">audiences API sample</a> for more information.</p>\n<p>Platinum customers can also set the <code>segmentation</code> field. The default value is false, but you can set it to true to track the audience&#39;s behavior on the results page. See the section below on <a href=\"#update-audience\">updating audiences</a> for more information.</p>\n"},"0-intro":{"template":"sidebyside","title":"Audiences","anchor":"audiences","body":"<p>An Audience is a group of visitors that match set conditions. You can target an experiment to one or more audiences, or you can segment experiment results to see how different audiences performed. You can <a href=\"https://help.optimizely.com/hc/en-us/articles/200039685\" target=\"_blank\">learn more about audiences in our knowledge base</a>.</p>\n"},"1-read":{"template":"sidebyside","endpoint":"audiences/567/","endpoint_prefix":"audiences/","endpoint_option":567,"type":"GET","title":"Read an audience","anchor":"read-audience","fields":{"id":"The unique identifier for the audience","project_id":"The project the audience was created in","name":"The name of the audience","description":"A short description","conditions":"A string defining the targeting rules for an audience. See the sections on [audience conditions](/rest/conditions) for more information.","segmentation":"True if the audiences is available for [segmentation](https://help.optimizely.com/hc/en-us/articles/200039935#segmenting) on the results page (Platinum only).","archived":"True if the audience has been archived"},"response":"{\n    \"description\": \"People from Canada\",\n    \"project_id\": 1234,\n    \"id\": 567,\n    \"name\": \"Canadians\",\n    \"created\": \"2014-05-24T00:13:52.784580Z\",\n    \"conditions\": '[\"and\", {\"type\":\"browser\", \"value\":\"gc\"}, {\"type\":\"query\", \"name\":\"utm_campaign\", \"value\":\"true\"}]',\n    \"last_modified\": \"2014-06-10T22:12:21.707170Z\",\n    \"segmentation\": false,\n    \"archived\": false\n}","body":"<p>Get metadata for a single audience.</p>\n"},"3-update":{"template":"sidebyside","endpoint":"audiences/568","endpoint_prefix":"audiences/","endpoint_option":568,"type":"PUT","title":"Update an audience","anchor":"update-audience","request":{"description":"People who bought Chinese food"},"response":"{\n    \"description\": \"People who bought Chinese food\",\n    \"project_id\": 1234,\n    \"id\": 568,\n    \"name\": \"Chinese food buyers\",\n    \"created\": \"2014-05-24T00:13:52.784580Z\",\n    \"conditions\": \"[]\",\n    \"last_modified\": \"2014-06-10T22:12:21.707170Z\",\n    \"segmentation\": false,\n    \"archived\": false\n}","body":"<h4 id=\"editable-fields\">Editable fields</h4>\n<ul>\n<li><code>name</code></li>\n<li><code>description</code></li>\n<li><code>conditions</code> (see <a href=\"/rest/conditions\">Audience Conditions</a>)</li>\n<li><code>segmentation</code> (see <a href=\"https://help.optimizely.com/hc/en-us/articles/200039685-Audiences-Overview-Include-certain-visitors-in-your-experiment#creating\">creating audiences</a>)</li>\n</ul>\n<p>Only Platinum customers can enable segmentation, and you can only enable segmentation on an audience if you have fewer than ten dimensions or other audiences enabled for segmentation. If you don&#39;t have sufficient permissions or already have 10 audiences/dimensions, the API will return an error.</p>\n"},"5-list":{"template":"sidebyside","endpoint":"projects/758824777/audiences/","endpoint_prefix":"projects/","endpoint_option":758824777,"endpoint_suffix":"/audiences/","type":"GET","title":"List audiences in project","anchor":"list-audiences","response":"[\n  {\n      \"description\": \"People from Canada\",\n      \"project_id\": 758824777,\n      \"conditions\": \"[\\\"and\\\", {\\\"type\\\": \\\"location\\\", \\\"value\\\": \\\"CA\\\"}]\",\n      \"id\": 1338260223,\n      \"name\": \"Canadians\",\n      \"created\": \"2014-05-24T00:13:52.784580Z\",\n      \"last_modified\": \"2014-06-10T22:12:21.707170Z\",\n      \"segmentation\": false,\n      \"archived\": true\n  },\n  {\n      \"description\": \"People from Mexico\",\n      \"project_id\": 758824777,\n      \"conditions\": \"[\\\"and\\\", {\\\"type\\\": \\\"location\\\", \\\"value\\\": \\\"MX\\\"}]\",\n      \"id\": 1339160093,\n      \"name\": \"Mexicans\",\n      \"created\": \"2014-03-28T22:12:21.707170Z\",\n      \"last_modified\": \"2014-04-12T19:10:53.806650ZZ\",\n      \"segmentation\": true,\n      \"archived\": false\n  }\n]","body":"<p>Get a list of all the audiences in a project. The <code>project_id</code> in the URL is required.</p>\n"}},"index":{"template":"page-sidebar--full","title":"Optimizely REST API Reference","includeSiblingData":true,"sections":["overview","projects","experiments","schedules","variations","goals","audiences","lists","dimensions","dcpservices","dcpdatasources","dcpattributes"],"body":""}},"code-samples":{"introduction":{"0-intro":{"partial":"_inline.html","title":"Introduction","anchor":"introduction","body":"<p>In order to help you get up and running quickly, we have provided a number of code samples that you can use.\nBe sure to modify the code appropriately before running in production!</p>\n<h4 id=\"table-of-contents\">Table of Contents</h4>\n<ul>\n<li><p><em>Audiences:</em> If you have data about the visitors to a site, you can use our platform to group those visitors into <a href=\"/samples/#audiences\">Optimizely Audiences</a>. This makes it easy to target content to different audiences and segment experiment results.</p>\n</li>\n<li><p><em>Uploaded Lists:</em> If you already have lists of your users, you can easily import those lists into Optimizely using our <a href=\"/samples/#user-lists\">uploaded lists</a> feature for list targeting purposes.</p>\n</li>\n</ul>\n"}},"audiences":{"2-create":{"partial":"_inline.html","title":"Create an audience","endpoint":"projects/43523/audiences/","anchor":"audiences-create","type":"POST","request":{"name":"Truck Shoppers","description":"(Imported from ______)"},"response":"{\n  \"name\": \"Truck Shoppers\",\n  \"description\": \"(Imported from ______)\",\n  \"project_id\": 43523,\n  \"id\": 85094\n}","body":"<p>Let&#39;s say you&#39;ve chosen project ID 43523. You can send a POST request to the <code>projects/43523/audiences</code> entry point to create an audience in that project.</p>\n<p>The response will include a unique <code>id</code> for the audience you created. You&#39;ll use this ID to assign visitors to the audience.</p>\n"},"0-intro":{"partial":"_inline.html","title":"Audiences","anchor":"audiences","body":"<p>If you have data about the visitors to a site, you can use our platform to group those visitors into <a href=\"https://help.optimizely.com/hc/en-us/articles/200039685-Audiences-Choose-which-visitors-to-include\">Optimizely Audiences</a>. This makes it easy to target content to different audiences and segment experiment results.</p>\n<p>In this example, we&#39;ll show how a data management platform could connect to Optimizely to create audiences and assign visitors to them on the fly. In this case, we&#39;ll use the REST API to create a &quot;Truck Shoppers&quot; audience, and then we&#39;ll use the JavaScript API to assign visitors to it whenever their cookie indicates they&#39;re in the market for a truck.</p>\n"},"1-connect":{"partial":"_inline.html","type":"GET","endpoint":"projects/","title":"Connect a project","anchor":"audiences-connect","response":"[\n  {\n    \"project_id\": 1234,\n    \"project_name\": \"My project\"\n  },\n  {\n    \"project_id\": 1235,\n    \"project_name\": \"My other project\"\n  }\n]","body":"<p>First, you&#39;ll need to <a href=\"/rest/reference/index.html#authentication\">authenticate</a> with our REST API. This will let you create audiences in the right account.</p>\n<p>You&#39;ll also need to choose a project to create the audiences in. If you&#39;re building an integration, you could ask for a <code>project_id</code> directly from the user.</p>\n<p>Alternatively, you can <a href=\"/rest/reference/index.html#list-projects\">list out all the projects</a> in a user&#39;s account and have them pick from a drop-down, as the example at right shows.</p>\n"},"3-assign":{"partial":"_inline.html","title":"Assign visitors","anchor":"audiences-assign","js":"window['optimizely'] = window['optimizely'] || [];\nwindow['optimizely'].push([\"addToAudience\", 85094]);","body":"<p>Now that you&#39;ve created the audience, you can assign visitors to it programmatically using our <a href=\"/javascript\">Javascript API</a>.</p>\n<p>Use the <code>addToAudience</code> call with the audience&#39;s <code>id</code> as the first argument.</p>\n<p>This call needs to happen <strong>before</strong> the Optimizely snippet loads, otherwise visitors won&#39;t see experiments targeted to that audience.</p>\n"}},"index":{"template":"page-sidebar--wider","title":"Code Samples","includeSiblingData":true,"sections":["introduction","audiences","user-lists"],"body":""},"user-lists":{"0-intro":{"partial":"_inline.html","title":"Uploaded lists","anchor":"uploaded-lists","body":"<p>You can use the <a href=\"/rest/reference/index.html#lists\">Optimizely REST API</a> to upload\n<a href=\"https://help.optimizely.com/hc/en-us/articles/206197347-User-List-Targeting-Create-audiences-based-on-lists-of-data\">user lists</a>\nto Optimizely, which you can use to target experiments and segment results.</p>\n<p>To illustrate this functionality, we&#39;ve built a sample script that queries for records in a Salesforce account and\nuploads a user list to Optimizely based on that data, allowing you to, for instance, target an\nexperiment to customers who are in a particular industry according to your Salesforce data.</p>\n<p><a class=\"btn btn-primary\" target=\"_blank\" href=\"https://github.com/optimizely/optimizely-api-samples/tree/master/salesforce_list_targeting\">Visit our README</a>\nto learn more and download the source code.</p>\n"}}},"getting-started":{"index":{"template":"page-sidebar","title":"Optimizely REST API Guide","body":"<h1 id=\"getting-started-with-optimizely-s-rest-api\">Getting started with Optimizely&#39;s REST API</h1>\n<p>Get started with the REST API in 5 minutes by following the instructions below:</p>\n<h3 id=\"1-create-an-optimizely-account\">1. Create an Optimizely account</h3>\n<p>If you don&#39;t have an Optimizely account already, just sign up for a <a href=\"https://www.optimizely.com/?modal=devsignup\">free developer account</a>. This account will give you access to core Optimizely features and API access, but with limited traffic allocation. No credit card is required, but you can always upgrade your account to a paid plan later.</p>\n<h3 id=\"2-generate-an-api-token\">2. Generate an API token</h3>\n<p>Visit <a target=\"_blank\" href=\"https://app.optimizely.com/tokens\">app.optimizely.com/tokens</a> to generate a API token, which you&#39;ll need to authenticate with the API.</p>\n<p><em>Note:</em> If you didn&#39;t create your own developer account you&#39;ll need to make sure you have Administrator or Project Owner permissions to generate a token.  If you don&#39;t have permissions, ask your Administrator or Project Owner to generate a token for you.</p>\n<h3 id=\"3-access-your-account\">3. Access your account</h3>\n<p>To use the REST API, you&#39;ll need to include your API token in the request header. For example, the following request returns a list of projects in your account.</p>\n<pre><code class=\"lang-curl\">curl \\\n  -H &quot;Token: abcdefghijklmnopqrstuvwxyz:123456&quot; \\\n  -X GET &quot;https://www.optimizelyapis.com/experiment/v1/projects/&quot;\n</code></pre>\n<h3 id=\"4-register-your-application\">4. Register your application</h3>\n<p>Register your application in your <a href=\"http://app.optimizely.com/accountsettings/developer\">account settings</a>.</p>\n<p>If you&#39;re developing an application for use by other customers, we recommend registering your application so you can use OAuth 2.0 to authenticate with the API. OAuth 2.0 will allow customers to use your application without requiring them to share their Optimizely username and password. For more information on how to use OAuth, refer to our <a href=\"/rest/reference#oauth\">OAuth documentation</a>.</p>\n<h3 id=\"5-start-building-\">5. Start building!</h3>\n<p>You&#39;re now ready to start building an application with Optimizely! Please refer to our full <a href=\"/rest/reference\">API reference</a> to see a full list of the supported endpoints. You may also want to check out our <a href=\"/rest/faqs\">FAQs</a> to quickly get the answers you need.</p>\n<p>If you have any questions about using the REST API, please reach out to <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>. Our developer support team is happy to help support you building your application.</p>\n"}},"conditions":{"index":{"template":"page-sidebar--conditions","title":"Audience Conditions","body":""}},"faqs":{"index":{"template":"page-sidebar","title":"Optimizely REST API FAQs","body":"<h1 id=\"optimizely-rest-api-faqs\">Optimizely REST API FAQs</h1>\n<p>Below are some frequently asked questions about the REST API. You may also want to check out <a href=\"https://help.optimizely.com/hc/en-us/articles/200904580\">general product FAQs</a>.</p>\n<p>Can&#39;t find an answer to your question? We&#39;re happy to answer your question on <a href=\"developers@optimizely.com\">developers@optimizely.com</a>.</p>\n<p><a href=\"#run-tests\"><em>Q:</em> Can I run A/B tests with the REST API?</a><br>\n<a href=\"#run-mvt-tests\"><em>Q:</em> Can I run multivariate or multipage tests with the REST API?</a><br>\n<a href=\"#rate-limits\"><em>Q:</em> What are the rate limits on the REST API?</a><br>\n<a href=\"#client-libraries\"><em>Q:</em> Do you provide any client libraries for the REST API?</a><br>\n<a href=\"#api-permissions\"><em>Q:</em> What REST API endpoints do I have access to?</a><br>\n<a href=\"#create-variation-web\"><em>Q:</em> How do I create a variation (for web)?</a><br>\n<a href=\"#create-variation-mobile\"><em>Q:</em> How do I create a variation (for mobile)?</a><br>\n<a href=\"#start-experiment\"><em>Q:</em> How do I start or stop an experiment?</a><br>\n<a href=\"#get-results\"><em>Q:</em> How do I get the results of an experiment?</a><br>\n<a href=\"#archive-experiment\"><em>Q:</em> How do I archive an experiment?</a><br></p>\n<p><a name=\"run-tests\"></a></p>\n<h5 id=\"-q-can-i-run-web-a-b-tests-with-the-rest-api-\"><em>Q: Can I run web A/B tests with the REST API?</em></h5>\n<p><em>A:</em> Yes! The REST API allows you to create projects, experiments, variations, audiences, and goals analogous to using the Optimizely interface. Check out <a href=\"../../overview#life-of-an-experiment\">Life of an experiment</a> to see what&#39;s involved in setting up an experiment and which API endpoints are needed.</p>\n<p><a name=\"run-mvt-tests\"></a></p>\n<h5 id=\"-q-can-i-run-multivariate-or-multipage-tests-with-the-rest-api-\"><em>Q: Can I run multivariate or multipage tests with the REST API?</em></h5>\n<p><em>A:</em> We currently don&#39;t support creating and editing multivariate or multipage tests via the API.</p>\n<p><a name=\"rate-limits\"></a></p>\n<h5 id=\"-q-what-are-the-rate-limits-on-the-rest-api-\"><em>Q: What are the rate limits on the REST API?</em></h5>\n<p><em>A:</em> We do not currently publish rate limits or quotas for the REST API. If you are writing an application that requires an unusually high volume of API calls, please reach out to <a href=\"developers@optimizely.com\">developers@optimizely.com</a> so we can ensure that your plan will allow it.</p>\n<p><a name=\"client-libraries\"></a></p>\n<h5 id=\"-q-do-you-provide-any-client-libraries-for-the-rest-api-\"><em>Q: Do you provide any client libraries for the REST API?</em></h5>\n<p><em>A:</em> Yes! We&#39;ve started with a client library in <a href=\"https://github.com/optimizely/optimizely-client-python\">Python Client Library</a> and we are working on adding more languages. See <a href=\"../reference#libraries\">API Libraries</a> for a list of libraries supported by Optimizely and 3rd parties.</p>\n<p><a name=\"api-permissions\"></a></p>\n<h5 id=\"-q-what-rest-api-endpoints-do-i-have-access-to-\"><em>Q: What REST API endpoints do I have access to?</em></h5>\n<p><em>A:</em> In general, permissions in the REST API match the role of the user for which the API token was generated:</p>\n<ul>\n<li><em>Administrators</em> have full read/write access to all endpoints across all projects</li>\n<li><em>Project owners</em> have full read/write access to all endpoints within a project</li>\n<li><em>Editors</em> have full read/write access within a project, except starting experiments</li>\n<li><em>Viewers</em> have read-only access within a project</li>\n</ul>\n<p>If you are connecting to Optimizely via OAuth, the same rules apply based on the role of the user who authorizes your application. For a full description of user roles see <a href=\"https://help.optimizely.com/hc/en-us/articles/200040775\">Managing collaborators and user roles</a>.</p>\n<p><a name=\"create-variation-web\"></a></p>\n<h5 id=\"-q-how-do-i-create-a-variation-for-web-\"><em>Q: How do I create a variation (for web)?</em></h5>\n<p><em>A:</em> To create a variation on the web, you&#39;ll want to use the <a href=\"../reference#create-variation\">POST variation</a> endpoint and include a <code>js_component</code> with the jQuery code for your variation. To see an example, check out the <a href=\"../samples#technology-integrations-cms\">WordPress headline testing</a> code sample.</p>\n<p><a name=\"create-variation-mobile\"></a></p>\n<h5 id=\"-q-how-do-i-create-a-variation-for-mobile-\"><em>Q: How do I create a variation (for mobile)?</em></h5>\n<p><em>A:</em> We do not currently support creating variations for iOS and Android through the REST API.</p>\n<p><a name=\"start-experiment\"></a></p>\n<h5 id=\"-q-how-do-i-start-or-stop-an-experiment-\"><em>Q: How do I start or stop an experiment?</em></h5>\n<p><em>A:</em> To start or stop an experiment, you&#39;ll want to use the <a href=\"../reference#update-experiment\">PUT experiment</a> endpoint to update the <code>status</code> field of the experiment to <code>Running</code> (to start) or <code>Paused</code> (to stop).</p>\n<p><a name=\"get-results\"></a></p>\n<h5 id=\"-q-how-do-i-get-the-results-of-an-experiment-\"><em>Q: How do I get the results of an experiment?</em></h5>\n<p><em>A:</em> You can get the results of an experiment by using the <a href=\"../reference#get-stats\">Get experiment results</a> endpoint. To see an example check out the our <a href=\"../../samples#results\">samples code</a> for a web application that pulls results through the API.</p>\n<p><a name=\"archive-experiment\"></a></p>\n<h5 id=\"-q-how-do-i-archive-an-experiment-\"><em>Q: How do I archive an experiment?</em></h5>\n<p><em>A:</em> To archive an experiment, use the <a href=\"../reference#update-experiment\">PUT experiment</a> endpoint to update the <code>status</code> field of the experiment to <code>Archived</code>.</p>\n"}},"introduction":{"index":{"template":"page-sidebar","title":"Optimizely REST API","body":"<h1 id=\"optimizely-rest-api\">Optimizely REST API</h1>\n<p><em>The Optimizely REST API allows you to manage Optimizely projects using code.</em></p>\n<p>Using the REST API, you can create, start, stop, and archive experiments programmatically inside your own application. The API includes entities such as <a href=\"/rest/reference#projects\">projects</a>, <a href=\"/rest/reference#experiments\">experiments</a>, <a href=\"/rest/reference#variations\">variations</a>, <a href=\"/rest/reference#goals\">goals</a>, <a href=\"/rest/reference#audiences\">audiences</a>, <a href=\"/rest/reference#dimension\">dimensions</a>, and more.</p>\n<p>At Optimizely, we&#39;ve built our web application around a REST API as we want to expose our core functionality to developers. Applications built on the REST API can get full access to Optimizely&#39;s data and services without requiring users to ever log into the Optimizely application. For example, many of our <a href=\"http://optimizely.com/partners/technology\">technology partners</a> have built integrations using the REST API and our Data Services endpoints to transfer data to and from Optimizely.</p>\n<p>To see a full list of endpoints supported in the REST API, refer to our <a href=\"/rest/reference\">API reference</a>. If you&#39;re\nusing the REST API for the first time, go to <a href=\"/rest/getting-started\">Getting started</a> which walks through how to get an\nAPI token and make your first API call. We&#39;ve also listed some common questions in the <a href=\"/rest/faqs\">FAQs</a> section.</p>\n<p>If you have any questions about using the REST API, please reach out to <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>. Our developer support team is happy to help and support building your application.</p>\n<p><a class=\"button button--highlight anchor--middle display--block width--200 text--center\" href=\"../getting-started/index.html\">\nGet Started\n</a></p>\n"}}},"results":{"results":{"1-results":{"template":"sidebyside","endpoint":"experiments/1234/results","endpoint_prefix":"experiments/","endpoint_option":1234,"endpoint_suffix":"/results","type":"GET","title":"Legacy results","anchor":"get-results","fields":{"variation_id":"ID of the variation. If the experiment is a multivariate test, this field is a list of variation IDs delimited by the “_” character. (The field is a string rather than an integer to support this case.)","variation_name":"Name of the variation. If the experiment is a multivariate test, this field is a list of variation names delimited by commas (“,”).","goal_id":"ID of the goal.","goal_name":"Name of the goal.","baseline_id":"ID of the variation that is the baseline for this experiment.","begin_time":"Begin time for the result dataset in UTC.","end_time":"End time for the result dataset in UTC.","visitors":"Number of visitors that were shown this variation.","conversions":"Number of visitors that were shown this variation and converted to the specified goal.","conversion_rate":"Conversion rate, computed as **conversions**/**visitors**. Only present if this is not a revenue goal.","status":"Indicates whether a winner has been declared. Must take one of the values `winner`, `loser`, or `inconclusive`. For baseline variations, the value is always `baseline`.","difference":"The absolute difference in conversion rates from baseline. For revenue goals, the difference in **revenue&#95;per&#95;visitor** from baseline.","improvement":"Relative improvement over the baseline, computed as the ratio of **conversion_rate** values minus 1. For revenue goals, this is computed as the ratio of **revenue_per_visitor** values minus 1.","confidence":"Chance to beat baseline.","is_revenue":"Boolean indicating if this a revenue goal.","revenue":"Total revenue generated by this variation. Only present if this is a revenue goal.","revenue_per_visitor":"Average revenue per visitor, computed as **revenue**/**visitors**. Only present if this is a revenue goal."},"response":"[\n  {\n    \"variation_id\": \"925781903\",\n    \"variation_name\": \"My Variation\",\n    \"goal_id\": 820360058,\n    \"goal_name\": \"Engagement\",\n    \"baseline_id\": \"924521605\",\n    \"begin_time\": \"2014-07-25T20:30:00Z\",\n    \"end_time\": \"2014-07-25T20:38:09Z\",\n    \"visitors\": 853,\n    \"conversions\": 204,\n    \"conversion_rate\": 0.239,\n    \"status\": \"inconclusive\",\n    \"improvement\": 0.014,\n    \"confidence\": 0.631,\n    \"is_revenue\": false,\n  },\n  {\n    \"variation_id\": \"924521605\",\n    \"variation_name\": \"Original\",\n    \"goal_id\": 820360058,\n    \"goal_name\": \"Engagement\",\n    \"baseline_id\": \"924521605\",\n    \"begin_time\": \"2014-07-25T20:30:00Z\",\n    \"end_time\": \"2014-07-25T20:38:09Z\",\n    \"visitors\": 841,\n    \"conversions\": 189,\n    \"conversion_rate\": 0.225,\n    \"status\": \"baseline\",\n    \"improvement\": 0,\n    \"confidence\": 0,\n    \"is_revenue\": false,\n  },\n]","body":"<p>Use the /results endpoint to get the top-level results of an experiment, computed using a traditional t-test.</p>\n<div class=\"attention attention--warning push--bottom\">\n<b>Experiments started on or after January 21, 2015 also have statistics computed by Stats Engine.</b> For consistency with the Optimizely results page, we recommend you use the <a href=\"#get-stats\">/stats</a> endpoint instead of the /results endpoint for those experiments.</div>\n\n<p>The /results endpoint differs in several ways from the <a href=\"#get-stats\">/stats</a> endpoint.  In particular, it returns a <strong>confidence</strong> field instead of <strong>statistical_significance</strong>, and the value is computed using a traditional t-test rather than <a target=\"_blank\" href=\"https://help.optimizely.com/hc/en-us/articles/200039895\">Stats Engine</a>.  <strong>confidence</strong> represents the &quot;Chance to Beat Baseline&quot; that you may find on the results page for old experiments.</p>\n<p>The request requires an <code>experiment_id</code> and the response contains a list of JSON objects representing every combination of variations and goals that have been defined for that experiment. For example, if there are three variations and two goals defined for an experiment, the response will contain six JSON objects representing each <code>variation_id</code> and <code>goal_id</code> combination.</p>\n<p>To filter results to visitors in a particular audience, add the optional <code>audience_id</code> parameter to the URL, e.g. <code>?audience_id=123</code>.</p>\n<p>To filter results to visitors with a particular custom dimension value, add the optional <code>dimension_id</code> and <code>dimension_value</code> parameters, e.g. <code>?dimension_id=456&amp;dimension_value=foo</code>.</p>\n<p>The /results endpoint may return a 503 error when it is overloaded. If you experience any issues please email us at <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>.</p>\n"},"0-stats":{"template":"sidebyside","endpoint":"experiments/1234/stats","endpoint_prefix":"experiments/","endpoint_option":1234,"endpoint_suffix":"/stats","type":"GET","title":"Stats engine results","anchor":"get-stats","fields":{"variation_id":"ID of the variation. If the experiment is a multivariate test, this field is a list of variation IDs delimited by the “_” character. (The field is a string rather than an integer to support this case.)","variation_name":"Name of the variation. If the experiment is a multivariate test, this field is a list of variation names delimited by commas (“,”).","goal_id":"ID of the goal.","goal_name":"Name of the goal.","baseline_id":"ID of the variation that is the baseline for this experiment.","begin_time":"Begin time for the result dataset in UTC.","end_time":"End time for the result dataset in UTC.","visitors":"Number of visitors that were shown this variation.","conversions":"Number of visitors that were shown this variation and converted to the specified goal.","conversion_rate":"Conversion rate, computed as **conversions**/**visitors**. Only present if this is not a revenue goal.","status":"Indicates whether a winner has been declared. Must take one of the values `winner`, `loser`, or `inconclusive`. For baseline variations, the value is always `baseline`.","improvement":"Relative improvement over the baseline, computed as the ratio of **conversion_rate** values minus 1. For revenue goals, this is computed as the ratio of **revenue&#95;per&#95;visitor** values minus 1.","statistical_significance":"The likelihood that the observed difference in conversion rates is not due to chance.","difference":"The absolute difference in conversion rates from baseline. For revenue goals, the difference in **revenue&#95;per&#95;visitor** from baseline.","difference_confidence_interval_min":"Lower value of the confidence interval for **difference**.","difference_confidence_interval_max":"Upper value of the confidence interval for **difference**.","visitors_until_statistically_significant":"Estimate for number of visitors required to reach statistical significance.","is_revenue":"Boolean indicating if this a revenue goal.","revenue":"Total revenue generated by this variation. Only present if this is a revenue goal.","revenue_per_visitor":"Average revenue per visitor, computed as **revenue**/**visitors**. Only present if this is a revenue goal."},"response":"[\n  {\n    \"variation_id\": \"925781903\",\n    \"variation_name\": \"My Variation\",\n    \"goal_id\": 820360058,\n    \"goal_name\": \"Engagement\",\n    \"baseline_id\": \"924521605\",\n    \"begin_time\": \"2014-07-25T20:30:00Z\",\n    \"end_time\": \"2014-07-25T20:38:09Z\",\n    \"visitors\": 853,\n    \"conversions\": 204,\n    \"conversion_rate\": 0.239,\n    \"status\": \"inconclusive\",\n    \"improvement\": 0.014,\n    \"statistical_significance\": 0.631,\n    \"difference\": 0.014,\n    \"difference_confidence_interval_min\": 0.008,\n    \"difference_confidence_interval_max\": 0.020,\n    \"visitors_until_statistically_significant\": 100,\n    \"is_revenue\": false,\n  },\n  {\n    \"variation_id\": \"924521605\",\n    \"variation_name\": \"Original\",\n    \"goal_id\": 820360058,\n    \"goal_name\": \"Engagement\",\n    \"baseline_id\": \"924521605\",\n    \"begin_time\": \"2014-07-25T20:30:00Z\",\n    \"end_time\": \"2014-07-25T20:38:09Z\",\n    \"visitors\": 841,\n    \"conversions\": 189,\n    \"conversion_rate\": 0.225,\n    \"status\": \"baseline\",\n    \"improvement\": 0,\n    \"statistical_significance\": 0,\n    \"difference\": 0,\n    \"difference_confidence_interval_min\": 0,\n    \"difference_confidence_interval_max\": 0,\n    \"visitors_until_statistically_significant\": 100,\n    \"is_revenue\": false,\n  }\n]","body":"<p>Use the /stats endpoint to get the top-level results of an experiment, computed using the <a target=\"_blank\" href=\"https://help.optimizely.com/hc/en-us/articles/200039895\">Optimizely Stats Engine</a>.</p>\n<div class=\"attention attention--warning push--bottom\">\n<b>Stats Engine is only available for experiments started on or after January 21, 2015.</b> For older experiments, you must use the <a href=\"#get-results\">/results</a> endpoint. Those results will match what you see on the Optimizely results page.\n</div>\n\n<p>The request requires an <code>experiment_id</code> and the response contains a list of JSON objects representing every combination of variations and goals that have been defined for that experiment. For example, if there are three variations and two goals defined for an experiment, the response will contain six JSON objects representing each <code>variation_id</code> and <code>goal_id</code> combination.</p>\n<p>To filter results to visitors in a particular audience, add the optional <code>audience_id</code> parameter to the URL, e.g. <code>?audience_id=123</code>.</p>\n<p>To filter results to visitors with a particular custom dimension value, add the optional <code>dimension_id</code> and <code>dimension_value</code> parameters, e.g. <code>?dimension_id=456&amp;dimension_value=foo</code>.</p>\n<p>The /stats endpoint may return a 503 error when it is overloaded. If you experience any issues please email us at <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>.</p>\n"}},"index":{"template":"page-sidebar--full","title":"Experiment Results","includeSiblingData":true,"sections":["results"],"body":""}},"server":{"reference":{"tracking":{"1-web-tracking":{"template":"multi-example","title":"Tracking on the web","anchor":"webtracking","body":"<p>If you&#39;d like to track events on the web, client-side (via JavaScript) instead of on the server, you can use the JavaScript SDK. This SDK is available via <a href=\"https://www.npmjs.com/package/optimizely-client-sdk\">npm</a>.</p>\n<p>Instructions for using the SDK:</p>\n<ol>\n<li><p><code>npm install optimizely-client-sdk --save</code></p>\n</li>\n<li><p>Require the module via <code>var optimizely = require(&#39;optimizely-client-sdk&#39;);</code></p>\n</li>\n<li><p>This SDK exposes the same APIs as the rest of the SDKs. You need to create an instance of the <code>Optimizely</code> object and pass it the datafile:\n<code>optimizelyInstance = optimizely.createInstance({\ndatafile: datafile\n});</code></p>\n<p>Note: you can pass the datafile from your backend to the frontend (i.e. append it to window like <code>window.datafile</code>) or you can manually send an HTTP request from your web frontend code to grab it from the CDN and parse it as a JSON object to pass it to the <code>optimizely</code> constructor.</p>\n</li>\n<li><p>Once you have an instance of <code>optimizely</code> you can call the <code>track</code> method as such: <code>optimizelyInstance.track(eventKey, userId, attributes, eventValue)</code></p>\n</li>\n</ol>\n"},"0-intro":{"template":"multi-example","title":"Event tracking","anchor":"tracking","code_examples":{"python":{"lang":"python","request":"event_key = 'booking_complete'\nuser_id = 'user123'\n\n# Track a conversion event for the provided user\noptimizely.track(event_key, user_id)\n"},"java":{"lang":"java","request":"eventKey = \"booking_complete\";\nuserId = \"user123\";\n\n// Track a conversion event for the provided user\noptimizely.track(eventKey, userId);\n"},"ruby":{"lang":"ruby","request":"event_key = 'booking_complete'\nuser_id = 'user123'\n\n# Track a conversion event for the provided user\noptimizely.track(event_key, user_id)\n"},"javascript":{"lang":"javascript","request":"var eventKey = 'booking_complete';\nvar userId = 'user123';\n\n// Track a conversion event for the provided user\noptimizely.track(eventKey, userId);"}},"body":"<p>You can easily track Optimizely goals from your code as shown in the example to the right. Note that you don&#39;t need to pass the assigned experiments or variations; Optimizely will drop any conversion events for users that are not part of an experiment that includes the goal.</p>\n<div class=\"attention attention--warning push--bottom\"><em>Please note:</em> users must be activated into an experiment before calling <code>track()</code> to register a conversion event on results page.\n</div>\n"}},"overview":{"0-intro":{"template":"multi-example","title":"Overview","anchor":"overview","body":"<p>This page is a full reference for Optimizely&#39;s server-side SDKs. Read on to learn how to install one of our SDKs and run experiments in your code!</p>\n<p>If you&#39;d like a quick introduction to server-side testing, refer to the <a href=\"/server/getting-started\">getting started guide</a>.</p>\n"}},"init":{"0-intro":{"template":"multi-example","title":"Initialization","anchor":"initialization","code_examples":{"python":{"lang":"python","request":"import optimizely\n\noptimizely = optimizely.Optimizely(datafile)\n"},"java":{"lang":"java","request":"import com.optimizely.ab.Optimizely;\nimport com.optimizely.ab.event.AsyncEventHandler;\n\nString datafile = \"{}\";\n// Creates an async event handler with a max buffer of 20,000 events\n// and a single dispatcher thread\nEventHandler eventHandler = new AsyncEventHandler(20000, 1);\nOptimizely optimizely = Optimizely.builder(datafile, eventHandler)\n    .build();\n"},"ruby":{"lang":"ruby","request":"require \"optimizely\"\n\noptimizely = Optimizely::Project.new(datafile)\n"},"javascript":{"lang":"javascript","request":"var optimizely = require('optimizely-server-sdk');\n\n// or ES6\nimport optimizely from 'optimizely-server-sdk'\n\nvar datafile = {};\nvar optimizely = optimizely.createInstance({ datafile: datafile });\n\n// to skip JSON schema validation for the datafile (SDK versions 0.0.10 and above)\nvar optimizely = optimizely.createInstance({\n  datafile: datafile,\n  skipJSONValidation: true\n});"}},"body":"<div class=\"hidden visible\" data-toggle-section=\"python-code\">\n<p>First, you&#39;ll need to import the Optimizely library into your code as shown.</p>\n\n<p>To run experiments with Optimizely you&#39;ll need to instantiate an <code>Optimizely</code> object in your code. This object represents the state of an Optimizely project and can be used to both <a href=\"#activation\">activate experiments</a> and <a href=\"#tracking\">track events</a>.</p>\n\n<p>To construct the <code>Optimizely</code> object, you&#39;ll need to provide the <code>datafile</code> as an argument representing the JSON configuration of your project. The datafile contains all the instructions needed to activate experiments and track events. For more information on the expected format of the datafile and how to get the most up-to-date version, see the <a href=\"#datafile\">datafile</a> section.</p>\n\n<p>You can customize the behavior of the SDK by configuring parameters to the Optimizely constructor. This is explained in detail <a href=\"#configuration\">below</a>.</p>\n\n</div>\n\n\n<div class=\"hidden\" data-toggle-section=\"ruby-code\">\n<p>First, you&#39;ll need to import the Optimizely library into your code as shown. </p>\n\n<p>To run experiments with Optimizely you&#39;ll need to instantiate an <code>Optimizely</code> object in your code. This object represents the state of an Optimizely project and can be used to both <a href=\"#activation\">activate experiments</a> and <a href=\"#tracking\">track events</a>.</p>\n\n<p>To construct the <code>Project</code> object, you&#39;ll need to provide the <code>datafile</code> as an argument representing the JSON configuration of your project. The datafile contains all the instructions needed to activate experiments and track events. For more information on the expected format of the datafile and how to get the most up-to-date version, see the <a href=\"#datafile\">datafile</a> section.</p>\n\n<p>You can customize the behavior of the SDK by configuring parameters to the Optimizely constructor. This is explained in detail <a href=\"#configuration\">below</a>.</p>\n\n</div>\n\n<div class=\"hidden\" data-toggle-section=\"java-code\">\n<p>First, you&#39;ll need to import the Optimizely library into your code as shown.</p>\n\n<p>To run experiments with Optimizely you&#39;ll need to instantiate an <code>Optimizely</code> object in your code. This object represents the state of an Optimizely project and can be used to both <a href=\"#activation\">activate experiments</a> and <a href=\"#tracking\">track events</a>.</p>\n\n<p>To construct the <code>Optimizely</code> object, you&#39;ll need to provide a <code>datafile</code> String and an <code>EventHandler</code> object as arguments to the <code>Optimizely.builder</code> function. The <code>datafile</code> is a JSON representation of your project and contains all of the information needed to activate experiments and track events. For more information on the expected format of the datafile and how to get the most up-to-date version, see the <a href=\"#datafile\">datafile</a> section. <code>eventHandler</code> in the example to the right is instantiated as the provided asynchronous implementation.</p>\n\n<p>You can customize the behavior of the SDK by configuring parameters to the Optimizely constructor. This is explained in detail <a href=\"#configuration\">below</a>.</p>\n\n</div>\n\n\n<div class=\"hidden\" data-toggle-section=\"javascript-code\">\n<p>First, you&#39;ll need to import the Optimizely library into your code as shown.</p>\n\n<p>To run experiments with Optimizely you&#39;ll need to instantiate an <code>optimizely</code> object in your code. This object represents the state of an Optimizely project and can be used to both <a href=\"#activation\">activate experiments</a> and <a href=\"#tracking\">track events</a>.</p>\n\n<p>To construct the <code>optimizely</code> object, you&#39;ll need to provide the <code>datafile</code> as an argument representing the JSON configuration of your project. The datafile contains all the instructions needed to activate experiments and track events.</p>\n\n<p>In SDK versions <code>0.0.10</code> and above, you can optionally pass in a <code>skipJSONValidation</code> property as <code>true</code> to skip JSON schema validation of the datafile upon <code>optimizely</code> instantiation. Skipping JSON schema validation enhances instantiation performance. The <code>skipJSONValidation</code> property should only be used if the datafile is being pulled from the REST API or CDN.</p>\n\n<p>For more information on the expected format of the datafile and how to get the most up-to-date version, see the <a href=\"#datafile\">datafile</a> section.</p>\n\n<p>You can customize the behavior of the SDK by configuring parameters to the Optimizely constructor. This is explained in detail <a href=\"#configuration\">below</a>.</p>\n\n</div>\n\n"}},"datafile":{"0-intro":{"template":"multi-example","title":"Datafile","anchor":"datafile","datafile":true,"code_examples":{"python":{"lang":"python"},"java":{"lang":"java"},"ruby":{"lang":"ruby"},"javascript":{"lang":"javascript"}},"body":"<p>The datafile compactly represents all of the &quot;instructions&quot; needed to activate experiments in your code and send conversion events back to Optimizely. The SDKs work by reading from a datafile in JSON format which represents the experiments you&#39;ve set up for the project. For example, the datafile at right represents the project from the <a href=\"/server/getting-started\">Getting started</a> guide.</p>\n<p>Unless you are building your own SDK, there shouldn&#39;t be any need to interact with the datafile directly.</p>\n<div class=\"attention attention--warning push--bottom\"><em>Please note:</em> The format of the datafile is still not finalized and subject to change.</div>\n\n<p>You can fetch the datafile for your Optimizely project in two ways:</p>\n<ul>\n<li><em>Use the Optimizely CDN.</em>  For example, if the ID of your project is <code>12345</code> you can access the file at <a href=\"https://cdn.optimizely.com/json/12345.json\">https://cdn.optimizely.com/json/12345.json</a>.</li>\n<li><em>Use the Optimizely REST API.</em> For example, if the ID of your project is <code>12345</code> you can access the file at <a href=\"https://www.optimizelyapis.com/experiment/v1/projects/12345/json\">https://www.optimizelyapis.com/experiment/v1/projects/12345/json</a>. Please note that as with other requests to the REST API, you will have to <a href=\"/rest/getting-started\">authenticate with an API token</a>.</li>\n</ul>\n<p>For example, this authenticated REST API call will return the datafile:</p>\n<pre><code class=\"lang-bash\">curl \\\n  -H &quot;Token: abcdefghijklmnopqrstuvwxyz:123456&quot; \\\n  &quot;https://www.optimizelyapis.com/experiment/v1/projects/12345/json&quot;\n</code></pre>\n<p>To retrieve the datafile, use the preferred request library of your language.</p>\n"},"1-webhooks":{"template":"multi-example","title":"Webhooks","anchor":"webhooks","code_examples":{"python":{"lang":"python","request":"{  \n  \"project_id\":1234,\n  \"timestamp\":1468447113,\n  \"event\":\"project.datafile_updated\",\n  \"data\":{\n    \"revision\":1,\n    \"origin_url\":\"https://optimizely.s3.amazonaws.com/json/1234.json\",\n    \"cdn_url\":\"https://cdn.optimizely.com/json/1234.json\"\n  }\n}\n"},"java":{"lang":"java","request":"{  \n  \"project_id\":1234,\n  \"timestamp\":1468447113,\n  \"event\":\"project.datafile_updated\",\n  \"data\":{\n    \"revision\":1,\n    \"origin_url\":\"https://optimizely.s3.amazonaws.com/json/1234.json\",\n    \"cdn_url\":\"https://cdn.optimizely.com/json/1234.json\"\n  }\n}\n"},"ruby":{"lang":"ruby","request":"{  \n  \"project_id\":1234,\n  \"timestamp\":1468447113,\n  \"event\":\"project.datafile_updated\",\n  \"data\":{\n    \"revision\":1,\n    \"origin_url\":\"https://optimizely.s3.amazonaws.com/json/1234.json\",\n    \"cdn_url\":\"https://cdn.optimizely.com/json/1234.json\"\n  }\n}\n"},"javascript":{"lang":"javascript","request":"{  \n  \"project_id\":1234,\n  \"timestamp\":1468447113,\n  \"event\":\"project.datafile_updated\",\n  \"data\":{\n    \"revision\":1,\n    \"origin_url\":\"https://optimizely.s3.amazonaws.com/json/1234.json\",\n    \"cdn_url\":\"https://cdn.optimizely.com/json/1234.json\"\n  }\n}"}},"body":"<p>We recommend configuring webhooks to maintain the most up-to-date version of the datafile for a project. Your supplied endpoint will be sent a POST request whenever the respective project is modified. Anytime the datafile is updated, you must re-instantiate the Optimizely object for the changes to take affect. </p>\n<p>You can setup a webhook by navigating to Settings &gt; Webhooks and add the URL the webhook service should ping.</p>\n<p>The webhook payload structure is defined on the right. For now, we have one event type: <code>project.datafile_updated</code> </p>\n"}},"basic":{"0-intro":{"template":"multi-example","title":"Basic usage","anchor":"basic","code_examples":{"python":{"lang":"python","request":"import optimizely\n\n# instantiate Optimizely object\noptimizely = optimizely.Optimizely(datafile)\n\n# activate user in the experiment\nvariation = optimizely.activate(experiment_key, user_id)\n\nif variation == 'variation_a':\n  # execute code for variation A\nelif variation == 'variation_b':\n  # execute code for variation B\nelse:\n  # execute default code\n\n# track conversion event\noptimizely.track(event_key, user_id)\n"},"java":{"lang":"java","request":"import com.optimizely.ab.Optimizely;\n\n// instantiate Optimizely object\nOptimizely optimizely = Optimizely.builder(datafile).build();\n\n// activate user in the experiment\nVariation variation = optimizely.activate(experimentKey, userId);\n\nif (variation != null) {\n    if (variation.is(\"variation_a\")) {\n        // execute code for variation A\n    } else if (variation.is(\"variation_b\")) {\n        // execute code for variation B\n    }\n} else {\n    // execute default code\n}\n\n// track conversion event\noptimizely.track(eventKey, userId);\n"},"ruby":{"lang":"ruby","request":"require \"optimizely\"\n\n# instantiate Project object\nproject = Optimizely::Project.new(datafile)\n\n# activate user in the experiment\nvariation = project.activate(experiment_key, user_id)\n\nif variation == 'variation_a'\n  # execute code for variation A\nelsif variation == 'variation_b'\n  # execute code for variation B\nelse\n  # execute default code\nend\n\n# track conversion event\nproject.track(event_key, user_id)\n"},"javascript":{"lang":"javascript","request":"var optimizely = require('optimizely-server-sdk');\n\n// instantiate Optimizely object\nvar optimizely = optimizely.createInstance({ datafile: datafile });\n\n// activate user in the experiment\nvar variation = optimizely.activate(experimentKey, userId);\n\nif (variation === 'variation_a') {\n  // execute code for variation A\n} else if (variation === 'variation_b') {\n  // execute code for variation B\n} else {\n  // execute default code\n}\n\n// track conversion event\noptimizely.track(eventKey, userId);"}},"body":"<p>This illustrates the minimal components necessary to run a server-side test.</p>\n\n<p>The SDK can be used to activate experiments and track events in your code. First, you need to <a href=\"/server/reference/index.html#initialization\"><strong>instantiate</strong></a> Optimizely. Then you&#39;ll want to call <a href=\"/server/reference/index.html#activation\"><strong>activate()</strong></a> at the point you want the experiment to start and <a href=\"/server/reference/index.html#tracking\"><strong>track()</strong></a> for conversion events you&#39;d like to track in Optimizely. <code>track()</code> can work across multiple experiments but should be called after <code>activate()</code> has been called for each experiment. </p>\n\n"}},"activate":{"1-targeting":{"template":"multi-example","title":"User attributes","anchor":"targeting","code_examples":{"python":{"lang":"python","request":"experiment_key = 'my_targeted_experiment'\nuser_id = 'user123'\nattributes = {'device': 'iPhone', 'ad_source': 'my_campaign'}\n\n# Conditionally activate an experiment for the provided user\nvariation = optimizely.activate(experiment_key, user_id, attributes)\n"},"java":{"lang":"java","request":"String experimentKey = \"my_experiment\";\nString userId = \"user123\";\n\nMap<String, String> attributes = new HashMap<String, String>();\nattributes.put(\"DEVICE\", \"iPhone\");\nattributes.put(\"AD_SOURCE\", \"my_campaign\");\n\n// Conditionally activate a experiment for the provided user\nVariation variation = optimizely.activate(experimentKey, userId, attributes);\n"},"ruby":{"lang":"ruby","request":"experiment_key = 'my_experiment'\nuser_id = 'user123'\nattributes = {'DEVICE' => 'iPhone', 'AD_SOURCE' => 'my_campaign'}\n\n# Conditionally activate an experiment for the provided user\nvariation = optimizely.activate(experiment_key, user_id, attributes)\n"},"javascript":{"lang":"javascript","request":"var experimentKey = 'my_experiment';\nvar userId = 'user123';\nvar attributes = { 'device': 'iphone', 'ad_source': 'my_campaign' };\n\n// Conditionally activate an experiment for the provided user\nvar variation = optimizely.activate(experimentKey, userId, attributes);"}},"body":"<p>If you&#39;d like to be able to segment your experiments based on attributes of your users, you should include the optional <code>attributes</code> argument to the <code>activate</code> function call. Optimizely will include these attributes when logging the experiment so you can segment them on the Optimizely results page.</p>\n<p>Passing attributes will also allow you to target your experiments to a particular audience you&#39;ve defined in Optimizely. If the provided experiment is targeted to an audience, Optimizely will evaluate whether the user falls in an audience that is associated with the experiment before bucketing.</p>\n"},"0-intro":{"template":"multi-example","title":"Experiment activation","anchor":"activation","code_examples":{"python":{"lang":"python","request":"experiment_key = 'my_experiment'\nuser_id = 'user123'\n\n# Conditionally activate an experiment for the provided user\nvariation = optimizely.activate(experiment_key, user_id)\n\nif variation == 'variation_a':\n  # execute code for variation A\nelif variation == 'variation_b':\n  # execute code for variation B\nelse:\n  # execute default code\n"},"java":{"lang":"java","request":"String experimentKey = \"my_experiment\";\nString userId = \"user123\";\n\n// Conditionally activate an experiment for the provided user\nVariation variation = optimizely.activate(experimentKey, userId);\n\nif (variation != null) {\n    if (variation.is(\"variation_a\")) {\n        // execute code for variation A\n    } else if (variation.is(\"variation_b\")) {\n        // execute code for variation B\n    }\n} else {\n    // execute default code\n}\n"},"ruby":{"lang":"ruby","request":"experiment_key = 'my_experiment'\nuser_id = 'user123'\n\n# Conditionally activate an experiment for the provided user\nvariation = project.activate(experiment_key, user_id)\n\nif variation == 'variation_a'\n  # execute code for variation A\nelsif variation == 'variation_b'\n  # execute code for variation B\nelse\n  # execute default code\nend\n"},"javascript":{"lang":"javascript","request":"var experimentKey = 'my_experiment';\nvar userId = 'user123';\n\n// Conditionally activate an experiment for the provided user\nvar variation = optimizely.activate(experimentKey, userId);\n\nif (variation === 'variation_a') {\n  // execute code for variation A\n} else if (variation === 'variation_b') {\n  // execute code for variation B\n} else {\n  // execute default code\n}"}},"body":"<p>Use the <code>activate</code> function to run an experiment in your code.</p>\n<p>The <code>activate</code> call will conditionally activate an experiment for a user based on the provided experiment key and a randomized hash of the provided user ID. If the user satisfies audience conditions for the experiment and the experiment is valid and running, the function returns the variation the user is bucketed in. Otherwise, <code>activate</code> returns <code>None</code> or <code>null</code>. Make sure that your code adequately deals with the case when the experiment is not activated i.e. execute the default variation.</p>\n<div class=\"attention attention--warning push--bottom\"><em>Please note:</em> in cases where an experiment is activated for a user, the SDK will log an event to Optimizely servers to record that the user was bucketed.</div>\n"},"2-get":{"template":"multi-example","title":"Get variation","anchor":"variation","code_examples":{"python":{"lang":"python","request":"experiment_key = 'my_experiment'\nuser_id = 'user123'\n\n# Get the active variation for the provided user\nvariation = optimizely.get_variation(experiment_key, user_id)\n"},"java":{"lang":"java","request":"String experimentKey = \"my_experiment\";\nString userId = \"user123\";\n\n// Get the active variation for the provided user\nVariation variation = optimizely.getVariation(experimentKey, userId);\n"},"ruby":{"lang":"ruby","request":"experiment_key = 'my_experiment'\nuser_id = 'user123'\n\n# Get the active variation for the provided user\nvariation = optimizely.get_variation(experiment_key, user_id)\n"},"javascript":{"lang":"javascript","request":"var experimentKey = 'my_experiment';\nvar userId = 'user123';\n\n// Get the active variation for the provided user\nvar variation = optimizely.getVariation(experimentKey, userId);"}},"body":"<div class=\"hidden\" data-toggle-section=\"java-code\">\n  If you&#39;ve already called <code>activate</code> and would like to retrieve the current variation assignment for a given experiment and user, without sending a duplicate network request to Optimizely, you can use <code>getVariation</code> as shown in the code shown at right.\n</div>\n\n<div class=\"hidden\" data-toggle-section=\"javascript-code\">\n  If you&#39;ve already called <code>activate</code> and would like to retrieve the current variation assignment for a given experiment and user, without sending a duplicate network request to Optimizely, you can use <code>getVariation</code> as shown in the code shown at right.\n</div>\n\n<div class=\"hidden\" data-toggle-section=\"ruby-code\">\n  If you&#39;ve already called <code>activate</code> and would like to retrieve the current variation assignment for a given experiment and user, without sending a duplicate network request to Optimizely, you can use <code>get_variation</code> as shown in the code shown at right.\n</div>\n\n<div class=\"hidden\" data-toggle-section=\"python-code\">\n  If you&#39;ve already called <code>activate</code> and would like to retrieve the current variation assignment for a given experiment and user, without sending a duplicate network request to Optimizely, you can use <code>get_variation</code> as shown in the code shown at right.\n</div>\n"}},"index":{"template":"page-sidebar--multi-example","title":"Optimizely Server-Side SDK Reference","includeSiblingData":true,"sections":["overview","install","basic","datafile","init","activate","tracking","custom"],"body":""},"custom":{"0-intro":{"template":"multi-example","title":"Custom configuration","anchor":"configuration","fields":{"Event dispatcher":"You can optionally change how the SDK dispatches events to Optimizely, by providing a request handling function that takes a URL and query parameters as arguments. You should provide your own event dispatcher if you have particular networking requirements on your servers that aren't met by our default dispatcher.","Logger":"You can provide a logging method that logs messages when certain events occur in the SDK. You can write your own logger if you would like to customize things like message formatting or minimum logging levels. For the Java SDK, we require the use of an [SLF4J](http://www.slf4j.org) implementation.","Error handler":"You should override Optimizely's error handling if you would like to take custom actions when exceptions are raised. If you are using the SDK in production then you will want to handle exceptions elegantly."},"code_examples":{"python":{"lang":"python","request":"from .error_handler import NoOpErrorHandler as error_handler\nfrom .logger import NoOpLogger as logger\nfrom .event_dispatcher import EventDispatcher as event_dispatcher\n\noptimizely = optimizely.Optimizely(datafile,\n                                   event_dispatcher=event_dispatcher,\n                                   logger=logger,\n                                   error_handler=error_handler)\n"},"java":{"lang":"java","request":"import com.optimizely.ab.Optimizely;\nimport com.optimizely.ab.event.AsyncEventHandler;\n\nString datafile = \"{}\";\n// Creates an async event handler with a max buffer of 20,000 events\n// and a single dispatcher thread\nEventHandler eventHandler = new AsyncEventHandler(20000, 1);\n// Creates an error handler that throws exceptions on errors\nErrorHandler errorHandler = new RaiseExceptionErrorHandler();\nOptimizely optimizely = Optimizely.builder(datafile, eventHandler)\n    .withErrorHandler(errorHandler);\n    .build();\n"},"ruby":{"lang":"ruby","request":"require_relative 'optimizely/event_dispatcher'\nrequire_relative 'optimizely/logger'\nrequire_relative 'optimizely/error_handler'\n\noptimizely = Optimizely::Project.new(datafile,\n                                     EventDispatcher.new,\n                                     NoOpLogger.new,\n                                     NoOpErrorHandler.new)\n"},"javascript":{"lang":"javascript","request":"var defaultLogger = require('optimizely-server-sdk/lib/plugins/logger');\nvar defaultErrorHandler = require('optimizely-server-sdk/lib/plugins/error_handler');\nvar defaultEventDispatcher = require('optimizely-server-sdk/lib/plugins/event_dispatcher');\n\noptimizely = optimizely.createInstance({\n  datafile: datafile,\n  errorHandler: defaultErrorHandler,\n  eventDispatcher: defaultEventDispatcher,\n  logger: defaultLogger.createLogger(),\n});"}},"body":"<div class=\"hidden visible\" data-toggle-section=\"python-code\">\n  You can optionally provide a number of parameters to the <code>Optimizely</code> constructor to configure how the SDK behaves. See below for a full list of options that you can configure. If you plan on writing your own event dispatching, logging, or error handling, or would like to edit the default behavior provided by our SDKs, refer to the reference implementations in the SDK source code for examples.\n</div>\n\n<div class=\"hidden visible\" data-toggle-section=\"java-code\">\n  You can optionally provide a number of parameters to the <code>Optimizely</code> constructor to configure how the SDK behaves. See below for a full list of options that you can configure. If you plan on writing your own event dispatching, logging, or error handling, or would like to edit the default behavior provided by our SDKs, refer to the reference implementations in the SDK source code for examples.\n</div>\n\n<div class=\"hidden visible\" data-toggle-section=\"ruby-code\">\n  You can optionally provide a number of parameters to the <code>Project</code> constructor to configure how the SDK behaves. See below for a full list of options that you can configure. If you plan on writing your own event dispatching, logging, or error handling, or would like to edit the default behavior provided by our SDKs, refer to the reference implementations in the SDK source code for examples.\n</div>\n\n<div class=\"hidden visible\" data-toggle-section=\"javascript-code\">\n  You can optionally provide a number of parameters to the <code>optimizely</code> constructor to configure how the SDK behaves. See below for a full list of options that you can configure. If you plan on writing your own event dispatching, logging, or error handling, or would like to edit the default behavior provided by our SDKs, refer to the reference implementations in the SDK source code for examples.\n</div>"}},"install":{"0-intro":{"template":"multi-example","title":"SDK installation","anchor":"installation","code_examples":{"python":{"lang":"python","request":"pip install optimizely-sdk"},"java":{"lang":"java","request":"repositories {\n  maven {\n    url  \"http://optimizely.bintray.com/optimizely\"\n  }\n}\n\ndependencies {\n  compile 'com.optimizely.ab:core-api:{VERSION}'\n  compile 'com.optimizely.ab:core-httpclient-impl:{VERSION}'\n}\n"},"ruby":{"lang":"ruby","request":"gem install optimizely-sdk\n"},"javascript":{"lang":"javascript","request":"npm install optimizely-server-sdk --save"}},"body":"<div class=\"hidden\" data-toggle-section=\"python-code\">\nThe Python SDK is distributed through <a href=\"https://pypi.python.org/pypi?name=optimizely-sdk&amp;:action=display\">PyPi</a>. To install, simply use <code>pip</code> or add <code>optimizely-sdk</code> to your <code>requirements.txt</code>.\n</div>\n\n<div class=\"hidden\" data-toggle-section=\"java-code\">\nThe Java SDK is distributed through Bintray. The <code>core-api</code> and <code>httpclient</code> Bintray packages are <a href=\"https://bintray.com/optimizely/optimizely/optimizely-sdk-core-api\">optimizely-sdk-core-api</a> and <a href=\"https://bintray.com/optimizely/optimizely/optimizely-sdk-httpclient\">optimizely-sdk-httpclient</a> respectively. You can find repository information as well as instructions on how to install the dependencies on Bintray. Gradle repository and dependency configurations are shown on the right.\n</div>\n\n<p>\n\n<div class=\"hidden\" data-toggle-section=\"java-code\">\n<code>core-api</code> requires <code>org.slf4j:slf4j-api:1.7.16</code> and a <em>supported</em> JSON parser. We currently integrate with <a href=\"https://github.com/FasterXML/jackson\">Jackson</a>, <a href=\"https://github.com/google/gson\">GSON</a>, <a href=\"http://www.json.org/\">json.org</a>, and <a href=\"https://code.google.com/archive/p/json-simple/\">json-simple</a>; if any of those packages are available at runtime, they will be used by <code>core-api</code>. If none of those packages are already provided in your project&#39;s classpath, one will need to be added.\n</div>\n\n<p>\n\n<div class=\"hidden\" data-toggle-section=\"java-code\">\n<code>core-httpclient-impl</code> requires <code>org.apache.httpcomponents:httpclient:4.5.2</code> and provides an asynchronous event dispatcher which is described in the <a href=\"#initialization\">Initialization</a> section. This library isn&#39;t required and you may provide a custom <code>EventHandler</code> implementation which uses a different networking stack.\n</div>\n\n<p>\n\n<div class=\"hidden\" data-toggle-section=\"ruby-code\">\nThe gem for the Ruby SDK is distributed through <a href=\"https://rubygems.org/gems/optimizely-sdk\">RubyGems</a>. To install, simply use <code>gem</code> or bundler to install the gem <code>optimizely-sdk</code>.\n</div>\n\n<p>\n\n<div class=\"hidden\" data-toggle-section=\"javascript-code\">\nThe Node SDK is distributed through <a href=\"https://www.npmjs.com/package/optimizely-server-sdk\">npm</a>. To install, simply run <code>npm install optimizely-server-sdk --save</code>.\n</div>\n\n"}}},"whitelist":{"index":{"template":"page-sidebar","title":"User whitelisting","body":"<h1 id=\"user-whitelisting\">User whitelisting</h1>\n<p>Whitelisting provides the ability to force users into specific variations. This is specifically useful when running QA, reviewing your experiments and writing unit tests.Our server-side SDKs will ensure that user IDs in the whitelist will be forced into the appropriate variation when calling <code>activate()</code>, <code>track()</code>, or <code>get_variation()</code>. </p>\n<p>To whitelist, select an experiment and edit the <strong>Whitelist</strong> on the right-hand side of the page. Here you can add user IDs and their variation. </p>\n<p><strong>Please note:</strong> Currently, whitelisting supports a maximum of 10 users. Let us know if you need this increased. </p>\n<p>Force users into variations:\n<img src=\"../../../assets/img/whitelist.png\" style=\"max-width:75%\"></p>\n"}},"introduction":{"index":{"template":"page-sidebar","title":"Optimizely Server-Side SDKs","body":"<h1 id=\"optimizely-server-side-sdks\">Optimizely Server-Side SDKs</h1>\n<p><em>Our Server-Side SDKs allow you to run experiments in any platform.</em></p>\n<div class=\"attention attention--warning push--bottom\">Server-side testing is not yet generally available to Optimizely customers. Please contact <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a> if you are interested in getting early access or giving us feedback.</div>\n\n<p>Optimizely offers several server-side SDKs that allow you to run experiments in your own server-side application. Our SDKs allow you to activate experiments anywhere in your code and track conversion events in Optimizely.</p>\n<p>There are numerous reasons why you may want to run experiments server-side instead of client-side:</p>\n<ul>\n<li><p><em>Performance.</em> To minimize page load times and app load times, you should keep your client code as thin as possible. By activating experiments on the server instead of the client, you can decide which experiments to run as soon as a request hits your servers and not incur any additional latency. Our SDKs perform bucketing without making any network requests.</p>\n</li>\n<li><p><em>Complexity.</em> If you&#39;d like to experiment with more complex changes in your backend, you can use our server-side SDKs to route traffic to different code blocks. Our server-side SDKs allow you to experiment with any part of your technology stack, based on what&#39;s important to your business.</p>\n</li>\n<li><p><em>Multi-channel.</em> If your backend code is serving content to multiple different channels, then using our server-side SDKs will allow you to create experiments that impact all your channels. Many of our customers want to experiment in their API or backend layer so they can impact all of their channels.</p>\n</li>\n<li><p><em>Extensibility.</em> All of our SDKs are available open source. If you&#39;d like to build a custom implementation then you can fork any of our SDKs or build your own wrapper around our underlying API. Creating your own SDK requires adding just a thin layer around Optimizely&#39;s API and JSON configuration.</p>\n</li>\n</ul>\n<p>To get started using our SDKs please read the <a href=\"../getting-started/index.html\">Getting Started</a> page that explains how to install our SDKs and run your first experiment.</p>\n<p>If you have any questions about using our server-side SDKs, please reach out to <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>. Our developer support team is happy to help and support building your application.</p>\n<p><a class=\"button button--highlight anchor--middle display--block width--200 text--center\" href=\"../getting-started/index.html\">Get started!</a></p>\n"}},"getting-started":{"index":{"template":"page-sidebar","title":"Optimizely Server-Side Testing Guide","body":"<h1 id=\"getting-started-with-server-side-testing\" class=\"flush--bottom\">Getting started with Server-Side Testing</h1>\n\n<div class=\"js-toggle-container cf\">\n  <ul class=\"nav unstyled float--right\">\n    <li class=\"z-index--2\"><a class=\"muted weight--bold color--brand\" href=\"#\" data-toggle-trigger=\"python-code\"\n    data-toggle-trigger-prop=\"lang\" data-toggle-trigger-class=\"color--brand\">Python</a></li>\n    <li class=\"z-index--2\"><a class=\"muted weight--bold\" href=\"#\" data-toggle-trigger=\"java-code\"\n    data-toggle-trigger-prop=\"lang\" data-toggle-trigger-class=\"color--brand\">Java</a></li>\n    <li class=\"z-index--2\"><a class=\"muted weight--bold\" href=\"#\" data-toggle-trigger=\"ruby-code\"\n    data-toggle-trigger-prop=\"lang\" data-toggle-trigger-class=\"color--brand\">Ruby</a></li>\n    <li class=\"z-index--2\"><a class=\"muted weight--bold\" href=\"#\" data-toggle-trigger=\"node-code\"\n    data-toggle-trigger-prop=\"lang\" data-toggle-trigger-class=\"color--brand\">Node</a></li>\n  </ul>\n</div>\n\n<hr class=\"rule\">\n\n<p>Create your first server-side test in 5 minutes!</p>\n<h3 id=\"1-create-an-optimizely-account\">1. Create an Optimizely account</h3>\n<p>If you don&#39;t have an Optimizely account already, just sign up for a <a href=\"https://www.optimizely.com/?modal=devsignup\">free developer account</a>. This account will give you access to core Optimizely features and API access, but with limited traffic allocation. No credit card is required, but you can always upgrade your account to a paid plan later.</p>\n<h3 id=\"2-add-a-custom-project\">2. Add a Custom Project</h3>\n<div class=\"attention attention--warning push--bottom\">Custom projects are not yet generally available to Optimizely customers. Please contact <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a> if you are interested in getting early access or giving us feedback.</div>\n\n<p>To set up a server-side experiment, you&#39;ll first need to create a <em>Custom Project</em>. Custom Projects are different than Web, iOS, and Android projects because they allow you to run custom experiments in any platform. For more information see <a href=\"https://help.optimizely.com/hc/en-us/articles/203659720#add\">adding projects</a>.</p>\n<p><img src=\"../../../assets/img/add-custom-project.gif\"></p>\n<h3 id=\"3-create-an-experiment\">3. Create an experiment</h3>\n<p>You can create a server-side experiment in a custom project by clicking on <em>New Experiment</em>. All you need to create an experiment is an <em>Experiment Key</em> (i.e. a unique identifier for your experiment to be referenced in code) and one or more <em>Variation Keys</em> (i.e. identifiers for the variations you&#39;d like test in your code). Optionally, you can also specify what traffic allocation you&#39;d like to send to the experiment and variations. In the example below, we&#39;re create an experiment with the following parameters:</p>\n<ul>\n<li><em>Experiment Key:</em> <code>SEARCH_RANKING_TEST_24</code></li>\n<li><em>Variation Key 1:</em> <code>ALGORITHM_A</code></li>\n<li><em>Variation Key 2:</em> <code>ALGORITHM_B</code></li>\n<li><em>Experiment Allocation:</em> 5% of traffic is included in the experiment</li>\n<li><em>Variation Allocation:</em> 50/50</li>\n</ul>\n<p><img src=\"../../../assets/img/create-custom-experiment.gif\"></p>\n<h3 id=\"4-create-goals-for-the-experiment\">4. Create goals for the experiment</h3>\n<p>You&#39;ll need to create at least one goal for your experiment, e.g. a conversion event. To do so, go to the <em>Goals</em> tab and click on <em>New Goal</em>. Like experiments and variations, you&#39;ll need to specify a <em>Goal Key</em> that can be used to track that goal in your code. In this example, we&#39;ve used <code>BOOKING_COMPLETE</code> as the goal and added it to the <code>SEARCH_RANKING_TEST_24</code> experiment.</p>\n<p><img src=\"../../../assets/img/create-custom-goal.gif\"></p>\n<h3 id=\"5-add-the-experiment-to-your-code\">5. Add the experiment to your code</h3>\n<div class=\"attention attention--warning push--bottom\">Our server-side SDKs are not yet generally available to Optimizely customers. Please contact <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a> if you are interested in getting early access or giving us feedback.</div>\n\n<p>You&#39;re now ready to set up your experiment in your code. We&#39;ve provided several SDKs you can use to split traffic in your code and send conversion events back to Optimizely. For more information on how to set up the experiment in your code, please see the <a href=\"../reference\">Reference</a> section that goes over how to download and use our SDKs in detail. As an alternative to using one of the Optimizely SDKs, you&#39;re also free to use our APIs directly.</p>\n<h3 id=\"6-start-the-experiment-\">6. Start the experiment!</h3>\n<p>Once you&#39;ve deployed your code and it&#39;s receiving live traffic, you&#39;re ready to start the experiment! To do that you just need to press the start button from Optimizely. You can now monitor the results by clicking on the <em>Results</em> button and see the results in real-time.</p>\n<p><img src=\"../../../assets/img/start-custom-experiment.gif\"></p>\n<p>If you have any questions, please reach out to <a href=\"mailto:developers@optimizely.com\">developers@optimizely.com</a>. Our developer support team is happy to help support you running your first server-side experiment!</p>\n"}},"faqs":{"index":{"template":"page-sidebar","title":"Optimizely Server-Side FAQs","body":"<h1 id=\"server-side-testing-faqs\">Server-Side Testing FAQs</h1>\n<p>Below are some frequently asked questions about Server-Side Testing. </p>\n<p>Can&#39;t find an answer to your question? We&#39;re happy to answer your question on <a href=\"developers@optimizely.com\">developers@optimizely.com</a> or our Live Chat.</p>\n<p><a href=\"#target-users\"><em>Q:</em> How do I target my experiment to a group of users?</a><br>\n<a href=\"#preview\"><em>Q:</em> How do I QA or preview my experiment?</a><br>\n<a href=\"#mutex\"><em>Q:</em> How do I make experiments mutually exclusive?</a><br>\n<a href=\"#bot\"><em>Q:</em> Do your SDKs handle bot detection?</a><br>\n<a href=\"#raw\"><em>Q:</em> How do I access the raw events I’ve sent to Optimizely?</a><br>\n<a href=\"#performance\"><em>Q:</em> What is the SDK performance?</a><br>\n<a href=\"#user-id\"><em>Q:</em> What user IDs should I use in activate() and track()?</a><br>\n<a href=\"#bucketing\"><em>Q:</em> How does Optimizely consistently bucket users across SDKs?</a><br>\n<a href=\"#client\"><em>Q:</em> How do I track user events that occur client-side in a web browser?</a><br>\n<a href=\"#build-custom\"><em>Q:</em> My language of choice isn’t listed. Can I build my own SDK?</a><br></p>\n<p><a name=\"target-users\"></a></p>\n<h5 id=\"-q-how-do-i-target-my-experiment-to-a-group-of-users-\"><em>Q: How do I target my experiment to a group of users?</em></h5>\n<p><em>A:</em> Our SDKs allow you to <a href=\"http://developers.optimizely.com/server/reference/index.html#targeting\">conditionally activate</a> experiments based on user attributes you provide. You can define user attributes in the Optimizely UI as well as audiences consisting of one or more user attributes.  Unlike our web and mobile solutions, our SDKs are completely platform-agnostic so we don’t provide default user attributes out of the box.</p>\n<p><a name=\"preview\"></a></p>\n<h5 id=\"-q-how-do-i-qa-or-preview-my-experiment-\"><em>Q: How do I QA or preview my experiment?</em></h5>\n<p><em>A:</em> You can use our <a href=\"http://developers.optimizely.com/server/whitelist/index.html\">Whitelisting feature</a> to force users into specific variations for QA purposes. The whitelist feature allows you to specify a list of user IDs and their corresponding variations. In addition, we’re working on updating our SDKs so you can force users into variations via code.</p>\n<p><a name=\"mutex\"></a></p>\n<h5 id=\"-q-how-do-i-make-experiments-mutually-exclusive-\"><em>Q: How do I make experiments mutually exclusive?</em></h5>\n<p><em>A:</em> Custom Projects support mutually exclusive experiments out of the box.  Simply create an <a href=\"http://developers.optimizely.com/server/groups/index.html#mutually-exclusive\">experiment group</a> and check the mutually exclusive setting. This option ensures that none of the experiments in the group will overlap and eliminate any interaction effects. </p>\n<p><a name=\"bot\"></a></p>\n<h5 id=\"-q-do-your-sdks-handle-bot-detection-\"><em>Q: Do your SDKs handle bot detection?</em></h5>\n<p><em>A:</em> Our SDKs do not handle bot detection out of the box. If you’re using your own bot detection, we recommend calling activate() only for users that have passed your bot detection filter to remove bots from your experiments.</p>\n<p><a name=\"raw\"></a></p>\n<h5 id=\"-q-how-do-i-access-the-raw-events-i-ve-sent-to-optimizely-\"><em>Q: How do I access the raw events I’ve sent to Optimizely?</em></h5>\n<p><em>A:</em> Our <a href=\"http://developers.optimizely.com/events/export/index.html\">raw data export</a> feature allows you to export all of the events you’ve sent to Optimizely on a daily basis. Talk to your customer success manager to have data export enabled for your account.</p>\n<p><a name=\"performance\"></a></p>\n<h5 id=\"-q-what-is-the-sdk-performance-\"><em>Q: What is the SDK performance?</em></h5>\n<p><em>A:</em> We’ve built our SDKs so you can split traffic to experiments without any network requests.  All decisions are made in-memory based on the <a href=\"http://developers.optimizely.com/server/reference/index.html#datafile\">datafile</a> cached in your application so there is negligible impact on latency, unlike cloud-based solutions that can add several milliseconds. Please contact us if you’re interested in seeing performance benchmarks for our SDKs.</p>\n<p><a name=\"user-id\"></a></p>\n<h5 id=\"-q-what-user-ids-should-i-use-in-activate-and-track-\"><em>Q: What user IDs should I use in activate() and track()?</em></h5>\n<p><em>A:</em> We’ve designed our SDKs to be platform-agnostic, so it’s up to you what user IDs make the most sense based on the experiments you’re running.  If you’re experimenting on a website backend, we recommend using an anonymous 1st party cookie or a user ID from your analytics provider.  If you’re experimenting on a logged in application or device, or experimenting across multiple channels, you can use a hashed email address or other anonymous UUID. Note: User IDs should be anonymous.</p>\n<p><a name=\"bucketing\"></a></p>\n<h5 id=\"-q-how-does-optimizely-consistently-bucket-users-across-sdks-\"><em>Q: How does Optimizely consistently bucket users across SDKs?</em></h5>\n<p><em>A:</em> All of our SDKs use deterministic bucketing via <a href=\"https://en.wikipedia.org/wiki/MurmurHash\">MurmurHash3</a> to determine what experiments and variations should be active for a user.  This ensures that users will be given the same treatment across multiple visits or on different channels We’ve also ensured that all of our SDKs give the same output no matter what language you’re using.</p>\n<p><a name=\"client\"></a></p>\n<h5 id=\"-q-how-do-i-track-user-events-that-occur-client-side-in-a-web-browser-\"><em>Q: How do I track user events that occur client-side in a web browser?</em></h5>\n<p><em>A:</em> We’ve created a lightweight <a href=\"http://developers.optimizely.com/server/reference/index.html#webtracking\">JavaScript SDK</a> that can be used for tracking conversion events from a web browser. Note that this is different than our standard <a href=\"https://help.optimizely.com/Set_Up_Optimizely/Implement_the_Optimizely_snippet\">JavaScript snippet</a>, so it won’t interfere with any experiments that you’re running client-side in the browser. </p>\n<p><a name=\"build-custom\"></a></p>\n<h5 id=\"-q-my-language-of-choice-isn-t-listed-can-i-build-my-own-sdk-\"><em>Q: My language of choice isn’t listed. Can I build my own SDK?</em></h5>\n<p><em>A:</em> Yes! You can use our <a href=\"http://developers.optimizely.com/server/reference/index.html\">datafile</a> and our <a href=\"http://developers.optimizely.com/events/api/\">event API</a> to build an SDK in any language of your choice.  We’ll publish an SDK developer guide shortly.  In the meantime, please let us know if you’re interested in developing your own SDK and we’ll provide you the documentation and support you need.</p>\n"}},"groups":{"index":{"template":"page-sidebar","title":"Experiment groups","body":"<h1 id=\"experiment-groups\">Experiment Groups</h1>\n<h4><p>In Custom Projects, you can create groups of experiments. You can create two different types of groups: <strong>overlapping</strong> and <strong>mutually exclusive</strong>. </p>\n\n<p>To get started, head over to the <strong>Groups</strong> tab and select <strong>New Group</strong>. When you create experiments ensure you have placed them in the correct group. </p></h4>\n\n<h3 id=\"overlapping-group\">Overlapping group</h3>\n<p>An overlapping group allows experiments to be brought together for organization or categorization. For example, you can create separate groups for your homepage tests, search result tests, and pricing tests. This allows for teams to track types of experiments they are running with Optimizely. A user can be in multiple experiments within the same overlapping group. User bucketing is done at the experiment level, similar to non-grouped experiments.</p>\n<h3 id=\"mutually-exclusive\">Mutually Exclusive</h3>\n<p>Developers should leverage mutually exclusive groups to bring experiments together to eliminate the interaction effects between experiments. You should create mutually exclusive experiments to ensure that certain groups of experiments never collide for the same user.  A user can be in at most one experiment per mutually exclusive group. User bucketing is first performed at the group level, where the user is bucketed into an experiment and will not be introduced to new experiments.</p>\n<p>Create a group:\n<img src=\"../../../assets/img/group2.png\" style=\"max-width:75%\"></p>\n<p>Add an experiment to the group:\n<img src=\"../../../assets/img/group.png\" style=\"max-width:75%\"></p>\n"}}},"token":{"index":{"template":"page-sidebar","title":"Token based","body":"<h1 id=\"token-based-authentication\">Token based authentication</h1>\n<div class=\"attention attention--warning push--bottom\">Visit <a target=\"_blank\" href=\"https://app.optimizely.com/tokens\">app.optimizely.com/tokens</a> to generate an API token.</div>\n\n<p>To authenticate, use a token generated from the link above in the request header, as shown in the example below. All API request examples in this documentation use the same header.</p>\n<pre><code class=\"lang-bash\">curl \\\n  -H &quot;Token: abcdefghijklmnopqrstuvwxyz:123456&quot; \\\n  &quot;https://www.optimizelyapis.com/experiment/v1/projects/&quot;\n</code></pre>\n<p>You can also write applications that authenticate with the REST API via OAuth 2.0. For more details on connecting applications via OAuth 2.0, refer to our <a href=\"/oauth\">OAuth 2.0 documentation</a>.</p>\n<p>Using the wrong token, or including the token in the request body rather than the header, will fail with error <code>Authentication Failed</code>.</p>\n"}}}