<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/Optimizely.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/Optimizely</TokenIdentifier>
			<Abstract type="html">This class defines the Optimizely SDK interface.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/sharedInstance</TokenIdentifier>
			<Abstract type="html">This method provides access to the Optimizely singleton.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (instancetype)sharedInstance</Declaration>
			
			<ReturnValue><Abstract type="html">The Optimizely singleton</Abstract></ReturnValue>
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/startOptimizelyWithAPIToken:launchOptions:</TokenIdentifier>
			<Abstract type="html">Calling this activates the Optimizely framework. If not called, the app will behave
as though Optimizely wasn&apos;t included.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)startOptimizelyWithAPIToken:(NSString *)apiToken launchOptions:(NSDictionary *)launchOptions</Declaration>
			<Parameters>
				<Parameter>
					<Name>apiToken</Name>
					<Abstract type="html">The apiToken of your iOS project on Optimizely.</Abstract>
				</Parameter><Parameter>
					<Name>launchOptions</Name>
					<Abstract type="html">A dictionary of launch options. This is typically the launch options
passed into -application: didFinishLaunchingWithOptions:.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/startOptimizelyWithAPIToken:launchOptions:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/startOptimizelyWithAPIToken:launchOptions:experimentsLoadedCallback:</TokenIdentifier>
			<Abstract type="html">Calling this activates the Optimizely framework. If not called, the app will behave
as though Optimizely wasn&apos;t included.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)startOptimizelyWithAPIToken:(NSString *)apiToken launchOptions:(NSDictionary *)launchOptions experimentsLoadedCallback:(OptimizelySuccessBlock)experimentsLoadedCallback</Declaration>
			<Parameters>
				<Parameter>
					<Name>apiToken</Name>
					<Abstract type="html">The apiToken of your iOS project on Optimizely.</Abstract>
				</Parameter><Parameter>
					<Name>launchOptions</Name>
					<Abstract type="html">A dictionary of launch options. This is typically the launch options
passed into -application: didFinishLaunchingWithOptions:.</Abstract>
				</Parameter><Parameter>
					<Name>experimentsLoadedCallback</Name>
					<Abstract type="html">A block that will be executed when the Optimizely framework
has activated any experiments that pass targeting.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/startOptimizelyWithAPIToken:launchOptions:experimentsLoadedCallback:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/setValue:forCustomTag:</TokenIdentifier>
			<Abstract type="html">This method allows you to add custom tags for targeting.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)setValue:(NSString *)tagValue forCustomTag:(NSString *)tagKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>tagValue</Name>
					<Abstract type="html">Value for custom tag</Abstract>
				</Parameter><Parameter>
					<Name>tagKey</Name>
					<Abstract type="html">Key for custom tag</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setValue:forCustomTag:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/handleOpenURL:</TokenIdentifier>
			<Abstract type="html">This method is intended to notify Optimizely that the app has been opened via URL and the
user wishes to enter edit mode.  Typically, this should be placed in application:handleOpenURL:</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (BOOL)handleOpenURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url passed to application:handleOpenURL:</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns true if the provided URL is an Optimizely URL, false otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/handleOpenURL:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/enableEditor</TokenIdentifier>
			<Abstract type="html">This method makes the device available to the Optimizely web editor.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)enableEditor</Declaration>
			
			
			<Anchor>//api/name/enableEditor</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/disableSwizzle</TokenIdentifier>
			<Abstract type="html">This method deactivates the swizzling functionality of the SDK required for use of the visual editor.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)disableSwizzle</Declaration>
			
			
			<Anchor>//api/name/disableSwizzle</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/enableGestureInAppStoreApp</TokenIdentifier>
			<Abstract type="html">This method enables the Optimizely gesture that launches your app into edit mode for builds
of your app downloaded from the app store.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)enableGestureInAppStoreApp</Declaration>
			
			
			<Anchor>//api/name/enableGestureInAppStoreApp</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/dispatch</TokenIdentifier>
			<Abstract type="html">This method immediately starts a network request that sends tracked events
to Optimizely and fetches the newest experiment data file.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)dispatch</Declaration>
			
			
			<Anchor>//api/name/dispatch</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/dispatchEvents</TokenIdentifier>
			<Abstract type="html">Manually send events to Optimizely.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)dispatchEvents</Declaration>
			
			
			<Anchor>//api/name/dispatchEvents</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/fetchNewDataFile</TokenIdentifier>
			<Abstract type="html">Manually fetch new data file from Optimizely.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)fetchNewDataFile</Declaration>
			
			
			<Anchor>//api/name/fetchNewDataFile</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/trackEvent:</TokenIdentifier>
			<Abstract type="html">This method informs Optimizely that a custom goal with key description occured.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/Optimizely/dispatch</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (void)trackEvent:(NSString *)description</Declaration>
			<Parameters>
				<Parameter>
					<Name>description</Name>
					<Abstract type="html">A unique string identifying the custom goal</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trackEvent:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/trackRevenue:</TokenIdentifier>
			<Abstract type="html">This method informs Optimizely that a revenue goal custom event occured.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/Optimizely/dispatch</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (void)trackRevenue:(int)revenueAmount</Declaration>
			<Parameters>
				<Parameter>
					<Name>revenueAmount</Name>
					<Abstract type="html">The revenue amount in cents associated with the event</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trackRevenue:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/registerCallbackForVariableWithKey:callback:</TokenIdentifier>
			<Abstract type="html">This method registers a callback method for when a given variable is changed.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)registerCallbackForVariableWithKey:(OptimizelyVariableKey *)key callback:(void ( ^ ) ( NSString *, id ))callback</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The Optimizely key associated with the variable you want to watch</Abstract>
				</Parameter><Parameter>
					<Name>callback</Name>
					<Abstract type="html">The callback method that will be invoked whenever the variable is changed. It takes in two parameters, the first being the key of the changed variable and the second is the variable&apos;s new value</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerCallbackForVariableWithKey:callback:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/refreshExperiments</TokenIdentifier>
			<Abstract type="html">This method manually refreshes all currently running experiments so as to take into account
the most recent targeting conditions and tags.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)refreshExperiments</Declaration>
			
			
			<Anchor>//api/name/refreshExperiments</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/stringForKey:</TokenIdentifier>
			<Abstract type="html">Returns the NSString idenitified by the provided key.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (NSString *)stringForKey:(OptimizelyVariableKey *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely identifying a live variable</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/stringForKey:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/colorForKey:</TokenIdentifier>
			<Abstract type="html">Returns the UIColor idenitified by the provided key.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (UIColor *)colorForKey:(OptimizelyVariableKey *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely identifying a live variable</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/colorForKey:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/numberForKey:</TokenIdentifier>
			<Abstract type="html">Returns the NSNumber idenitified by the provided key.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (NSNumber *)numberForKey:(OptimizelyVariableKey *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely identifying a live variable</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/numberForKey:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/pointForKey:</TokenIdentifier>
			<Abstract type="html">Returns the CGPoint idenitified by the provided key.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (CGPoint)pointForKey:(OptimizelyVariableKey *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely identifying a live variable</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/pointForKey:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/sizeForKey:</TokenIdentifier>
			<Abstract type="html">Returns the CGSize idenitified by the provided key.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (CGSize)sizeForKey:(OptimizelyVariableKey *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely identifying a live variable</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/sizeForKey:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/rectForKey:</TokenIdentifier>
			<Abstract type="html">Returns the CGRect idenitified by the provided key.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (CGRect)rectForKey:(OptimizelyVariableKey *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely identifying a live variable</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/rectForKey:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/boolForKey:</TokenIdentifier>
			<Abstract type="html">Returns the BOOL idenitified by the provided key.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (BOOL)boolForKey:(OptimizelyVariableKey *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely identifying a live variable</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/boolForKey:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/codeBlocksWithKey:blockOne:defaultBlock:</TokenIdentifier>
			<Abstract type="html">This method allows you to define a code block based experiment with one alternative.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)codeBlocksWithKey:(OptimizelyCodeBlocksKey *)codeBlocksKey blockOne:(void ( ^ ) ( void ))blockOne defaultBlock:(void ( ^ ) ( void ))defaultBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>codeBlocksKey</Name>
					<Abstract type="html">The OptimizelyCodeBlocksKey associated with this code blocks experiment</Abstract>
				</Parameter><Parameter>
					<Name>blockOne</Name>
					<Abstract type="html">Block corresponding to the first block name in the provided OptimizelyCodeBlocksKey</Abstract>
				</Parameter><Parameter>
					<Name>defaultBlock</Name>
					<Abstract type="html">This block will be executed if no active experiment involves this code block key.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/codeBlocksWithKey:blockOne:defaultBlock:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/codeBlocksWithKey:blockOne:blockTwo:defaultBlock:</TokenIdentifier>
			<Abstract type="html">This method allows you to define a code block based experiment with two alternatives.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)codeBlocksWithKey:(OptimizelyCodeBlocksKey *)codeBlocksKey blockOne:(void ( ^ ) ( void ))blockOne blockTwo:(void ( ^ ) ( void ))blockTwo defaultBlock:(void ( ^ ) ( void ))defaultBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>codeBlocksKey</Name>
					<Abstract type="html">The OptimizelyCodeBlocksKey associated with this code blocks experiment</Abstract>
				</Parameter><Parameter>
					<Name>blockOne</Name>
					<Abstract type="html">Block corresponding to the first block name in the provided OptimizelyCodeBlocksKey</Abstract>
				</Parameter><Parameter>
					<Name>blockTwo</Name>
					<Abstract type="html">Block corresponding to the second block name in the provided OptimizelyCodeBlocksKey</Abstract>
				</Parameter><Parameter>
					<Name>defaultBlock</Name>
					<Abstract type="html">This block will be executed if no active experiment involves this code block key.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/codeBlocksWithKey:blockOne:blockTwo:defaultBlock:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/codeBlocksWithKey:blockOne:blockTwo:blockThree:defaultBlock:</TokenIdentifier>
			<Abstract type="html">This method allows you to define a code block based experiment with three alternatives.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)codeBlocksWithKey:(OptimizelyCodeBlocksKey *)codeBlocksKey blockOne:(void ( ^ ) ( void ))blockOne blockTwo:(void ( ^ ) ( void ))blockTwo blockThree:(void ( ^ ) ( void ))blockThree defaultBlock:(void ( ^ ) ( void ))defaultBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>codeBlocksKey</Name>
					<Abstract type="html">The OptimizelyCodeBlocksKey associated with this code blocks experiment</Abstract>
				</Parameter><Parameter>
					<Name>blockOne</Name>
					<Abstract type="html">Block corresponding to the first block name in the provided OptimizelyCodeBlocksKey</Abstract>
				</Parameter><Parameter>
					<Name>blockTwo</Name>
					<Abstract type="html">Block corresponding to the second block name in the provided OptimizelyCodeBlocksKey</Abstract>
				</Parameter><Parameter>
					<Name>blockThree</Name>
					<Abstract type="html">Block corresponding to the third block name in the provided OptimizelyCodeBlocksKey</Abstract>
				</Parameter><Parameter>
					<Name>defaultBlock</Name>
					<Abstract type="html">This block will be executed if no active experiment involves this code block key.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/codeBlocksWithKey:blockOne:blockTwo:blockThree:defaultBlock:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/codeBlocksWithKey:blockOne:blockTwo:blockThree:blockFour:defaultBlock:</TokenIdentifier>
			<Abstract type="html">This method allows you to define a code block based experiment with four alternatives.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)codeBlocksWithKey:(OptimizelyCodeBlocksKey *)codeBlocksKey blockOne:(void ( ^ ) ( void ))blockOne blockTwo:(void ( ^ ) ( void ))blockTwo blockThree:(void ( ^ ) ( void ))blockThree blockFour:(void ( ^ ) ( void ))blockFour defaultBlock:(void ( ^ ) ( void ))defaultBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>codeBlocksKey</Name>
					<Abstract type="html">The OptimizelyCodeBlocksKey associated with this code blocks experiment</Abstract>
				</Parameter><Parameter>
					<Name>blockOne</Name>
					<Abstract type="html">Block corresponding to the first block name in the provided OptimizelyCodeBlocksKey</Abstract>
				</Parameter><Parameter>
					<Name>blockTwo</Name>
					<Abstract type="html">Block corresponding to the second block name in the provided OptimizelyCodeBlocksKey</Abstract>
				</Parameter><Parameter>
					<Name>blockThree</Name>
					<Abstract type="html">Block corresponding to the third block name in the provided OptimizelyCodeBlocksKey</Abstract>
				</Parameter><Parameter>
					<Name>blockFour</Name>
					<Abstract type="html">Block corresponding to the fourth block name in the provided OptimizelyCodeBlocksKey</Abstract>
				</Parameter><Parameter>
					<Name>defaultBlock</Name>
					<Abstract type="html">This block will be executed if no active experiment involves this code block key.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/codeBlocksWithKey:blockOne:blockTwo:blockThree:blockFour:defaultBlock:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/ignoreUIViewSubclassesWithNames:</TokenIdentifier>
			<Abstract type="html">Stores the set of classes that Optimizely will ignore generating OptimizelyIds for.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)ignoreUIViewSubclassesWithNames:(NSSet *)viewSubclassesToIgnoreForTagging</Declaration>
			<Parameters>
				<Parameter>
					<Name>viewSubclassesToIgnoreForTagging</Name>
					<Abstract type="html">A set of all the string class names that you want Optmizely to ignore generating Ids for.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/ignoreUIViewSubclassesWithNames:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/set:</TokenIdentifier>
			<Abstract type="html">@deprecated.  Use allExperiments or visitedExperiments.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong, nonatomic) NSArray *__attribute ( ( deprecated ( &quot;Use allExperiments or visitedExperiments&quot; )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/)</TokenIdentifier>
			<Abstract type="html">@deprecated.  Use allExperiments or visitedExperiments.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong, nonatomic) NSArray *__attribute ( ( deprecated ( &quot;Use allExperiments or visitedExperiments&quot; )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/)</TokenIdentifier>
			<Abstract type="html">@deprecated.  Use allExperiments or visitedExperiments.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong, nonatomic) NSArray *__attribute ( ( deprecated ( &quot;Use allExperiments or visitedExperiments&quot; )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setAllExperiments:</TokenIdentifier>
			<Abstract type="html">This returns a list of OptimizelyExperimentData objects that will encompass all experiments.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong, nonatomic) NSArray *allExperiments</Declaration>
			
			
			<Anchor>//api/name/allExperiments</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/allExperiments</TokenIdentifier>
			<Abstract type="html">This returns a list of OptimizelyExperimentData objects that will encompass all experiments.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong, nonatomic) NSArray *allExperiments</Declaration>
			
			
			<Anchor>//api/name/allExperiments</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/allExperiments</TokenIdentifier>
			<Abstract type="html">This returns a list of OptimizelyExperimentData objects that will encompass all experiments.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong, nonatomic) NSArray *allExperiments</Declaration>
			
			
			<Anchor>//api/name/allExperiments</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setVisitedExperiments:</TokenIdentifier>
			<Abstract type="html">This returns a list of OptimizelyExperimentData objects that will encompass all experiments that the user
has viewed across all sessions. To get a list of all experiments, use allExperiments.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong, nonatomic) NSArray *visitedExperiments</Declaration>
			
			
			<Anchor>//api/name/visitedExperiments</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/visitedExperiments</TokenIdentifier>
			<Abstract type="html">This returns a list of OptimizelyExperimentData objects that will encompass all experiments that the user
has viewed across all sessions. To get a list of all experiments, use allExperiments.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong, nonatomic) NSArray *visitedExperiments</Declaration>
			
			
			<Anchor>//api/name/visitedExperiments</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/visitedExperiments</TokenIdentifier>
			<Abstract type="html">This returns a list of OptimizelyExperimentData objects that will encompass all experiments that the user
has viewed across all sessions. To get a list of all experiments, use allExperiments.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong, nonatomic) NSArray *visitedExperiments</Declaration>
			
			
			<Anchor>//api/name/visitedExperiments</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setShouldNotGenerateDynamicIds:</TokenIdentifier>
			<Abstract type="html">Whether to dynamically generate optimizelyIds</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL shouldNotGenerateDynamicIds</Declaration>
			
			
			<Anchor>//api/name/shouldNotGenerateDynamicIds</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/shouldNotGenerateDynamicIds</TokenIdentifier>
			<Abstract type="html">Whether to dynamically generate optimizelyIds</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL shouldNotGenerateDynamicIds</Declaration>
			
			
			<Anchor>//api/name/shouldNotGenerateDynamicIds</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/shouldNotGenerateDynamicIds</TokenIdentifier>
			<Abstract type="html">Whether to dynamically generate optimizelyIds</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL shouldNotGenerateDynamicIds</Declaration>
			
			
			<Anchor>//api/name/shouldNotGenerateDynamicIds</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setProjectId:</TokenIdentifier>
			<Abstract type="html">The The current Optimizely project id.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong) NSString *projectId</Declaration>
			
			
			<Anchor>//api/name/projectId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/projectId</TokenIdentifier>
			<Abstract type="html">The The current Optimizely project id.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong) NSString *projectId</Declaration>
			
			
			<Anchor>//api/name/projectId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/projectId</TokenIdentifier>
			<Abstract type="html">The The current Optimizely project id.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong) NSString *projectId</Declaration>
			
			
			<Anchor>//api/name/projectId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setSdkVersion:</TokenIdentifier>
			<Abstract type="html">The current SDK version.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong) NSString *sdkVersion</Declaration>
			
			
			<Anchor>//api/name/sdkVersion</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/sdkVersion</TokenIdentifier>
			<Abstract type="html">The current SDK version.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong) NSString *sdkVersion</Declaration>
			
			
			<Anchor>//api/name/sdkVersion</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/sdkVersion</TokenIdentifier>
			<Abstract type="html">The current SDK version.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (readonly, strong) NSString *sdkVersion</Declaration>
			
			
			<Anchor>//api/name/sdkVersion</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setUserId:</TokenIdentifier>
			<Abstract type="html">A unique identifier for the current user.
If a custom identifier is provided, it must be set prior to calling +startWithProjectId:launchOptions:.
Defaults to the device UUIDString if no identifier is provided.
Setting the userId to nil will reset the UUID.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *userId</Declaration>
			
			
			<Anchor>//api/name/userId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/userId</TokenIdentifier>
			<Abstract type="html">A unique identifier for the current user.
If a custom identifier is provided, it must be set prior to calling +startWithProjectId:launchOptions:.
Defaults to the device UUIDString if no identifier is provided.
Setting the userId to nil will reset the UUID.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *userId</Declaration>
			
			
			<Anchor>//api/name/userId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/userId</TokenIdentifier>
			<Abstract type="html">A unique identifier for the current user.
If a custom identifier is provided, it must be set prior to calling +startWithProjectId:launchOptions:.
Defaults to the device UUIDString if no identifier is provided.
Setting the userId to nil will reset the UUID.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *userId</Declaration>
			
			
			<Anchor>//api/name/userId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setVerboseLogging:</TokenIdentifier>
			<Abstract type="html">When set to true, provides verbose logging details that may be useful for debugging.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) BOOL verboseLogging</Declaration>
			
			
			<Anchor>//api/name/verboseLogging</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/verboseLogging</TokenIdentifier>
			<Abstract type="html">When set to true, provides verbose logging details that may be useful for debugging.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) BOOL verboseLogging</Declaration>
			
			
			<Anchor>//api/name/verboseLogging</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/verboseLogging</TokenIdentifier>
			<Abstract type="html">When set to true, provides verbose logging details that may be useful for debugging.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) BOOL verboseLogging</Declaration>
			
			
			<Anchor>//api/name/verboseLogging</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setDispatchInterval:</TokenIdentifier>
			<Abstract type="html">The frequency (in seconds) at which events are sent to Optimizley and the experiment
data file is fetched from server. Defaults to 2 minutes.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSTimeInterval dispatchInterval</Declaration>
			
			
			<Anchor>//api/name/dispatchInterval</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/dispatchInterval</TokenIdentifier>
			<Abstract type="html">The frequency (in seconds) at which events are sent to Optimizley and the experiment
data file is fetched from server. Defaults to 2 minutes.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSTimeInterval dispatchInterval</Declaration>
			
			
			<Anchor>//api/name/dispatchInterval</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/dispatchInterval</TokenIdentifier>
			<Abstract type="html">The frequency (in seconds) at which events are sent to Optimizley and the experiment
data file is fetched from server. Defaults to 2 minutes.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSTimeInterval dispatchInterval</Declaration>
			
			
			<Anchor>//api/name/dispatchInterval</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setNetworkTimeout:</TokenIdentifier>
			<Abstract type="html">NSTimeInterval which controls timeout for first download of
config file.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSTimeInterval networkTimeout</Declaration>
			
			
			<Anchor>//api/name/networkTimeout</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/networkTimeout</TokenIdentifier>
			<Abstract type="html">NSTimeInterval which controls timeout for first download of
config file.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSTimeInterval networkTimeout</Declaration>
			
			
			<Anchor>//api/name/networkTimeout</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/networkTimeout</TokenIdentifier>
			<Abstract type="html">NSTimeInterval which controls timeout for first download of
config file.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSTimeInterval networkTimeout</Declaration>
			
			
			<Anchor>//api/name/networkTimeout</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setShouldReloadExperimentsOnForegrounding:</TokenIdentifier>
			<Abstract type="html">Indicates whether experiments should be reloaded on foregrounding.  Defaults to true.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) BOOL shouldReloadExperimentsOnForegrounding</Declaration>
			
			
			<Anchor>//api/name/shouldReloadExperimentsOnForegrounding</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/shouldReloadExperimentsOnForegrounding</TokenIdentifier>
			<Abstract type="html">Indicates whether experiments should be reloaded on foregrounding.  Defaults to true.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) BOOL shouldReloadExperimentsOnForegrounding</Declaration>
			
			
			<Anchor>//api/name/shouldReloadExperimentsOnForegrounding</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/shouldReloadExperimentsOnForegrounding</TokenIdentifier>
			<Abstract type="html">Indicates whether experiments should be reloaded on foregrounding.  Defaults to true.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) BOOL shouldReloadExperimentsOnForegrounding</Declaration>
			
			
			<Anchor>//api/name/shouldReloadExperimentsOnForegrounding</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/setDisableGesture:</TokenIdentifier>
			<Abstract type="html">BOOL indicating whether or not you want to disable the Optimizely Gesture.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) BOOL disableGesture</Declaration>
			
			
			<Anchor>//api/name/disableGesture</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/disableGesture</TokenIdentifier>
			<Abstract type="html">BOOL indicating whether or not you want to disable the Optimizely Gesture.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) BOOL disableGesture</Declaration>
			
			
			<Anchor>//api/name/disableGesture</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Optimizely/disableGesture</TokenIdentifier>
			<Abstract type="html">BOOL indicating whether or not you want to disable the Optimizely Gesture.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) BOOL disableGesture</Declaration>
			
			
			<Anchor>//api/name/disableGesture</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/activateMixpanelIntegration</TokenIdentifier>
			<Abstract type="html">This activates the Optimizely SDK&apos;s Mixpanel integration. This behaves identically to web,
which you can read about here,
except that it cannot (yet) be activated through the website.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)activateMixpanelIntegration</Declaration>
			
			
			<Anchor>//api/name/activateMixpanelIntegration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Optimizely/activateAmplitudeIntegration</TokenIdentifier>
			<Abstract type="html">This activates the Optimizely SDK&apos;s Amplitude integration. You can read more about this
here.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>+ (void)activateAmplitudeIntegration</Declaration>
			
			
			<Anchor>//api/name/activateAmplitudeIntegration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/trackEvent:</TokenIdentifier>
			<Abstract type="html">  @deprecated.  Use +trackEvent.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/Optimizely/dispatch</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)trackEvent:(NSString *)description</Declaration>
			<Parameters>
				<Parameter>
					<Name>description</Name>
					<Abstract type="html">The string uniquely identifying the custom goal you want to track</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trackEvent:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/stringForKey:defaultValue:</TokenIdentifier>
			<Abstract type="html">  @deprecated.  Use stringForKey:.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>- (NSString *)stringForKey:(NSString *)key defaultValue:(NSString *)defaultValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely defining the variable</Abstract>
				</Parameter><Parameter>
					<Name>defaultValue</Name>
					<Abstract type="html">The value this variable should take on in the absence of an
experimental change</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/stringForKey:defaultValue:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/colorForKey:defaultValue:</TokenIdentifier>
			<Abstract type="html">  @deprecated.  Use colorForKey:.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>- (UIColor *)colorForKey:(NSString *)key defaultValue:(UIColor *)defaultValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely defining the variable</Abstract>
				</Parameter><Parameter>
					<Name>defaultValue</Name>
					<Abstract type="html">The value this variable should take on in the absence of an
experimental change</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/colorForKey:defaultValue:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/numberForKey:defaultValue:</TokenIdentifier>
			<Abstract type="html">  @deprecated.  Use numberForKey:.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>- (NSNumber *)numberForKey:(NSString *)key defaultValue:(NSNumber *)defaultValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely defining the variable</Abstract>
				</Parameter><Parameter>
					<Name>defaultValue</Name>
					<Abstract type="html">The value this variable should take on in the absence of an
experimental change</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/numberForKey:defaultValue:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/pointForKey:defaultValue:</TokenIdentifier>
			<Abstract type="html">  @deprecated.  Use pointForKey:.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>- (CGPoint)pointForKey:(NSString *)key defaultValue:(CGPoint)defaultValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely defining the variable</Abstract>
				</Parameter><Parameter>
					<Name>defaultValue</Name>
					<Abstract type="html">The value this variable should take on in the absence of an
experimental change</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/pointForKey:defaultValue:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/sizeForKey:defaultValue:</TokenIdentifier>
			<Abstract type="html">  @deprecated.  Use sizeForKey:.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>- (CGSize)sizeForKey:(NSString *)key defaultValue:(CGSize)defaultValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely defining the variable</Abstract>
				</Parameter><Parameter>
					<Name>defaultValue</Name>
					<Abstract type="html">The value this variable should take on in the absence of an
experimental change</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/sizeForKey:defaultValue:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/rectForKey:defaultValue:</TokenIdentifier>
			<Abstract type="html">  @deprecated.  Use rectForKey:.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>- (CGRect)rectForKey:(NSString *)key defaultValue:(CGRect)defaultValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely defining the variable</Abstract>
				</Parameter><Parameter>
					<Name>defaultValue</Name>
					<Abstract type="html">The value this variable should take on in the absence of an
experimental change</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/rectForKey:defaultValue:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/boolForKey:defaultValue:</TokenIdentifier>
			<Abstract type="html">  @deprecated.  Use boolForKey:.</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>- (BOOL)boolForKey:(NSString *)key defaultValue:(BOOL)defaultValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A key uniquely defining the variable</Abstract>
				</Parameter><Parameter>
					<Name>defaultValue</Name>
					<Abstract type="html">The value this variable should take on in the absence of an
experimental change</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of this variable in the active experiment (default if no active experiment)</Abstract></ReturnValue>
			<Anchor>//api/name/boolForKey:defaultValue:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Optimizely/codeTest:withBlocks:defaultBlock:</TokenIdentifier>
			<Abstract type="html">  @deprecated.  Use +codeBlocksWithKey: blockOne:....</Abstract>
			<DeclaredIn>Optimizely.h</DeclaredIn>
			
			<Declaration>- (void)codeTest:(NSString *)codeTestKey withBlocks:(NSDictionary *)blocks defaultBlock:(void ( ^ ) ( void ))defaultBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>codeTestKey</Name>
					<Abstract type="html">A unique key that describes this test</Abstract>
				</Parameter><Parameter>
					<Name>blocks</Name>
					<Abstract type="html">A dictionary that maps descriptive NSString keys to (void (^)(void)) blocks for each
variation of this test.</Abstract>
				</Parameter><Parameter>
					<Name>defaultBlock</Name>
					<Abstract type="html">This block will be executed if no active experiment involves this code test.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/codeTest:withBlocks:defaultBlock:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
        
	</File>
</Tokens>